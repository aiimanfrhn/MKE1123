
Milestone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e30  08005e30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08005ea0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005ea0  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d469  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a1  00000000  00000000  0002d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002284d  00000000  00000000  00030ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6f4  00000000  00000000  00053314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd54f  00000000  00000000  00062a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003974  00000000  00000000  0012ff58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001338cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005db8 	.word	0x08005db8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005db8 	.word	0x08005db8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__io_putchar>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// printf() function
int __io_putchar(int ch)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 8000d96:	f107 010f 	add.w	r1, r7, #15
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <__io_putchar+0x28>)
 8000da2:	f003 f901 	bl	8003fa8 <HAL_UART_Transmit>
  return ch;
 8000da6:	687b      	ldr	r3, [r7, #4]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000d8 	.word	0x200000d8

08000db4 <max30100_plot>:

// Override plot function
void max30100_plot(uint16_t ir_sample, uint16_t red_sample)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	80fb      	strh	r3, [r7, #6]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	80bb      	strh	r3, [r7, #4]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%u,r:%u\n", ir_sample, red_sample);    // Print IR and Red
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	88ba      	ldrh	r2, [r7, #4]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <max30100_plot+0x24>)
 8000dcc:	f004 fa1c 	bl	8005208 <iprintf>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	08005dd0 	.word	0x08005dd0

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 fec7 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f857 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f945 	bl	8001078 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dee:	f000 f919 	bl	8001024 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000df2:	f000 f8bf 	bl	8000f74 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000df6:	f000 f8eb 	bl	8000fd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initiation
  max30100_init(&max30100, &hi2c1);
 8000dfa:	4924      	ldr	r1, [pc, #144]	; (8000e8c <main+0xb0>)
 8000dfc:	4824      	ldr	r0, [pc, #144]	; (8000e90 <main+0xb4>)
 8000dfe:	f000 f9d0 	bl	80011a2 <max30100_init>
  max30100_reset(&max30100);
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <main+0xb4>)
 8000e04:	f000 fa44 	bl	8001290 <max30100_reset>
  max30100_clear_fifo(&max30100);
 8000e08:	4821      	ldr	r0, [pc, #132]	; (8000e90 <main+0xb4>)
 8000e0a:	f000 fbfb 	bl	8001604 <max30100_clear_fifo>
  max30100_set_fifo_config(&max30100, max30100_smp_ave_8, 1, 7);
 8000e0e:	2307      	movs	r3, #7
 8000e10:	2201      	movs	r2, #1
 8000e12:	2103      	movs	r1, #3
 8000e14:	481e      	ldr	r0, [pc, #120]	; (8000e90 <main+0xb4>)
 8000e16:	f000 fbbb 	bl	8001590 <max30100_set_fifo_config>
  
  // Sensor settings
  max30100_set_led_pulse_width(&max30100, max30100_pw_16_bit);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	481c      	ldr	r0, [pc, #112]	; (8000e90 <main+0xb4>)
 8000e1e:	f000 fb20 	bl	8001462 <max30100_set_led_pulse_width>
  max30100_set_adc_resolution(&max30100, max30100_adc_2048);
 8000e22:	2100      	movs	r1, #0
 8000e24:	481a      	ldr	r0, [pc, #104]	; (8000e90 <main+0xb4>)
 8000e26:	f000 fb3f 	bl	80014a8 <max30100_set_adc_resolution>
  max30100_set_sampling_rate(&max30100, max30100_sr_800);
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <main+0xb4>)
 8000e2e:	f000 faf9 	bl	8001424 <max30100_set_sampling_rate>
  max30100_set_led_current_1(&max30100, 6.2);
 8000e32:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000e94 <main+0xb8>
 8000e36:	4816      	ldr	r0, [pc, #88]	; (8000e90 <main+0xb4>)
 8000e38:	f000 fb5a 	bl	80014f0 <max30100_set_led_current_1>
  max30100_set_led_current_2(&max30100, 6.2);
 8000e3c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000e94 <main+0xb8>
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <main+0xb4>)
 8000e42:	f000 fb7d 	bl	8001540 <max30100_set_led_current_2>

  // Enter SpO2 mode
  max30100_set_mode(&max30100, max30100_spo2);
 8000e46:	2103      	movs	r1, #3
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <main+0xb4>)
 8000e4a:	f000 fac5 	bl	80013d8 <max30100_set_mode>
  max30100_set_a_full(&max30100, 1);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <main+0xb4>)
 8000e52:	f000 fa2e 	bl	80012b2 <max30100_set_a_full>
  
  // Initiate 1 temperature measurement
  max30100_set_die_temp_en(&max30100, 1);
 8000e56:	2101      	movs	r1, #1
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <main+0xb4>)
 8000e5a:	f000 fa6a 	bl	8001332 <max30100_set_die_temp_en>
  max30100_set_die_temp_rdy(&max30100, 1);
 8000e5e:	2101      	movs	r1, #1
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0xb4>)
 8000e62:	f000 fa4e 	bl	8001302 <max30100_set_die_temp_rdy>
  
  uint8_t en_reg[2] = {0};
 8000e66:	2300      	movs	r3, #0
 8000e68:	80bb      	strh	r3, [r7, #4]
  max30100_read(&max30100, 0x00, en_reg, 1);
 8000e6a:	1d3a      	adds	r2, r7, #4
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <main+0xb4>)
 8000e72:	f000 f9e8 	bl	8001246 <max30100_read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (max30100_has_interrupt(&max30100))
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <main+0xb4>)
 8000e78:	f000 fa73 	bl	8001362 <max30100_has_interrupt>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d0f9      	beq.n	8000e76 <main+0x9a>
    {
      max30100_interrupt_handler(&max30100);
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <main+0xb4>)
 8000e84:	f000 fa7a 	bl	800137c <max30100_interrupt_handler>
    if (max30100_has_interrupt(&max30100))
 8000e88:	e7f5      	b.n	8000e76 <main+0x9a>
 8000e8a:	bf00      	nop
 8000e8c:	20000084 	.word	0x20000084
 8000e90:	20000168 	.word	0x20000168
 8000e94:	40c66666 	.word	0x40c66666

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 fa03 	bl	80052b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <SystemClock_Config+0xd8>)
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SystemClock_Config+0xd8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fd50 	bl	80039cc <HAL_RCC_OscConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f32:	f000 f92f 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f36:	230f      	movs	r3, #15
 8000f38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 f9f0 	bl	8003338 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f5e:	f000 f919 	bl	8001194 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_I2C1_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fb2:	f001 f9c7 	bl	8002344 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 f8ea 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000084 	.word	0x20000084
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <MX_USART1_UART_Init+0x50>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_USART1_UART_Init+0x4c>)
 8001008:	f002 ff7e 	bl	8003f08 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001012:	f000 f8bf 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000d8 	.word	0x200000d8
 8001020:	40011000 	.word	0x40011000

08001024 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_USART2_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800105c:	f002 ff54 	bl	8003f08 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f895 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000120 	.word	0x20000120
 8001074:	40004400 	.word	0x40004400

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <MX_GPIO_Init+0x10c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a3b      	ldr	r2, [pc, #236]	; (8001184 <MX_GPIO_Init+0x10c>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b39      	ldr	r3, [pc, #228]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a34      	ldr	r2, [pc, #208]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a26      	ldr	r2, [pc, #152]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <MX_GPIO_Init+0x10c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2120      	movs	r1, #32
 8001102:	4821      	ldr	r0, [pc, #132]	; (8001188 <MX_GPIO_Init+0x110>)
 8001104:	f001 f8e0 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <MX_GPIO_Init+0x114>)
 8001120:	f000 ff3e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001124:	2320      	movs	r3, #32
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <MX_GPIO_Init+0x110>)
 800113c:	f000 ff30 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001144:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114a:	2301      	movs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	480e      	ldr	r0, [pc, #56]	; (8001190 <MX_GPIO_Init+0x118>)
 8001156:	f000 ff23 	bl	8001fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2006      	movs	r0, #6
 8001160:	f000 fe55 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001164:	2006      	movs	r0, #6
 8001166:	f000 fe6e 	bl	8001e46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2028      	movs	r0, #40	; 0x28
 8001170:	f000 fe4d 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001174:	2028      	movs	r0, #40	; 0x28
 8001176:	f000 fe66 	bl	8001e46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020800 	.word	0x40020800
 8001190:	40020400 	.word	0x40020400

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <max30100_init>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30100_init(max30100_t *obj, I2C_HandleTypeDef *hi2c)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, max30100_SAMPLE_LEN_MAX * sizeof(uint16_t));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 f875 	bl	80052b2 <memset>
    memset(obj->_red_samples, 0, max30100_SAMPLE_LEN_MAX * sizeof(uint16_t));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3384      	adds	r3, #132	; 0x84
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f86e 	bl	80052b2 <memset>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <max30100_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30100_write(max30100_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b088      	sub	sp, #32
 80011e2:	af02      	add	r7, sp, #8
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	461a      	mov	r2, r3
 80011ea:	460b      	mov	r3, r1
 80011ec:	72fb      	strb	r3, [r7, #11]
 80011ee:	4613      	mov	r3, r2
 80011f0:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80011f2:	893b      	ldrh	r3, [r7, #8]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fe88 	bl	8004f0c <malloc>
 80011fc:	4603      	mov	r3, r0
 80011fe:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	7afa      	ldrb	r2, [r7, #11]
 8001204:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d009      	beq.n	8001220 <max30100_write+0x42>
 800120c:	893b      	ldrh	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <max30100_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	893a      	ldrh	r2, [r7, #8]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f8d5 	bl	80053ca <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, max30100_I2C_ADDR << 1, payload, buflen + 1, max30100_I2C_TIMEOUT);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	893b      	ldrh	r3, [r7, #8]
 8001226:	3301      	adds	r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	21ae      	movs	r1, #174	; 0xae
 8001234:	f001 f9ca 	bl	80025cc <HAL_I2C_Master_Transmit>
    free(payload);
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f003 fe6f 	bl	8004f1c <free>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <max30100_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30100_read(max30100_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af02      	add	r7, sp, #8
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	460b      	mov	r3, r1
 8001254:	72fb      	strb	r3, [r7, #11]
 8001256:	4613      	mov	r3, r2
 8001258:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, max30100_I2C_ADDR << 1, &reg_addr, 1, max30100_I2C_TIMEOUT);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f107 0217 	add.w	r2, r7, #23
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	21ae      	movs	r1, #174	; 0xae
 8001270:	f001 f9ac 	bl	80025cc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, max30100_I2C_ADDR << 1, buf, buflen, max30100_I2C_TIMEOUT);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	893b      	ldrh	r3, [r7, #8]
 800127a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127e:	9200      	str	r2, [sp, #0]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	21ae      	movs	r1, #174	; 0xae
 8001284:	f001 faa0 	bl	80027c8 <HAL_I2C_Master_Receive>
}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <max30100_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30100_t object instance.
 */
void max30100_reset(max30100_t *obj)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_MODE_CONFIG, &val, 1);
 800129c:	f107 020f 	add.w	r2, r7, #15
 80012a0:	2301      	movs	r3, #1
 80012a2:	2109      	movs	r1, #9
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff9a 	bl	80011de <max30100_write>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <max30100_set_a_full>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30100_set_a_full(max30100_t *obj, uint8_t enable)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
    max30100_read(obj, max30100_INTERRUPT_ENABLE_1, &reg, 1);
 80012c2:	f107 020f 	add.w	r2, r7, #15
 80012c6:	2301      	movs	r3, #1
 80012c8:	2102      	movs	r1, #2
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffbb 	bl	8001246 <max30100_read>
    reg &= ~(0x01 << max30100_INTERRUPT_A_FULL);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << max30100_INTERRUPT_A_FULL);
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	01db      	lsls	r3, r3, #7
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_INTERRUPT_ENABLE_1, &reg, 1);
 80012ec:	f107 020f 	add.w	r2, r7, #15
 80012f0:	2301      	movs	r3, #1
 80012f2:	2102      	movs	r1, #2
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff72 	bl	80011de <max30100_write>
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <max30100_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30100_set_die_temp_rdy(max30100_t *obj, uint8_t enable)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << max30100_INTERRUPT_DIE_TEMP_RDY;
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_INTERRUPT_ENABLE_2, &reg, 1);
 800131c:	f107 020f 	add.w	r2, r7, #15
 8001320:	2301      	movs	r3, #1
 8001322:	2103      	movs	r1, #3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff5a 	bl	80011de <max30100_write>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <max30100_set_die_temp_en>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30100_set_die_temp_en(max30100_t *obj, uint8_t enable)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << max30100_DIE_TEMP_EN;
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_DIE_TEMP_CONFIG, &reg, 1);
 800134c:	f107 020f 	add.w	r2, r7, #15
 8001350:	2301      	movs	r3, #1
 8001352:	2121      	movs	r1, #33	; 0x21
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff42 	bl	80011de <max30100_write>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <max30100_has_interrupt>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30100_has_interrupt(max30100_t *obj)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <max30100_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30100_t object instance.
 */
void max30100_interrupt_handler(max30100_t *obj)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8001384:	2300      	movs	r3, #0
 8001386:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30100_read(obj, max30100_INTERRUPT_STATUS_1, reg, 2);
 8001388:	f107 020c 	add.w	r2, r7, #12
 800138c:	2302      	movs	r3, #2
 800138e:	2100      	movs	r1, #0
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff58 	bl	8001246 <max30100_read>

    if ((reg[0] >> max30100_INTERRUPT_A_FULL) & 0x01)
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	09db      	lsrs	r3, r3, #7
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <max30100_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30100_read_fifo(obj);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f94c 	bl	8001642 <max30100_read_fifo>
    if ((reg[0] >> max30100_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> max30100_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <max30100_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30100_read_temp(obj, &temp_int, &temp_frac);
 80013b8:	f107 020a 	add.w	r2, r7, #10
 80013bc:	f107 030b 	add.w	r3, r7, #11
 80013c0:	4619      	mov	r1, r3
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f9a8 	bl	8001718 <max30100_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <max30100_set_mode>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param mode Measurement mode enum (max30100_mode_t).
 */
void max30100_set_mode(max30100_t *obj, max30100_mode_t mode)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30100_read(obj, max30100_MODE_CONFIG, &config, 1);
 80013e4:	f107 020f 	add.w	r2, r7, #15
 80013e8:	2301      	movs	r3, #1
 80013ea:	2109      	movs	r1, #9
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff2a 	bl	8001246 <max30100_read>
    config = (config & 0xf8) | mode;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	f023 0307 	bic.w	r3, r3, #7
 80013fa:	b25a      	sxtb	r2, r3
 80013fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_MODE_CONFIG, &config, 1);
 8001408:	f107 020f 	add.w	r2, r7, #15
 800140c:	2301      	movs	r3, #1
 800140e:	2109      	movs	r1, #9
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fee4 	bl	80011de <max30100_write>
    max30100_clear_fifo(obj);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f8f4 	bl	8001604 <max30100_clear_fifo>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <max30100_set_sampling_rate>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param sr Sampling rate enum (max30100_spo2_st_t).
 */
void max30100_set_sampling_rate(max30100_t *obj, max30100_sr_t sr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30100_read(obj, max30100_SPO2_CONFIG, &config, 1);
 8001430:	f107 020f 	add.w	r2, r7, #15
 8001434:	2301      	movs	r3, #1
 8001436:	210a      	movs	r1, #10
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff04 	bl	8001246 <max30100_read>
    config = (config & 0x63) << max30100_SPO2_SR;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001448:	b2db      	uxtb	r3, r3
 800144a:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_SPO2_CONFIG, &config, 1);
 800144c:	f107 020f 	add.w	r2, r7, #15
 8001450:	2301      	movs	r3, #1
 8001452:	210a      	movs	r1, #10
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fec2 	bl	80011de <max30100_write>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <max30100_set_led_pulse_width>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param pw Pulse width enum (max30100_led_pw_t).
 */
void max30100_set_led_pulse_width(max30100_t *obj, max30100_led_pw_t pw)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30100_read(obj, max30100_SPO2_CONFIG, &config, 1);
 800146e:	f107 020f 	add.w	r2, r7, #15
 8001472:	2301      	movs	r3, #1
 8001474:	210a      	movs	r1, #10
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fee5 	bl	8001246 <max30100_read>
    config = (config & 0x7c) | (pw << max30100_SPO2_LEW_PW);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001484:	b25a      	sxtb	r2, r3
 8001486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_SPO2_CONFIG, &config, 1);
 8001492:	f107 020f 	add.w	r2, r7, #15
 8001496:	2301      	movs	r3, #1
 8001498:	210a      	movs	r1, #10
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe9f 	bl	80011de <max30100_write>
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <max30100_set_adc_resolution>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param adc ADC resolution enum (max30100_adc_t).
 */
void max30100_set_adc_resolution(max30100_t *obj, max30100_adc_t adc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30100_read(obj, max30100_SPO2_CONFIG, &config, 1);
 80014b4:	f107 020f 	add.w	r2, r7, #15
 80014b8:	2301      	movs	r3, #1
 80014ba:	210a      	movs	r1, #10
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fec2 	bl	8001246 <max30100_read>
    config = (config & 0x1f) | (adc << max30100_SPO2_ADC_RGE);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	015b      	lsls	r3, r3, #5
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_SPO2_CONFIG, &config, 1);
 80014da:	f107 020f 	add.w	r2, r7, #15
 80014de:	2301      	movs	r3, #1
 80014e0:	210a      	movs	r1, #10
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fe7b 	bl	80011de <max30100_write>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <max30100_set_led_current_1>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30100_set_led_current_1(max30100_t *obj, float ma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7ff f83b 	bl	8000578 <__aeabi_f2d>
 8001502:	a30d      	add	r3, pc, #52	; (adr r3, 8001538 <max30100_set_led_current_1+0x48>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f9b8 	bl	800087c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fa9a 	bl	8000a4c <__aeabi_d2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_LED_IR_PA1, &pa, 1);
 800151e:	f107 020f 	add.w	r2, r7, #15
 8001522:	2301      	movs	r3, #1
 8001524:	210c      	movs	r1, #12
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fe59 	bl	80011de <max30100_write>
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	f3af 8000 	nop.w
 8001538:	9999999a 	.word	0x9999999a
 800153c:	3fc99999 	.word	0x3fc99999

08001540 <max30100_set_led_current_2>:
 *
 * @param obj Pointer to max30100_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30100_set_led_current_2(max30100_t *obj, float ma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800154c:	6838      	ldr	r0, [r7, #0]
 800154e:	f7ff f813 	bl	8000578 <__aeabi_f2d>
 8001552:	a30d      	add	r3, pc, #52	; (adr r3, 8001588 <max30100_set_led_current_2+0x48>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f990 	bl	800087c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fa72 	bl	8000a4c <__aeabi_d2uiz>
 8001568:	4603      	mov	r3, r0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_LED_RED_PA2, &pa, 1);
 800156e:	f107 020f 	add.w	r2, r7, #15
 8001572:	2301      	movs	r3, #1
 8001574:	210d      	movs	r1, #13
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fe31 	bl	80011de <max30100_write>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	f3af 8000 	nop.w
 8001588:	9999999a 	.word	0x9999999a
 800158c:	3fc99999 	.word	0x3fc99999

08001590 <max30100_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30100_set_fifo_config(max30100_t *obj, max30100_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4608      	mov	r0, r1
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	70fb      	strb	r3, [r7, #3]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70bb      	strb	r3, [r7, #2]
 80015a6:	4613      	mov	r3, r2
 80015a8:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << max30100_FIFO_CONFIG_SMP_AVE;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << max30100_FIFO_CONFIG_ROLL_OVER_EN);
 80015c0:	78bb      	ldrb	r3, [r7, #2]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << max30100_FIFO_CONFIG_FIFO_A_FULL);
 80015d8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_FIFO_CONFIG, &config, 1);
 80015ee:	f107 020f 	add.w	r2, r7, #15
 80015f2:	2301      	movs	r3, #1
 80015f4:	2108      	movs	r1, #8
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fdf1 	bl	80011de <max30100_write>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <max30100_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30100_t object instance.
 */
void max30100_clear_fifo(max30100_t *obj)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
    max30100_write(obj, max30100_FIFO_WR_PTR, &val, 3);
 8001610:	f107 020f 	add.w	r2, r7, #15
 8001614:	2303      	movs	r3, #3
 8001616:	2104      	movs	r1, #4
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fde0 	bl	80011de <max30100_write>
    max30100_write(obj, max30100_FIFO_RD_PTR, &val, 3);
 800161e:	f107 020f 	add.w	r2, r7, #15
 8001622:	2303      	movs	r3, #3
 8001624:	2106      	movs	r1, #6
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fdd9 	bl	80011de <max30100_write>
    max30100_write(obj, max30100_OVF_COUNTER, &val, 3);
 800162c:	f107 020f 	add.w	r2, r7, #15
 8001630:	2303      	movs	r3, #3
 8001632:	2105      	movs	r1, #5
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fdd2 	bl	80011de <max30100_write>
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <max30100_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30100_t object instance.
 *
 * @param obj Pointer to max30100_t object instance.
 */
void max30100_read_fifo(max30100_t *obj)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b088      	sub	sp, #32
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	74fb      	strb	r3, [r7, #19]
 800164e:	2300      	movs	r3, #0
 8001650:	74bb      	strb	r3, [r7, #18]
    max30100_read(obj, max30100_FIFO_WR_PTR, &wr_ptr, 1);
 8001652:	f107 0213 	add.w	r2, r7, #19
 8001656:	2301      	movs	r3, #1
 8001658:	2104      	movs	r1, #4
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fdf3 	bl	8001246 <max30100_read>
    max30100_read(obj, max30100_FIFO_RD_PTR, &rd_ptr, 1);
 8001660:	f107 0212 	add.w	r2, r7, #18
 8001664:	2301      	movs	r3, #1
 8001666:	2106      	movs	r1, #6
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fdec 	bl	8001246 <max30100_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 800166e:	7cfa      	ldrb	r2, [r7, #19]
 8001670:	7cbb      	ldrb	r3, [r7, #18]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dc03      	bgt.n	8001688 <max30100_read_fifo+0x46>
    {
        num_samples += 32;
 8001680:	7ffb      	ldrb	r3, [r7, #31]
 8001682:	3320      	adds	r3, #32
 8001684:	b2db      	uxtb	r3, r3
 8001686:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	77bb      	strb	r3, [r7, #30]
 800168c:	e039      	b.n	8001702 <max30100_read_fifo+0xc0>
    {
        uint8_t sample[6];
        max30100_read(obj, max30100_FIFO_DATA, sample, 6);
 800168e:	f107 020c 	add.w	r2, r7, #12
 8001692:	2306      	movs	r3, #6
 8001694:	2107      	movs	r1, #7
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fdd5 	bl	8001246 <max30100_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	461a      	mov	r2, r3
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4313      	orrs	r3, r2
 80016a8:	7bba      	ldrb	r2, [r7, #14]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80016b0:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	461a      	mov	r2, r3
 80016b8:	7c3b      	ldrb	r3, [r7, #16]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	4313      	orrs	r3, r2
 80016be:	7c7a      	ldrb	r2, [r7, #17]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80016c6:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80016c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80016d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	3320      	adds	r3, #32
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	605a      	str	r2, [r3, #4]
        max30100_plot(ir_sample, red_sample);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	b292      	uxth	r2, r2
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb5f 	bl	8000db4 <max30100_plot>
    for (int8_t i = 0; i < num_samples; i++)
 80016f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	77bb      	strb	r3, [r7, #30]
 8001702:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001706:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800170a:	429a      	cmp	r2, r3
 800170c:	dbbf      	blt.n	800168e <max30100_read_fifo+0x4c>
    }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <max30100_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30100_read_temp(max30100_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
    max30100_read(obj, max30100_DIE_TINT, (uint8_t *)temp_int, 1);
 8001724:	2301      	movs	r3, #1
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	211f      	movs	r1, #31
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fd8b 	bl	8001246 <max30100_read>
    max30100_read(obj, max30100_DIE_TFRAC, temp_frac, 1);
 8001730:	2301      	movs	r3, #1
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	2120      	movs	r1, #32
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fd85 	bl	8001246 <max30100_read>
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001782:	2007      	movs	r0, #7
 8001784:	f000 fb38 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_I2C_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e4:	2304      	movs	r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <HAL_I2C_MspInit+0x8c>)
 80017f0:	f000 fbd6 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_I2C_MspInit+0x88>)
 80017fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_I2C_MspInit+0x88>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40005400 	.word	0x40005400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a36      	ldr	r2, [pc, #216]	; (800191c <HAL_UART_MspInit+0xf8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d135      	bne.n	80018b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_UART_MspInit+0xfc>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a34      	ldr	r2, [pc, #208]	; (8001920 <HAL_UART_MspInit+0xfc>)
 8001850:	f043 0310 	orr.w	r3, r3, #16
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_UART_MspInit+0xfc>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_UART_MspInit+0xfc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_UART_MspInit+0xfc>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_UART_MspInit+0xfc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800187e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001890:	2307      	movs	r3, #7
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4822      	ldr	r0, [pc, #136]	; (8001924 <HAL_UART_MspInit+0x100>)
 800189c:	f000 fb80 	bl	8001fa0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2025      	movs	r0, #37	; 0x25
 80018a6:	f000 fab2 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018aa:	2025      	movs	r0, #37	; 0x25
 80018ac:	f000 facb 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b0:	e030      	b.n	8001914 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_UART_MspInit+0x104>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d12b      	bne.n	8001914 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_UART_MspInit+0xfc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_UART_MspInit+0xfc>)
 80018c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_UART_MspInit+0xfc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_UART_MspInit+0xfc>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_UART_MspInit+0xfc>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_UART_MspInit+0xfc>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f4:	230c      	movs	r3, #12
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001904:	2307      	movs	r3, #7
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_UART_MspInit+0x100>)
 8001910:	f000 fb46 	bl	8001fa0 <HAL_GPIO_Init>
}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	; 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40011000 	.word	0x40011000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40004400 	.word	0x40004400

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f94e 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001984:	2001      	movs	r0, #1
 8001986:	f000 fcb9 	bl	80022fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USART1_IRQHandler+0x10>)
 8001996:	f002 fb93 	bl	80040c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200000d8 	.word	0x200000d8

080019a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ac:	f000 fca6 	bl	80022fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
  }

  return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e009      	b.n	8001a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f9bd 	bl	8000d88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <_write+0x12>
  }
  return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f003 fc56 	bl	8005370 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20020000 	.word	0x20020000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	20000270 	.word	0x20000270
 8001af8:	200003c8 	.word	0x200003c8

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b24:	f7ff ffea 	bl	8001afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f003 fc15 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff f943 	bl	8000ddc <main>
  bx  lr    
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b64:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 8001b68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b6c:	200003c4 	.word	0x200003c4

08001b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_Init+0x40>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_Init+0x40>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x40>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f92b 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fdcc 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f943 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f90b 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000274 	.word	0x20000274

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000274 	.word	0x20000274

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff feda 	bl	8001c40 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d008      	beq.n	8001eac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2280      	movs	r2, #128	; 0x80
 8001e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e052      	b.n	8001f52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0216 	bic.w	r2, r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <HAL_DMA_Abort+0x62>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0208 	bic.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	e013      	b.n	8001f26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efe:	f7ff fe9f 	bl	8001c40 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d90c      	bls.n	8001f26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e015      	b.n	8001f52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e4      	bne.n	8001efe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	223f      	movs	r2, #63	; 0x3f
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e00c      	b.n	8001f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e165      	b.n	8002288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 8154 	bne.w	8002282 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d005      	beq.n	8001ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d130      	bne.n	8002054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0201 	and.w	r2, r3, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b03      	cmp	r3, #3
 800205e:	d017      	beq.n	8002090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80ae 	beq.w	8002282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_GPIO_Init+0x300>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5c      	ldr	r2, [pc, #368]	; (80022a0 <HAL_GPIO_Init+0x300>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_GPIO_Init+0x300>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_GPIO_Init+0x304>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4f      	ldr	r2, [pc, #316]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x20a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x206>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x202>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00c      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021ba:	2300      	movs	r3, #0
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021cc:	4935      	ldr	r1, [pc, #212]	; (80022a4 <HAL_GPIO_Init+0x304>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_GPIO_Init+0x324>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	f67f ae96 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40021400 	.word	0x40021400
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f806 	bl	800232c <HAL_GPIO_EXTI_Callback>
  }
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e12b      	b.n	80025ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fa12 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023a8:	f001 f8b8 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 80023ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a81      	ldr	r2, [pc, #516]	; (80025b8 <HAL_I2C_Init+0x274>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d807      	bhi.n	80023c8 <HAL_I2C_Init+0x84>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a80      	ldr	r2, [pc, #512]	; (80025bc <HAL_I2C_Init+0x278>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e006      	b.n	80023d6 <HAL_I2C_Init+0x92>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a7d      	ldr	r2, [pc, #500]	; (80025c0 <HAL_I2C_Init+0x27c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0e7      	b.n	80025ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a78      	ldr	r2, [pc, #480]	; (80025c4 <HAL_I2C_Init+0x280>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0c9b      	lsrs	r3, r3, #18
 80023e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a6a      	ldr	r2, [pc, #424]	; (80025b8 <HAL_I2C_Init+0x274>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d802      	bhi.n	8002418 <HAL_I2C_Init+0xd4>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3301      	adds	r3, #1
 8002416:	e009      	b.n	800242c <HAL_I2C_Init+0xe8>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	4a69      	ldr	r2, [pc, #420]	; (80025c8 <HAL_I2C_Init+0x284>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	3301      	adds	r3, #1
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	430b      	orrs	r3, r1
 8002432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800243e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	495c      	ldr	r1, [pc, #368]	; (80025b8 <HAL_I2C_Init+0x274>)
 8002448:	428b      	cmp	r3, r1
 800244a:	d819      	bhi.n	8002480 <HAL_I2C_Init+0x13c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e59      	subs	r1, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fbb1 f3f3 	udiv	r3, r1, r3
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002460:	400b      	ands	r3, r1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_I2C_Init+0x138>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e59      	subs	r1, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fbb1 f3f3 	udiv	r3, r1, r3
 8002474:	3301      	adds	r3, #1
 8002476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247a:	e051      	b.n	8002520 <HAL_I2C_Init+0x1dc>
 800247c:	2304      	movs	r3, #4
 800247e:	e04f      	b.n	8002520 <HAL_I2C_Init+0x1dc>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d111      	bne.n	80024ac <HAL_I2C_Init+0x168>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e012      	b.n	80024d2 <HAL_I2C_Init+0x18e>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e58      	subs	r0, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	0099      	lsls	r1, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Init+0x196>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e022      	b.n	8002520 <HAL_I2C_Init+0x1dc>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10e      	bne.n	8002500 <HAL_I2C_Init+0x1bc>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e58      	subs	r0, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	440b      	add	r3, r1
 80024f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024fe:	e00f      	b.n	8002520 <HAL_I2C_Init+0x1dc>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	0099      	lsls	r1, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	fbb0 f3f3 	udiv	r3, r0, r3
 8002516:	3301      	adds	r3, #1
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	6809      	ldr	r1, [r1, #0]
 8002524:	4313      	orrs	r3, r2
 8002526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800254e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6911      	ldr	r1, [r2, #16]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	000186a0 	.word	0x000186a0
 80025bc:	001e847f 	.word	0x001e847f
 80025c0:	003d08ff 	.word	0x003d08ff
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	10624dd3 	.word	0x10624dd3

080025cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	460b      	mov	r3, r1
 80025da:	817b      	strh	r3, [r7, #10]
 80025dc:	4613      	mov	r3, r2
 80025de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff fb2e 	bl	8001c40 <HAL_GetTick>
 80025e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	f040 80e0 	bne.w	80027b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2319      	movs	r3, #25
 80025fa:	2201      	movs	r2, #1
 80025fc:	4970      	ldr	r1, [pc, #448]	; (80027c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fc64 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	e0d3      	b.n	80027b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_I2C_Master_Transmit+0x50>
 8002618:	2302      	movs	r3, #2
 800261a:	e0cc      	b.n	80027b6 <HAL_I2C_Master_Transmit+0x1ea>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d007      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2221      	movs	r2, #33	; 0x21
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2210      	movs	r2, #16
 800265e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	893a      	ldrh	r2, [r7, #8]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a50      	ldr	r2, [pc, #320]	; (80027c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 face 	bl	8002c2c <I2C_MasterRequestWrite>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e08d      	b.n	80027b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026b0:	e066      	b.n	8002780 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	6a39      	ldr	r1, [r7, #32]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fd22 	bl	8003100 <I2C_WaitOnTXEFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d107      	bne.n	80026da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06b      	b.n	80027b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d11b      	bne.n	8002754 <HAL_I2C_Master_Transmit+0x188>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d017      	beq.n	8002754 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6a39      	ldr	r1, [r7, #32]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fd19 	bl	8003190 <I2C_WaitOnBTFFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b04      	cmp	r3, #4
 800276a:	d107      	bne.n	800277c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e01a      	b.n	80027b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	2b00      	cmp	r3, #0
 8002786:	d194      	bne.n	80026b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	00100002 	.word	0x00100002
 80027c4:	ffff0000 	.word	0xffff0000

080027c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	460b      	mov	r3, r1
 80027d6:	817b      	strh	r3, [r7, #10]
 80027d8:	4613      	mov	r3, r2
 80027da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff fa30 	bl	8001c40 <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	f040 8217 	bne.w	8002c1e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2319      	movs	r3, #25
 80027f6:	2201      	movs	r2, #1
 80027f8:	497c      	ldr	r1, [pc, #496]	; (80029ec <HAL_I2C_Master_Receive+0x224>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fb66 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	e20a      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2C_Master_Receive+0x50>
 8002814:	2302      	movs	r3, #2
 8002816:	e203      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d007      	beq.n	800283e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2222      	movs	r2, #34	; 0x22
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2210      	movs	r2, #16
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	893a      	ldrh	r2, [r7, #8]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a5c      	ldr	r2, [pc, #368]	; (80029f0 <HAL_I2C_Master_Receive+0x228>)
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002880:	8979      	ldrh	r1, [r7, #10]
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa52 	bl	8002d30 <I2C_MasterRequestRead>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e1c4      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d113      	bne.n	80028c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	623b      	str	r3, [r7, #32]
 80028b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e198      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d11b      	bne.n	8002906 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e178      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b02      	cmp	r3, #2
 800290c:	d11b      	bne.n	8002946 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	e158      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800296c:	e144      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	2b03      	cmp	r3, #3
 8002974:	f200 80f1 	bhi.w	8002b5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	2b01      	cmp	r3, #1
 800297e:	d123      	bne.n	80029c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fc4b 	bl	8003220 <I2C_WaitOnRXNEFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e145      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c6:	e117      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d14e      	bne.n	8002a6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	2200      	movs	r2, #0
 80029d8:	4906      	ldr	r1, [pc, #24]	; (80029f4 <HAL_I2C_Master_Receive+0x22c>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa76 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e11a      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
 80029ea:	bf00      	nop
 80029ec:	00100002 	.word	0x00100002
 80029f0:	ffff0000 	.word	0xffff0000
 80029f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a6c:	e0c4      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	2200      	movs	r2, #0
 8002a76:	496c      	ldr	r1, [pc, #432]	; (8002c28 <HAL_I2C_Master_Receive+0x460>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fa27 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0cb      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	4955      	ldr	r1, [pc, #340]	; (8002c28 <HAL_I2C_Master_Receive+0x460>)
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f9f9 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e09d      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b58:	e04e      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fb5e 	bl	8003220 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e058      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d124      	bne.n	8002bf8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f aeb6 	bne.w	800296e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3728      	adds	r7, #40	; 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00010004 	.word	0x00010004

08002c2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d006      	beq.n	8002c56 <I2C_MasterRequestWrite+0x2a>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d003      	beq.n	8002c56 <I2C_MasterRequestWrite+0x2a>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c54:	d108      	bne.n	8002c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e00b      	b.n	8002c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	2b12      	cmp	r3, #18
 8002c6e:	d107      	bne.n	8002c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f91d 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca6:	d103      	bne.n	8002cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e035      	b.n	8002d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cbc:	d108      	bne.n	8002cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	e01b      	b.n	8002d08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cd0:	897b      	ldrh	r3, [r7, #10]
 8002cd2:	11db      	asrs	r3, r3, #7
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0306 	and.w	r3, r3, #6
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f063 030f 	orn	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <I2C_MasterRequestWrite+0xfc>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f966 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e010      	b.n	8002d20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <I2C_MasterRequestWrite+0x100>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f956 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	00010008 	.word	0x00010008
 8002d2c:	00010002 	.word	0x00010002

08002d30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d006      	beq.n	8002d6a <I2C_MasterRequestRead+0x3a>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d003      	beq.n	8002d6a <I2C_MasterRequestRead+0x3a>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d68:	d108      	bne.n	8002d7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e00b      	b.n	8002d94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	2b11      	cmp	r3, #17
 8002d82:	d107      	bne.n	8002d94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f893 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	d103      	bne.n	8002dc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e079      	b.n	8002ebc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd0:	d108      	bne.n	8002de4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]
 8002de2:	e05f      	b.n	8002ea4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002de4:	897b      	ldrh	r3, [r7, #10]
 8002de6:	11db      	asrs	r3, r3, #7
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0306 	and.w	r3, r3, #6
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f063 030f 	orn	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4930      	ldr	r1, [pc, #192]	; (8002ec4 <I2C_MasterRequestRead+0x194>)
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f8dc 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e054      	b.n	8002ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4929      	ldr	r1, [pc, #164]	; (8002ec8 <I2C_MasterRequestRead+0x198>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f8cc 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e044      	b.n	8002ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f831 	bl	8002ecc <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7e:	d103      	bne.n	8002e88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e017      	b.n	8002ebc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e8c:	897b      	ldrh	r3, [r7, #10]
 8002e8e:	11db      	asrs	r3, r3, #7
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0306 	and.w	r3, r3, #6
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f063 030e 	orn	r3, r3, #14
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <I2C_MasterRequestRead+0x198>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f888 	bl	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	00010008 	.word	0x00010008
 8002ec8:	00010002 	.word	0x00010002

08002ecc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002edc:	e048      	b.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d044      	beq.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee6:	f7fe feab 	bl	8001c40 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d139      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10d      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	e00c      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d116      	bne.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e023      	b.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d093      	beq.n	8002ede <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fce:	e071      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d123      	bne.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ff8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0204 	orr.w	r2, r3, #4
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e067      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d041      	beq.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fe fe06 	bl	8001c40 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d136      	bne.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e00b      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e021      	b.n	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10c      	bne.n	80030d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	e00b      	b.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f47f af6d 	bne.w	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310c:	e034      	b.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f8e3 	bl	80032da <I2C_IsAcknowledgeFailed>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e034      	b.n	8003188 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d028      	beq.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7fe fd8b 	bl	8001c40 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d016      	beq.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d1c3      	bne.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319c:	e034      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f89b 	bl	80032da <I2C_IsAcknowledgeFailed>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e034      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d028      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7fe fd43 	bl	8001c40 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11d      	bne.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d016      	beq.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d1c3      	bne.n	800319e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800322c:	e049      	b.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b10      	cmp	r3, #16
 800323a:	d119      	bne.n	8003270 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0210 	mvn.w	r2, #16
 8003244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e030      	b.n	80032d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe fce6 	bl	8001c40 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11d      	bne.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d016      	beq.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e007      	b.n	80032d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d1ae      	bne.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f0:	d11b      	bne.n	800332a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0cc      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 030f 	and.w	r3, r3, #15
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d90c      	bls.n	8003374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0b8      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d044      	beq.n	8003458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d119      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e067      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4934      	ldr	r1, [pc, #208]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003428:	f7fe fc0a 	bl	8001c40 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	e00a      	b.n	8003446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003430:	f7fe fc06 	bl	8001c40 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 020c 	and.w	r2, r3, #12
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d1eb      	bne.n	8003430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d20c      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e032      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4916      	ldr	r1, [pc, #88]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034be:	f000 f855 	bl	800356c <HAL_RCC_GetSysClockFreq>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	490a      	ldr	r1, [pc, #40]	; (80034f8 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	5ccb      	ldrb	r3, [r1, r3]
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fb6a 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023c00 	.word	0x40023c00
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08005ddc 	.word	0x08005ddc
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08005dec 	.word	0x08005dec

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003548:	f7ff ffdc 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	08005dec 	.word	0x08005dec

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b0ae      	sub	sp, #184	; 0xb8
 8003572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003592:	4bcb      	ldr	r3, [pc, #812]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b0c      	cmp	r3, #12
 800359c:	f200 8206 	bhi.w	80039ac <HAL_RCC_GetSysClockFreq+0x440>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080039ad 	.word	0x080039ad
 80035b0:	080039ad 	.word	0x080039ad
 80035b4:	080039ad 	.word	0x080039ad
 80035b8:	080035e5 	.word	0x080035e5
 80035bc:	080039ad 	.word	0x080039ad
 80035c0:	080039ad 	.word	0x080039ad
 80035c4:	080039ad 	.word	0x080039ad
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080039ad 	.word	0x080039ad
 80035d0:	080039ad 	.word	0x080039ad
 80035d4:	080039ad 	.word	0x080039ad
 80035d8:	080037dd 	.word	0x080037dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4bb9      	ldr	r3, [pc, #740]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80035de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80035e2:	e1e7      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e4:	4bb8      	ldr	r3, [pc, #736]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035ea:	e1e3      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ec:	4bb4      	ldr	r3, [pc, #720]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f8:	4bb1      	ldr	r3, [pc, #708]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d071      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4bae      	ldr	r3, [pc, #696]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	2200      	movs	r2, #0
 800360c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003610:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800362a:	4622      	mov	r2, r4
 800362c:	462b      	mov	r3, r5
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	0159      	lsls	r1, r3, #5
 8003638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363c:	0150      	lsls	r0, r2, #5
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4621      	mov	r1, r4
 8003644:	1a51      	subs	r1, r2, r1
 8003646:	6439      	str	r1, [r7, #64]	; 0x40
 8003648:	4629      	mov	r1, r5
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	647b      	str	r3, [r7, #68]	; 0x44
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800365c:	4649      	mov	r1, r9
 800365e:	018b      	lsls	r3, r1, #6
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003666:	4641      	mov	r1, r8
 8003668:	018a      	lsls	r2, r1, #6
 800366a:	4641      	mov	r1, r8
 800366c:	1a51      	subs	r1, r2, r1
 800366e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003670:	4649      	mov	r1, r9
 8003672:	eb63 0301 	sbc.w	r3, r3, r1
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003684:	4649      	mov	r1, r9
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4641      	mov	r1, r8
 800368a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800368e:	4641      	mov	r1, r8
 8003690:	00ca      	lsls	r2, r1, #3
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	4603      	mov	r3, r0
 8003698:	4622      	mov	r2, r4
 800369a:	189b      	adds	r3, r3, r2
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	462b      	mov	r3, r5
 80036a0:	460a      	mov	r2, r1
 80036a2:	eb42 0303 	adc.w	r3, r2, r3
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036b4:	4629      	mov	r1, r5
 80036b6:	024b      	lsls	r3, r1, #9
 80036b8:	4621      	mov	r1, r4
 80036ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036be:	4621      	mov	r1, r4
 80036c0:	024a      	lsls	r2, r1, #9
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80036d8:	f7fd f9d8 	bl	8000a8c <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4613      	mov	r3, r2
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036e6:	e067      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e8:	4b75      	ldr	r3, [pc, #468]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80036f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	67bb      	str	r3, [r7, #120]	; 0x78
 8003702:	2300      	movs	r3, #0
 8003704:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003706:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	f04f 0000 	mov.w	r0, #0
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	0159      	lsls	r1, r3, #5
 8003718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371c:	0150      	lsls	r0, r2, #5
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4621      	mov	r1, r4
 8003724:	1a51      	subs	r1, r2, r1
 8003726:	62b9      	str	r1, [r7, #40]	; 0x28
 8003728:	4629      	mov	r1, r5
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800373c:	4649      	mov	r1, r9
 800373e:	018b      	lsls	r3, r1, #6
 8003740:	4641      	mov	r1, r8
 8003742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003746:	4641      	mov	r1, r8
 8003748:	018a      	lsls	r2, r1, #6
 800374a:	4641      	mov	r1, r8
 800374c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003750:	4649      	mov	r1, r9
 8003752:	eb63 0b01 	sbc.w	fp, r3, r1
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800376a:	4692      	mov	sl, r2
 800376c:	469b      	mov	fp, r3
 800376e:	4623      	mov	r3, r4
 8003770:	eb1a 0303 	adds.w	r3, sl, r3
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	462b      	mov	r3, r5
 8003778:	eb4b 0303 	adc.w	r3, fp, r3
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800378a:	4629      	mov	r1, r5
 800378c:	028b      	lsls	r3, r1, #10
 800378e:	4621      	mov	r1, r4
 8003790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003794:	4621      	mov	r1, r4
 8003796:	028a      	lsls	r2, r1, #10
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037a0:	2200      	movs	r2, #0
 80037a2:	673b      	str	r3, [r7, #112]	; 0x70
 80037a4:	677a      	str	r2, [r7, #116]	; 0x74
 80037a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80037aa:	f7fd f96f 	bl	8000a8c <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4613      	mov	r3, r2
 80037b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80037ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037da:	e0eb      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b38      	ldr	r3, [pc, #224]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d06b      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	2200      	movs	r2, #0
 80037fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80037fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	663b      	str	r3, [r7, #96]	; 0x60
 8003808:	2300      	movs	r3, #0
 800380a:	667b      	str	r3, [r7, #100]	; 0x64
 800380c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003810:	4622      	mov	r2, r4
 8003812:	462b      	mov	r3, r5
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	0159      	lsls	r1, r3, #5
 800381e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003822:	0150      	lsls	r0, r2, #5
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4621      	mov	r1, r4
 800382a:	1a51      	subs	r1, r2, r1
 800382c:	61b9      	str	r1, [r7, #24]
 800382e:	4629      	mov	r1, r5
 8003830:	eb63 0301 	sbc.w	r3, r3, r1
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003842:	4659      	mov	r1, fp
 8003844:	018b      	lsls	r3, r1, #6
 8003846:	4651      	mov	r1, sl
 8003848:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800384c:	4651      	mov	r1, sl
 800384e:	018a      	lsls	r2, r1, #6
 8003850:	4651      	mov	r1, sl
 8003852:	ebb2 0801 	subs.w	r8, r2, r1
 8003856:	4659      	mov	r1, fp
 8003858:	eb63 0901 	sbc.w	r9, r3, r1
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800386c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003870:	4690      	mov	r8, r2
 8003872:	4699      	mov	r9, r3
 8003874:	4623      	mov	r3, r4
 8003876:	eb18 0303 	adds.w	r3, r8, r3
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	462b      	mov	r3, r5
 800387e:	eb49 0303 	adc.w	r3, r9, r3
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003890:	4629      	mov	r1, r5
 8003892:	024b      	lsls	r3, r1, #9
 8003894:	4621      	mov	r1, r4
 8003896:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800389a:	4621      	mov	r1, r4
 800389c:	024a      	lsls	r2, r1, #9
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038a6:	2200      	movs	r2, #0
 80038a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80038aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038b0:	f7fd f8ec 	bl	8000a8c <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038be:	e065      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x420>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	00f42400 	.word	0x00f42400
 80038c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038cc:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	2200      	movs	r2, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	4611      	mov	r1, r2
 80038d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038dc:	653b      	str	r3, [r7, #80]	; 0x50
 80038de:	2300      	movs	r3, #0
 80038e0:	657b      	str	r3, [r7, #84]	; 0x54
 80038e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80038e6:	4642      	mov	r2, r8
 80038e8:	464b      	mov	r3, r9
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f8:	0150      	lsls	r0, r2, #5
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4641      	mov	r1, r8
 8003900:	1a51      	subs	r1, r2, r1
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	4649      	mov	r1, r9
 8003906:	eb63 0301 	sbc.w	r3, r3, r1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003918:	4659      	mov	r1, fp
 800391a:	018b      	lsls	r3, r1, #6
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003922:	4651      	mov	r1, sl
 8003924:	018a      	lsls	r2, r1, #6
 8003926:	4651      	mov	r1, sl
 8003928:	1a54      	subs	r4, r2, r1
 800392a:	4659      	mov	r1, fp
 800392c:	eb63 0501 	sbc.w	r5, r3, r1
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	00eb      	lsls	r3, r5, #3
 800393a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800393e:	00e2      	lsls	r2, r4, #3
 8003940:	4614      	mov	r4, r2
 8003942:	461d      	mov	r5, r3
 8003944:	4643      	mov	r3, r8
 8003946:	18e3      	adds	r3, r4, r3
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	464b      	mov	r3, r9
 800394c:	eb45 0303 	adc.w	r3, r5, r3
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800395e:	4629      	mov	r1, r5
 8003960:	028b      	lsls	r3, r1, #10
 8003962:	4621      	mov	r1, r4
 8003964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003968:	4621      	mov	r1, r4
 800396a:	028a      	lsls	r2, r1, #10
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003974:	2200      	movs	r2, #0
 8003976:	64bb      	str	r3, [r7, #72]	; 0x48
 8003978:	64fa      	str	r2, [r7, #76]	; 0x4c
 800397a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800397e:	f7fd f885 	bl	8000a8c <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4613      	mov	r3, r2
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0f1b      	lsrs	r3, r3, #28
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800399a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800399e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80039ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	37b8      	adds	r7, #184	; 0xb8
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	00f42400 	.word	0x00f42400

080039cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e28d      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8083 	beq.w	8003af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039ec:	4b94      	ldr	r3, [pc, #592]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d019      	beq.n	8003a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039f8:	4b91      	ldr	r3, [pc, #580]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a04:	4b8e      	ldr	r3, [pc, #568]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a10:	d00c      	beq.n	8003a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d112      	bne.n	8003a44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2a:	d10b      	bne.n	8003a44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	4b84      	ldr	r3, [pc, #528]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d05b      	beq.n	8003af0 <HAL_RCC_OscConfig+0x124>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d157      	bne.n	8003af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e25a      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d106      	bne.n	8003a5c <HAL_RCC_OscConfig+0x90>
 8003a4e:	4b7c      	ldr	r3, [pc, #496]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7b      	ldr	r2, [pc, #492]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e01d      	b.n	8003a98 <HAL_RCC_OscConfig+0xcc>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0xb4>
 8003a66:	4b76      	ldr	r3, [pc, #472]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a75      	ldr	r2, [pc, #468]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b73      	ldr	r3, [pc, #460]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a72      	ldr	r2, [pc, #456]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCC_OscConfig+0xcc>
 8003a80:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6b      	ldr	r2, [pc, #428]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d013      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f8ce 	bl	8001c40 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fe f8ca 	bl	8001c40 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e21f      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xdc>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f8ba 	bl	8001c40 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f8b6 	bl	8001c40 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e20b      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	4b57      	ldr	r3, [pc, #348]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x104>
 8003aee:	e000      	b.n	8003af2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d06f      	beq.n	8003bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003afe:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d017      	beq.n	8003b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d105      	bne.n	8003b22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b22:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d11c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d116      	bne.n	8003b68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_RCC_OscConfig+0x186>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d001      	beq.n	8003b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e1d3      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4937      	ldr	r1, [pc, #220]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	e03a      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b70:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_OscConfig+0x278>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fe f863 	bl	8001c40 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7e:	f7fe f85f 	bl	8001c40 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e1b4      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4925      	ldr	r1, [pc, #148]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
 8003bb0:	e015      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <HAL_RCC_OscConfig+0x278>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f842 	bl	8001c40 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc0:	f7fe f83e 	bl	8001c40 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e193      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d036      	beq.n	8003c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_RCC_OscConfig+0x27c>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fe f822 	bl	8001c40 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c00:	f7fe f81e 	bl	8001c40 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e173      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_OscConfig+0x274>)
 8003c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x234>
 8003c1e:	e01b      	b.n	8003c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fe f80b 	bl	8001c40 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	e00e      	b.n	8003c4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe f807 	bl	8001c40 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d907      	bls.n	8003c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e15c      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
 8003c40:	40023800 	.word	0x40023800
 8003c44:	42470000 	.word	0x42470000
 8003c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c4c:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ea      	bne.n	8003c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8097 	beq.w	8003d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c66:	2300      	movs	r3, #0
 8003c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6a:	4b83      	ldr	r3, [pc, #524]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	; 0x40
 8003c86:	4b7c      	ldr	r3, [pc, #496]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c96:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <HAL_RCC_OscConfig+0x4b0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d118      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x4b0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a75      	ldr	r2, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x4b0>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cae:	f7fd ffc7 	bl	8001c40 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb6:	f7fd ffc3 	bl	8001c40 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e118      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x4b0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d106      	bne.n	8003cea <HAL_RCC_OscConfig+0x31e>
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce8:	e01c      	b.n	8003d24 <HAL_RCC_OscConfig+0x358>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x340>
 8003cf2:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfe:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0x358>
 8003d0c:	4b5a      	ldr	r3, [pc, #360]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	4a59      	ldr	r2, [pc, #356]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	6713      	str	r3, [r2, #112]	; 0x70
 8003d18:	4b57      	ldr	r3, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	4a56      	ldr	r2, [pc, #344]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d1e:	f023 0304 	bic.w	r3, r3, #4
 8003d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d015      	beq.n	8003d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd ff88 	bl	8001c40 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd ff84 	bl	8001c40 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0d7      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4a:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ee      	beq.n	8003d34 <HAL_RCC_OscConfig+0x368>
 8003d56:	e014      	b.n	8003d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd ff72 	bl	8001c40 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fd ff6e 	bl	8001c40 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0c1      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d76:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ee      	bne.n	8003d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d105      	bne.n	8003d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d88:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80ad 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d9e:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d060      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d145      	bne.n	8003e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x4b4>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd ff42 	bl	8001c40 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fd ff3e 	bl	8001c40 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e093      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	019b      	lsls	r3, r3, #6
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	3b01      	subs	r3, #1
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	061b      	lsls	r3, r3, #24
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	491b      	ldr	r1, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4b4>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fd ff13 	bl	8001c40 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fd ff0f 	bl	8001c40 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e064      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x452>
 8003e3c:	e05c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x4b4>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd fefc 	bl	8001c40 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd fef8 	bl	8001c40 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e04d      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x4ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x480>
 8003e6a:	e045      	b.n	8003ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e040      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e84:	4b1f      	ldr	r3, [pc, #124]	; (8003f04 <HAL_RCC_OscConfig+0x538>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d030      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d129      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d122      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d119      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d10f      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800

08003f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e042      	b.n	8003fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd fc78 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fd69 	bl	8004a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d175      	bne.n	80040b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_UART_Transmit+0x2c>
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e06e      	b.n	80040b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2221      	movs	r2, #33	; 0x21
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe6:	f7fd fe2b 	bl	8001c40 <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x6c>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800401c:	e02e      	b.n	800407c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fb05 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e03a      	b.n	80040b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3302      	adds	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e007      	b.n	800406e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1cb      	bne.n	800401e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fad1 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e006      	b.n	80040b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b0ba      	sub	sp, #232	; 0xe8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fbc2 	bl	80048a8 <UART_Receive_IT>
      return;
 8004124:	e25b      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80de 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
 8004130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800413c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004140:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80d1 	beq.w	80042ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
 800417a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f043 0202 	orr.w	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
 800419e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f043 0208 	orr.w	r2, r3, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 81f2 	beq.w	80045d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fb4d 	bl	80048a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_UART_IRQHandler+0x17a>
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04f      	beq.n	80042da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa55 	bl	80046ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d141      	bne.n	80042d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3314      	adds	r3, #20
 8004276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800427a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800427e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1d9      	bne.n	800424e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	4a7e      	ldr	r2, [pc, #504]	; (80044a0 <HAL_UART_IRQHandler+0x3e0>)
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd fe53 	bl	8001f5a <HAL_DMA_Abort_IT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e00e      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f99e 	bl	800460c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e00a      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f99a 	bl	800460c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e006      	b.n	80042e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f996 	bl	800460c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042e6:	e175      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	bf00      	nop
    return;
 80042ea:	e173      	b.n	80045d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 814f 	bne.w	8004594 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8148 	beq.w	8004594 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8141 	beq.w	8004594 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	f040 80b6 	bne.w	80044a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8145 	beq.w	80045d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004356:	429a      	cmp	r2, r3
 8004358:	f080 813e 	bcs.w	80045d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004362:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436e:	f000 8088 	beq.w	8004482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800438c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800439e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d9      	bne.n	8004372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e1      	bne.n	80043be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800440a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800441e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800442c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e3      	bne.n	80043fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004452:	f023 0310 	bic.w	r3, r3, #16
 8004456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004464:	65ba      	str	r2, [r7, #88]	; 0x58
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800446a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e3      	bne.n	8004440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd fcfc 	bl	8001e7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8c1 	bl	8004620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800449e:	e09b      	b.n	80045d8 <HAL_UART_IRQHandler+0x518>
 80044a0:	080047b1 	.word	0x080047b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 808e 	beq.w	80045dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8089 	beq.w	80045dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044ee:	647a      	str	r2, [r7, #68]	; 0x44
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e3      	bne.n	80044ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3314      	adds	r3, #20
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	623b      	str	r3, [r7, #32]
   return(result);
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004526:	633a      	str	r2, [r7, #48]	; 0x30
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e3      	bne.n	8004502 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60fb      	str	r3, [r7, #12]
   return(result);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0310 	bic.w	r3, r3, #16
 800455e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800456c:	61fa      	str	r2, [r7, #28]
 800456e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	617b      	str	r3, [r7, #20]
   return(result);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e3      	bne.n	8004548 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f847 	bl	8004620 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004592:	e023      	b.n	80045dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <HAL_UART_IRQHandler+0x4f4>
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f913 	bl	80047d8 <UART_Transmit_IT>
    return;
 80045b2:	e014      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <HAL_UART_IRQHandler+0x51e>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f953 	bl	8004878 <UART_EndTransmit_IT>
    return;
 80045d2:	e004      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
    return;
 80045d4:	bf00      	nop
 80045d6:	e002      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
      return;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <HAL_UART_IRQHandler+0x51e>
      return;
 80045dc:	bf00      	nop
  }
}
 80045de:	37e8      	adds	r7, #232	; 0xe8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004648:	e03b      	b.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d037      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fd faf5 	bl	8001c40 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <UART_WaitOnFlagUntilTimeout+0x30>
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e03a      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d020      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d01d      	beq.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b08      	cmp	r3, #8
 8004692:	d116      	bne.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f81d 	bl	80046ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2208      	movs	r2, #8
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e00f      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d0b4      	beq.n	800464a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b095      	sub	sp, #84	; 0x54
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004712:	643a      	str	r2, [r7, #64]	; 0x40
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	61fb      	str	r3, [r7, #28]
   return(result);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	2b01      	cmp	r3, #1
 8004760:	d119      	bne.n	8004796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	60bb      	str	r3, [r7, #8]
   return(result);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f023 0310 	bic.w	r3, r3, #16
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004782:	61ba      	str	r2, [r7, #24]
 8004784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	613b      	str	r3, [r7, #16]
   return(result);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e5      	bne.n	8004762 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047a4:	bf00      	nop
 80047a6:	3754      	adds	r7, #84	; 0x54
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff1e 	bl	800460c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d13e      	bne.n	800486a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d114      	bne.n	8004820 <UART_Transmit_IT+0x48>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d110      	bne.n	8004820 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004812:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e008      	b.n	8004832 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6211      	str	r1, [r2, #32]
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004854:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004864:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fea3 	bl	80045e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	; 0x30
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b22      	cmp	r3, #34	; 0x22
 80048ba:	f040 80ae 	bne.w	8004a1a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c6:	d117      	bne.n	80048f8 <UART_Receive_IT+0x50>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d113      	bne.n	80048f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	1c9a      	adds	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
 80048f6:	e026      	b.n	8004946 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490a:	d007      	beq.n	800491c <UART_Receive_IT+0x74>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <UART_Receive_IT+0x82>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e008      	b.n	800493c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4619      	mov	r1, r3
 8004954:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004956:	2b00      	cmp	r3, #0
 8004958:	d15d      	bne.n	8004a16 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0220 	bic.w	r2, r2, #32
 8004968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004978:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	2b01      	cmp	r3, #1
 800499e:	d135      	bne.n	8004a0c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	613b      	str	r3, [r7, #16]
   return(result);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f023 0310 	bic.w	r3, r3, #16
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c6:	623a      	str	r2, [r7, #32]
 80049c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	69f9      	ldr	r1, [r7, #28]
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e5      	bne.n	80049a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d10a      	bne.n	80049fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a02:	4619      	mov	r1, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff fe0b 	bl	8004620 <HAL_UARTEx_RxEventCallback>
 8004a0a:	e002      	b.n	8004a12 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff fdf3 	bl	80045f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e002      	b.n	8004a1c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3730      	adds	r7, #48	; 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b0c0      	sub	sp, #256	; 0x100
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	68d9      	ldr	r1, [r3, #12]
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	ea40 0301 	orr.w	r3, r0, r1
 8004a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a7c:	f021 010c 	bic.w	r1, r1, #12
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	6999      	ldr	r1, [r3, #24]
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	ea40 0301 	orr.w	r3, r0, r1
 8004aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b8f      	ldr	r3, [pc, #572]	; (8004cf0 <UART_SetConfig+0x2cc>)
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d005      	beq.n	8004ac4 <UART_SetConfig+0xa0>
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b8d      	ldr	r3, [pc, #564]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d104      	bne.n	8004ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7fe fd3e 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004acc:	e003      	b.n	8004ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ace:	f7fe fd25 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8004ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae0:	f040 810c 	bne.w	8004cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	1891      	adds	r1, r2, r2
 8004afc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004afe:	415b      	adcs	r3, r3
 8004b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b06:	4621      	mov	r1, r4
 8004b08:	eb12 0801 	adds.w	r8, r2, r1
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	eb43 0901 	adc.w	r9, r3, r1
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b26:	4690      	mov	r8, r2
 8004b28:	4699      	mov	r9, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	eb18 0303 	adds.w	r3, r8, r3
 8004b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b34:	462b      	mov	r3, r5
 8004b36:	eb49 0303 	adc.w	r3, r9, r3
 8004b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b52:	460b      	mov	r3, r1
 8004b54:	18db      	adds	r3, r3, r3
 8004b56:	653b      	str	r3, [r7, #80]	; 0x50
 8004b58:	4613      	mov	r3, r2
 8004b5a:	eb42 0303 	adc.w	r3, r2, r3
 8004b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b68:	f7fb ff90 	bl	8000a8c <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011c      	lsls	r4, r3, #4
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b94:	415b      	adcs	r3, r3
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bbc:	4692      	mov	sl, r2
 8004bbe:	469b      	mov	fp, r3
 8004bc0:	4643      	mov	r3, r8
 8004bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004be0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004be8:	460b      	mov	r3, r1
 8004bea:	18db      	adds	r3, r3, r3
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
 8004bee:	4613      	mov	r3, r2
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bfe:	f7fb ff45 	bl	8000a8c <__aeabi_uldivmod>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2264      	movs	r2, #100	; 0x64
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	1acb      	subs	r3, r1, r3
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004c20:	fba3 2302 	umull	r2, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c2c:	441c      	add	r4, r3
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c50:	4641      	mov	r1, r8
 8004c52:	1851      	adds	r1, r2, r1
 8004c54:	6339      	str	r1, [r7, #48]	; 0x30
 8004c56:	4649      	mov	r1, r9
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c68:	4659      	mov	r1, fp
 8004c6a:	00cb      	lsls	r3, r1, #3
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c72:	4651      	mov	r1, sl
 8004c74:	00ca      	lsls	r2, r1, #3
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c84:	464b      	mov	r3, r9
 8004c86:	460a      	mov	r2, r1
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	18db      	adds	r3, r3, r3
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	4613      	mov	r3, r2
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cba:	f7fb fee7 	bl	8000a8c <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	2164      	movs	r1, #100	; 0x64
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	3332      	adds	r3, #50	; 0x32
 8004cd6:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	f003 0207 	and.w	r2, r3, #7
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4422      	add	r2, r4
 8004cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cec:	e106      	b.n	8004efc <UART_SetConfig+0x4d8>
 8004cee:	bf00      	nop
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40011400 	.word	0x40011400
 8004cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	1891      	adds	r1, r2, r2
 8004d14:	6239      	str	r1, [r7, #32]
 8004d16:	415b      	adcs	r3, r3
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d1e:	4641      	mov	r1, r8
 8004d20:	1854      	adds	r4, r2, r1
 8004d22:	4649      	mov	r1, r9
 8004d24:	eb43 0501 	adc.w	r5, r3, r1
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	00eb      	lsls	r3, r5, #3
 8004d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d36:	00e2      	lsls	r2, r4, #3
 8004d38:	4614      	mov	r4, r2
 8004d3a:	461d      	mov	r5, r3
 8004d3c:	4643      	mov	r3, r8
 8004d3e:	18e3      	adds	r3, r4, r3
 8004d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d44:	464b      	mov	r3, r9
 8004d46:	eb45 0303 	adc.w	r3, r5, r3
 8004d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	008b      	lsls	r3, r1, #2
 8004d6e:	4621      	mov	r1, r4
 8004d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d74:	4621      	mov	r1, r4
 8004d76:	008a      	lsls	r2, r1, #2
 8004d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d7c:	f7fb fe86 	bl	8000a8c <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4b60      	ldr	r3, [pc, #384]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004d86:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	011c      	lsls	r4, r3, #4
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	61b9      	str	r1, [r7, #24]
 8004da8:	415b      	adcs	r3, r3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db0:	4641      	mov	r1, r8
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	6139      	str	r1, [r7, #16]
 8004db6:	4649      	mov	r1, r9
 8004db8:	414b      	adcs	r3, r1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc8:	4659      	mov	r1, fp
 8004dca:	00cb      	lsls	r3, r1, #3
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	00ca      	lsls	r2, r1, #3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de4:	464b      	mov	r3, r9
 8004de6:	460a      	mov	r2, r1
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e08:	4649      	mov	r1, r9
 8004e0a:	008b      	lsls	r3, r1, #2
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e12:	4641      	mov	r1, r8
 8004e14:	008a      	lsls	r2, r1, #2
 8004e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e1a:	f7fb fe37 	bl	8000a8c <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	4b38      	ldr	r3, [pc, #224]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004e26:	fba3 2301 	umull	r2, r3, r3, r1
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2264      	movs	r2, #100	; 0x64
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	1acb      	subs	r3, r1, r3
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	3332      	adds	r3, #50	; 0x32
 8004e38:	4a33      	ldr	r2, [pc, #204]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e44:	441c      	add	r4, r3
 8004e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	673b      	str	r3, [r7, #112]	; 0x70
 8004e4e:	677a      	str	r2, [r7, #116]	; 0x74
 8004e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e64:	4641      	mov	r1, r8
 8004e66:	1851      	adds	r1, r2, r1
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	414b      	adcs	r3, r1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e86:	4651      	mov	r1, sl
 8004e88:	00ca      	lsls	r2, r1, #3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4642      	mov	r2, r8
 8004e92:	189b      	adds	r3, r3, r2
 8004e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e96:	464b      	mov	r3, r9
 8004e98:	460a      	mov	r2, r1
 8004e9a:	eb42 0303 	adc.w	r3, r2, r3
 8004e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eaa:	667a      	str	r2, [r7, #100]	; 0x64
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eb8:	4649      	mov	r1, r9
 8004eba:	008b      	lsls	r3, r1, #2
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	008a      	lsls	r2, r1, #2
 8004ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004eca:	f7fb fddf 	bl	8000a8c <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	2164      	movs	r1, #100	; 0x64
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	3332      	adds	r3, #50	; 0x32
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4422      	add	r2, r4
 8004efa:	609a      	str	r2, [r3, #8]
}
 8004efc:	bf00      	nop
 8004efe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f08:	51eb851f 	.word	0x51eb851f

08004f0c <malloc>:
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <malloc+0xc>)
 8004f0e:	4601      	mov	r1, r0
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 b82b 	b.w	8004f6c <_malloc_r>
 8004f16:	bf00      	nop
 8004f18:	20000064 	.word	0x20000064

08004f1c <free>:
 8004f1c:	4b02      	ldr	r3, [pc, #8]	; (8004f28 <free+0xc>)
 8004f1e:	4601      	mov	r1, r0
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	f000 ba61 	b.w	80053e8 <_free_r>
 8004f26:	bf00      	nop
 8004f28:	20000064 	.word	0x20000064

08004f2c <sbrk_aligned>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4e0e      	ldr	r6, [pc, #56]	; (8004f68 <sbrk_aligned+0x3c>)
 8004f30:	460c      	mov	r4, r1
 8004f32:	6831      	ldr	r1, [r6, #0]
 8004f34:	4605      	mov	r5, r0
 8004f36:	b911      	cbnz	r1, 8004f3e <sbrk_aligned+0x12>
 8004f38:	f000 f9f8 	bl	800532c <_sbrk_r>
 8004f3c:	6030      	str	r0, [r6, #0]
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f9f3 	bl	800532c <_sbrk_r>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d00a      	beq.n	8004f60 <sbrk_aligned+0x34>
 8004f4a:	1cc4      	adds	r4, r0, #3
 8004f4c:	f024 0403 	bic.w	r4, r4, #3
 8004f50:	42a0      	cmp	r0, r4
 8004f52:	d007      	beq.n	8004f64 <sbrk_aligned+0x38>
 8004f54:	1a21      	subs	r1, r4, r0
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 f9e8 	bl	800532c <_sbrk_r>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d101      	bne.n	8004f64 <sbrk_aligned+0x38>
 8004f60:	f04f 34ff 	mov.w	r4, #4294967295
 8004f64:	4620      	mov	r0, r4
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	2000027c 	.word	0x2000027c

08004f6c <_malloc_r>:
 8004f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f70:	1ccd      	adds	r5, r1, #3
 8004f72:	f025 0503 	bic.w	r5, r5, #3
 8004f76:	3508      	adds	r5, #8
 8004f78:	2d0c      	cmp	r5, #12
 8004f7a:	bf38      	it	cc
 8004f7c:	250c      	movcc	r5, #12
 8004f7e:	2d00      	cmp	r5, #0
 8004f80:	4607      	mov	r7, r0
 8004f82:	db01      	blt.n	8004f88 <_malloc_r+0x1c>
 8004f84:	42a9      	cmp	r1, r5
 8004f86:	d905      	bls.n	8004f94 <_malloc_r+0x28>
 8004f88:	230c      	movs	r3, #12
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	4630      	mov	r0, r6
 8004f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005068 <_malloc_r+0xfc>
 8004f98:	f000 f868 	bl	800506c <__malloc_lock>
 8004f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	bb5c      	cbnz	r4, 8004ffc <_malloc_r+0x90>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f7ff ffc0 	bl	8004f2c <sbrk_aligned>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	4604      	mov	r4, r0
 8004fb0:	d155      	bne.n	800505e <_malloc_r+0xf2>
 8004fb2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fb6:	4626      	mov	r6, r4
 8004fb8:	2e00      	cmp	r6, #0
 8004fba:	d145      	bne.n	8005048 <_malloc_r+0xdc>
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	d048      	beq.n	8005052 <_malloc_r+0xe6>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	eb04 0903 	add.w	r9, r4, r3
 8004fca:	f000 f9af 	bl	800532c <_sbrk_r>
 8004fce:	4581      	cmp	r9, r0
 8004fd0:	d13f      	bne.n	8005052 <_malloc_r+0xe6>
 8004fd2:	6821      	ldr	r1, [r4, #0]
 8004fd4:	1a6d      	subs	r5, r5, r1
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f7ff ffa7 	bl	8004f2c <sbrk_aligned>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d037      	beq.n	8005052 <_malloc_r+0xe6>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	442b      	add	r3, r5
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d038      	beq.n	8005062 <_malloc_r+0xf6>
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	42a2      	cmp	r2, r4
 8004ff4:	d12b      	bne.n	800504e <_malloc_r+0xe2>
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e00f      	b.n	800501c <_malloc_r+0xb0>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	1b52      	subs	r2, r2, r5
 8005000:	d41f      	bmi.n	8005042 <_malloc_r+0xd6>
 8005002:	2a0b      	cmp	r2, #11
 8005004:	d917      	bls.n	8005036 <_malloc_r+0xca>
 8005006:	1961      	adds	r1, r4, r5
 8005008:	42a3      	cmp	r3, r4
 800500a:	6025      	str	r5, [r4, #0]
 800500c:	bf18      	it	ne
 800500e:	6059      	strne	r1, [r3, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	bf08      	it	eq
 8005014:	f8c8 1000 	streq.w	r1, [r8]
 8005018:	5162      	str	r2, [r4, r5]
 800501a:	604b      	str	r3, [r1, #4]
 800501c:	4638      	mov	r0, r7
 800501e:	f104 060b 	add.w	r6, r4, #11
 8005022:	f000 f829 	bl	8005078 <__malloc_unlock>
 8005026:	f026 0607 	bic.w	r6, r6, #7
 800502a:	1d23      	adds	r3, r4, #4
 800502c:	1af2      	subs	r2, r6, r3
 800502e:	d0ae      	beq.n	8004f8e <_malloc_r+0x22>
 8005030:	1b9b      	subs	r3, r3, r6
 8005032:	50a3      	str	r3, [r4, r2]
 8005034:	e7ab      	b.n	8004f8e <_malloc_r+0x22>
 8005036:	42a3      	cmp	r3, r4
 8005038:	6862      	ldr	r2, [r4, #4]
 800503a:	d1dd      	bne.n	8004ff8 <_malloc_r+0x8c>
 800503c:	f8c8 2000 	str.w	r2, [r8]
 8005040:	e7ec      	b.n	800501c <_malloc_r+0xb0>
 8005042:	4623      	mov	r3, r4
 8005044:	6864      	ldr	r4, [r4, #4]
 8005046:	e7ac      	b.n	8004fa2 <_malloc_r+0x36>
 8005048:	4634      	mov	r4, r6
 800504a:	6876      	ldr	r6, [r6, #4]
 800504c:	e7b4      	b.n	8004fb8 <_malloc_r+0x4c>
 800504e:	4613      	mov	r3, r2
 8005050:	e7cc      	b.n	8004fec <_malloc_r+0x80>
 8005052:	230c      	movs	r3, #12
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4638      	mov	r0, r7
 8005058:	f000 f80e 	bl	8005078 <__malloc_unlock>
 800505c:	e797      	b.n	8004f8e <_malloc_r+0x22>
 800505e:	6025      	str	r5, [r4, #0]
 8005060:	e7dc      	b.n	800501c <_malloc_r+0xb0>
 8005062:	605b      	str	r3, [r3, #4]
 8005064:	deff      	udf	#255	; 0xff
 8005066:	bf00      	nop
 8005068:	20000278 	.word	0x20000278

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f000 b9aa 	b.w	80053c6 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	200003c0 	.word	0x200003c0

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f000 b9a5 	b.w	80053c8 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	200003c0 	.word	0x200003c0

08005084 <std>:
 8005084:	2300      	movs	r3, #0
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	e9c0 3300 	strd	r3, r3, [r0]
 800508e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005092:	6083      	str	r3, [r0, #8]
 8005094:	8181      	strh	r1, [r0, #12]
 8005096:	6643      	str	r3, [r0, #100]	; 0x64
 8005098:	81c2      	strh	r2, [r0, #14]
 800509a:	6183      	str	r3, [r0, #24]
 800509c:	4619      	mov	r1, r3
 800509e:	2208      	movs	r2, #8
 80050a0:	305c      	adds	r0, #92	; 0x5c
 80050a2:	f000 f906 	bl	80052b2 <memset>
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <std+0x58>)
 80050a8:	6263      	str	r3, [r4, #36]	; 0x24
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <std+0x5c>)
 80050ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <std+0x60>)
 80050b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <std+0x64>)
 80050b4:	6323      	str	r3, [r4, #48]	; 0x30
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <std+0x68>)
 80050b8:	6224      	str	r4, [r4, #32]
 80050ba:	429c      	cmp	r4, r3
 80050bc:	d006      	beq.n	80050cc <std+0x48>
 80050be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050c2:	4294      	cmp	r4, r2
 80050c4:	d002      	beq.n	80050cc <std+0x48>
 80050c6:	33d0      	adds	r3, #208	; 0xd0
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d105      	bne.n	80050d8 <std+0x54>
 80050cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d4:	f000 b976 	b.w	80053c4 <__retarget_lock_init_recursive>
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	0800522d 	.word	0x0800522d
 80050e0:	0800524f 	.word	0x0800524f
 80050e4:	08005287 	.word	0x08005287
 80050e8:	080052ab 	.word	0x080052ab
 80050ec:	20000280 	.word	0x20000280

080050f0 <stdio_exit_handler>:
 80050f0:	4a02      	ldr	r2, [pc, #8]	; (80050fc <stdio_exit_handler+0xc>)
 80050f2:	4903      	ldr	r1, [pc, #12]	; (8005100 <stdio_exit_handler+0x10>)
 80050f4:	4803      	ldr	r0, [pc, #12]	; (8005104 <stdio_exit_handler+0x14>)
 80050f6:	f000 b869 	b.w	80051cc <_fwalk_sglue>
 80050fa:	bf00      	nop
 80050fc:	2000000c 	.word	0x2000000c
 8005100:	08005b35 	.word	0x08005b35
 8005104:	20000018 	.word	0x20000018

08005108 <cleanup_stdio>:
 8005108:	6841      	ldr	r1, [r0, #4]
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <cleanup_stdio+0x34>)
 800510c:	4299      	cmp	r1, r3
 800510e:	b510      	push	{r4, lr}
 8005110:	4604      	mov	r4, r0
 8005112:	d001      	beq.n	8005118 <cleanup_stdio+0x10>
 8005114:	f000 fd0e 	bl	8005b34 <_fflush_r>
 8005118:	68a1      	ldr	r1, [r4, #8]
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <cleanup_stdio+0x38>)
 800511c:	4299      	cmp	r1, r3
 800511e:	d002      	beq.n	8005126 <cleanup_stdio+0x1e>
 8005120:	4620      	mov	r0, r4
 8005122:	f000 fd07 	bl	8005b34 <_fflush_r>
 8005126:	68e1      	ldr	r1, [r4, #12]
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <cleanup_stdio+0x3c>)
 800512a:	4299      	cmp	r1, r3
 800512c:	d004      	beq.n	8005138 <cleanup_stdio+0x30>
 800512e:	4620      	mov	r0, r4
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005134:	f000 bcfe 	b.w	8005b34 <_fflush_r>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	20000280 	.word	0x20000280
 8005140:	200002e8 	.word	0x200002e8
 8005144:	20000350 	.word	0x20000350

08005148 <global_stdio_init.part.0>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <global_stdio_init.part.0+0x30>)
 800514c:	4c0b      	ldr	r4, [pc, #44]	; (800517c <global_stdio_init.part.0+0x34>)
 800514e:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <global_stdio_init.part.0+0x38>)
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	2200      	movs	r2, #0
 8005156:	2104      	movs	r1, #4
 8005158:	f7ff ff94 	bl	8005084 <std>
 800515c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005160:	2201      	movs	r2, #1
 8005162:	2109      	movs	r1, #9
 8005164:	f7ff ff8e 	bl	8005084 <std>
 8005168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800516c:	2202      	movs	r2, #2
 800516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005172:	2112      	movs	r1, #18
 8005174:	f7ff bf86 	b.w	8005084 <std>
 8005178:	200003b8 	.word	0x200003b8
 800517c:	20000280 	.word	0x20000280
 8005180:	080050f1 	.word	0x080050f1

08005184 <__sfp_lock_acquire>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__sfp_lock_acquire+0x8>)
 8005186:	f000 b91e 	b.w	80053c6 <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	200003c1 	.word	0x200003c1

08005190 <__sfp_lock_release>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_release+0x8>)
 8005192:	f000 b919 	b.w	80053c8 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	200003c1 	.word	0x200003c1

0800519c <__sinit>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	f7ff fff0 	bl	8005184 <__sfp_lock_acquire>
 80051a4:	6a23      	ldr	r3, [r4, #32]
 80051a6:	b11b      	cbz	r3, 80051b0 <__sinit+0x14>
 80051a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ac:	f7ff bff0 	b.w	8005190 <__sfp_lock_release>
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <__sinit+0x28>)
 80051b2:	6223      	str	r3, [r4, #32]
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <__sinit+0x2c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f5      	bne.n	80051a8 <__sinit+0xc>
 80051bc:	f7ff ffc4 	bl	8005148 <global_stdio_init.part.0>
 80051c0:	e7f2      	b.n	80051a8 <__sinit+0xc>
 80051c2:	bf00      	nop
 80051c4:	08005109 	.word	0x08005109
 80051c8:	200003b8 	.word	0x200003b8

080051cc <_fwalk_sglue>:
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d0:	4607      	mov	r7, r0
 80051d2:	4688      	mov	r8, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	2600      	movs	r6, #0
 80051d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051dc:	f1b9 0901 	subs.w	r9, r9, #1
 80051e0:	d505      	bpl.n	80051ee <_fwalk_sglue+0x22>
 80051e2:	6824      	ldr	r4, [r4, #0]
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	d1f7      	bne.n	80051d8 <_fwalk_sglue+0xc>
 80051e8:	4630      	mov	r0, r6
 80051ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d907      	bls.n	8005204 <_fwalk_sglue+0x38>
 80051f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051f8:	3301      	adds	r3, #1
 80051fa:	d003      	beq.n	8005204 <_fwalk_sglue+0x38>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	4306      	orrs	r6, r0
 8005204:	3568      	adds	r5, #104	; 0x68
 8005206:	e7e9      	b.n	80051dc <_fwalk_sglue+0x10>

08005208 <iprintf>:
 8005208:	b40f      	push	{r0, r1, r2, r3}
 800520a:	b507      	push	{r0, r1, r2, lr}
 800520c:	4906      	ldr	r1, [pc, #24]	; (8005228 <iprintf+0x20>)
 800520e:	ab04      	add	r3, sp, #16
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	f853 2b04 	ldr.w	r2, [r3], #4
 8005216:	6881      	ldr	r1, [r0, #8]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	f000 f95b 	bl	80054d4 <_vfiprintf_r>
 800521e:	b003      	add	sp, #12
 8005220:	f85d eb04 	ldr.w	lr, [sp], #4
 8005224:	b004      	add	sp, #16
 8005226:	4770      	bx	lr
 8005228:	20000064 	.word	0x20000064

0800522c <__sread>:
 800522c:	b510      	push	{r4, lr}
 800522e:	460c      	mov	r4, r1
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	f000 f868 	bl	8005308 <_read_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	bfab      	itete	ge
 800523c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800523e:	89a3      	ldrhlt	r3, [r4, #12]
 8005240:	181b      	addge	r3, r3, r0
 8005242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005246:	bfac      	ite	ge
 8005248:	6563      	strge	r3, [r4, #84]	; 0x54
 800524a:	81a3      	strhlt	r3, [r4, #12]
 800524c:	bd10      	pop	{r4, pc}

0800524e <__swrite>:
 800524e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	461f      	mov	r7, r3
 8005254:	898b      	ldrh	r3, [r1, #12]
 8005256:	05db      	lsls	r3, r3, #23
 8005258:	4605      	mov	r5, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4616      	mov	r6, r2
 800525e:	d505      	bpl.n	800526c <__swrite+0x1e>
 8005260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005264:	2302      	movs	r3, #2
 8005266:	2200      	movs	r2, #0
 8005268:	f000 f83c 	bl	80052e4 <_lseek_r>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	4632      	mov	r2, r6
 800527a:	463b      	mov	r3, r7
 800527c:	4628      	mov	r0, r5
 800527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	f000 b863 	b.w	800534c <_write_r>

08005286 <__sseek>:
 8005286:	b510      	push	{r4, lr}
 8005288:	460c      	mov	r4, r1
 800528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528e:	f000 f829 	bl	80052e4 <_lseek_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	bf15      	itete	ne
 8005298:	6560      	strne	r0, [r4, #84]	; 0x54
 800529a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800529e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052a2:	81a3      	strheq	r3, [r4, #12]
 80052a4:	bf18      	it	ne
 80052a6:	81a3      	strhne	r3, [r4, #12]
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__sclose>:
 80052aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ae:	f000 b809 	b.w	80052c4 <_close_r>

080052b2 <memset>:
 80052b2:	4402      	add	r2, r0
 80052b4:	4603      	mov	r3, r0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d100      	bne.n	80052bc <memset+0xa>
 80052ba:	4770      	bx	lr
 80052bc:	f803 1b01 	strb.w	r1, [r3], #1
 80052c0:	e7f9      	b.n	80052b6 <memset+0x4>
	...

080052c4 <_close_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	; (80052e0 <_close_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fc fba9 	bl	8001a26 <_close>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_close_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_close_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	200003bc 	.word	0x200003bc

080052e4 <_lseek_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	; (8005304 <_lseek_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fc fbbe 	bl	8001a74 <_lseek>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_lseek_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_lseek_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	200003bc 	.word	0x200003bc

08005308 <_read_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	; (8005328 <_read_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fc fb4c 	bl	80019b4 <_read>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_read_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_read_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	200003bc 	.word	0x200003bc

0800532c <_sbrk_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d06      	ldr	r5, [pc, #24]	; (8005348 <_sbrk_r+0x1c>)
 8005330:	2300      	movs	r3, #0
 8005332:	4604      	mov	r4, r0
 8005334:	4608      	mov	r0, r1
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	f7fc fbaa 	bl	8001a90 <_sbrk>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d102      	bne.n	8005346 <_sbrk_r+0x1a>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b103      	cbz	r3, 8005346 <_sbrk_r+0x1a>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	200003bc 	.word	0x200003bc

0800534c <_write_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4d07      	ldr	r5, [pc, #28]	; (800536c <_write_r+0x20>)
 8005350:	4604      	mov	r4, r0
 8005352:	4608      	mov	r0, r1
 8005354:	4611      	mov	r1, r2
 8005356:	2200      	movs	r2, #0
 8005358:	602a      	str	r2, [r5, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	f7fc fb47 	bl	80019ee <_write>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_write_r+0x1e>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b103      	cbz	r3, 800536a <_write_r+0x1e>
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200003bc 	.word	0x200003bc

08005370 <__errno>:
 8005370:	4b01      	ldr	r3, [pc, #4]	; (8005378 <__errno+0x8>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000064 	.word	0x20000064

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4d0d      	ldr	r5, [pc, #52]	; (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2600      	movs	r6, #0
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4d0b      	ldr	r5, [pc, #44]	; (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	; (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 fd12 	bl	8005db8 <_init>
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2600      	movs	r6, #0
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	08005e30 	.word	0x08005e30
 80053b8:	08005e30 	.word	0x08005e30
 80053bc:	08005e30 	.word	0x08005e30
 80053c0:	08005e34 	.word	0x08005e34

080053c4 <__retarget_lock_init_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <__retarget_lock_acquire_recursive>:
 80053c6:	4770      	bx	lr

080053c8 <__retarget_lock_release_recursive>:
 80053c8:	4770      	bx	lr

080053ca <memcpy>:
 80053ca:	440a      	add	r2, r1
 80053cc:	4291      	cmp	r1, r2
 80053ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d2:	d100      	bne.n	80053d6 <memcpy+0xc>
 80053d4:	4770      	bx	lr
 80053d6:	b510      	push	{r4, lr}
 80053d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e0:	4291      	cmp	r1, r2
 80053e2:	d1f9      	bne.n	80053d8 <memcpy+0xe>
 80053e4:	bd10      	pop	{r4, pc}
	...

080053e8 <_free_r>:
 80053e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ea:	2900      	cmp	r1, #0
 80053ec:	d044      	beq.n	8005478 <_free_r+0x90>
 80053ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f2:	9001      	str	r0, [sp, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f1a1 0404 	sub.w	r4, r1, #4
 80053fa:	bfb8      	it	lt
 80053fc:	18e4      	addlt	r4, r4, r3
 80053fe:	f7ff fe35 	bl	800506c <__malloc_lock>
 8005402:	4a1e      	ldr	r2, [pc, #120]	; (800547c <_free_r+0x94>)
 8005404:	9801      	ldr	r0, [sp, #4]
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	b933      	cbnz	r3, 8005418 <_free_r+0x30>
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	6014      	str	r4, [r2, #0]
 800540e:	b003      	add	sp, #12
 8005410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005414:	f7ff be30 	b.w	8005078 <__malloc_unlock>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d908      	bls.n	800542e <_free_r+0x46>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf01      	itttt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	1949      	addeq	r1, r1, r5
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	e7ed      	b.n	800540a <_free_r+0x22>
 800542e:	461a      	mov	r2, r3
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b10b      	cbz	r3, 8005438 <_free_r+0x50>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d9fa      	bls.n	800542e <_free_r+0x46>
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	1855      	adds	r5, r2, r1
 800543c:	42a5      	cmp	r5, r4
 800543e:	d10b      	bne.n	8005458 <_free_r+0x70>
 8005440:	6824      	ldr	r4, [r4, #0]
 8005442:	4421      	add	r1, r4
 8005444:	1854      	adds	r4, r2, r1
 8005446:	42a3      	cmp	r3, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	d1e0      	bne.n	800540e <_free_r+0x26>
 800544c:	681c      	ldr	r4, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	440c      	add	r4, r1
 8005454:	6014      	str	r4, [r2, #0]
 8005456:	e7da      	b.n	800540e <_free_r+0x26>
 8005458:	d902      	bls.n	8005460 <_free_r+0x78>
 800545a:	230c      	movs	r3, #12
 800545c:	6003      	str	r3, [r0, #0]
 800545e:	e7d6      	b.n	800540e <_free_r+0x26>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	1961      	adds	r1, r4, r5
 8005464:	428b      	cmp	r3, r1
 8005466:	bf04      	itt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	bf04      	itt	eq
 8005470:	1949      	addeq	r1, r1, r5
 8005472:	6021      	streq	r1, [r4, #0]
 8005474:	6054      	str	r4, [r2, #4]
 8005476:	e7ca      	b.n	800540e <_free_r+0x26>
 8005478:	b003      	add	sp, #12
 800547a:	bd30      	pop	{r4, r5, pc}
 800547c:	20000278 	.word	0x20000278

08005480 <__sfputc_r>:
 8005480:	6893      	ldr	r3, [r2, #8]
 8005482:	3b01      	subs	r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	b410      	push	{r4}
 8005488:	6093      	str	r3, [r2, #8]
 800548a:	da08      	bge.n	800549e <__sfputc_r+0x1e>
 800548c:	6994      	ldr	r4, [r2, #24]
 800548e:	42a3      	cmp	r3, r4
 8005490:	db01      	blt.n	8005496 <__sfputc_r+0x16>
 8005492:	290a      	cmp	r1, #10
 8005494:	d103      	bne.n	800549e <__sfputc_r+0x1e>
 8005496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800549a:	f000 bb73 	b.w	8005b84 <__swbuf_r>
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	1c58      	adds	r0, r3, #1
 80054a2:	6010      	str	r0, [r2, #0]
 80054a4:	7019      	strb	r1, [r3, #0]
 80054a6:	4608      	mov	r0, r1
 80054a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <__sfputs_r>:
 80054ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b0:	4606      	mov	r6, r0
 80054b2:	460f      	mov	r7, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	18d5      	adds	r5, r2, r3
 80054b8:	42ac      	cmp	r4, r5
 80054ba:	d101      	bne.n	80054c0 <__sfputs_r+0x12>
 80054bc:	2000      	movs	r0, #0
 80054be:	e007      	b.n	80054d0 <__sfputs_r+0x22>
 80054c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c4:	463a      	mov	r2, r7
 80054c6:	4630      	mov	r0, r6
 80054c8:	f7ff ffda 	bl	8005480 <__sfputc_r>
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d1f3      	bne.n	80054b8 <__sfputs_r+0xa>
 80054d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054d4 <_vfiprintf_r>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	460d      	mov	r5, r1
 80054da:	b09d      	sub	sp, #116	; 0x74
 80054dc:	4614      	mov	r4, r2
 80054de:	4698      	mov	r8, r3
 80054e0:	4606      	mov	r6, r0
 80054e2:	b118      	cbz	r0, 80054ec <_vfiprintf_r+0x18>
 80054e4:	6a03      	ldr	r3, [r0, #32]
 80054e6:	b90b      	cbnz	r3, 80054ec <_vfiprintf_r+0x18>
 80054e8:	f7ff fe58 	bl	800519c <__sinit>
 80054ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ee:	07d9      	lsls	r1, r3, #31
 80054f0:	d405      	bmi.n	80054fe <_vfiprintf_r+0x2a>
 80054f2:	89ab      	ldrh	r3, [r5, #12]
 80054f4:	059a      	lsls	r2, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_vfiprintf_r+0x2a>
 80054f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054fa:	f7ff ff64 	bl	80053c6 <__retarget_lock_acquire_recursive>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	071b      	lsls	r3, r3, #28
 8005502:	d501      	bpl.n	8005508 <_vfiprintf_r+0x34>
 8005504:	692b      	ldr	r3, [r5, #16]
 8005506:	b99b      	cbnz	r3, 8005530 <_vfiprintf_r+0x5c>
 8005508:	4629      	mov	r1, r5
 800550a:	4630      	mov	r0, r6
 800550c:	f000 fb78 	bl	8005c00 <__swsetup_r>
 8005510:	b170      	cbz	r0, 8005530 <_vfiprintf_r+0x5c>
 8005512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005514:	07dc      	lsls	r4, r3, #31
 8005516:	d504      	bpl.n	8005522 <_vfiprintf_r+0x4e>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	b01d      	add	sp, #116	; 0x74
 800551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005522:	89ab      	ldrh	r3, [r5, #12]
 8005524:	0598      	lsls	r0, r3, #22
 8005526:	d4f7      	bmi.n	8005518 <_vfiprintf_r+0x44>
 8005528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552a:	f7ff ff4d 	bl	80053c8 <__retarget_lock_release_recursive>
 800552e:	e7f3      	b.n	8005518 <_vfiprintf_r+0x44>
 8005530:	2300      	movs	r3, #0
 8005532:	9309      	str	r3, [sp, #36]	; 0x24
 8005534:	2320      	movs	r3, #32
 8005536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800553a:	f8cd 800c 	str.w	r8, [sp, #12]
 800553e:	2330      	movs	r3, #48	; 0x30
 8005540:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80056f4 <_vfiprintf_r+0x220>
 8005544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005548:	f04f 0901 	mov.w	r9, #1
 800554c:	4623      	mov	r3, r4
 800554e:	469a      	mov	sl, r3
 8005550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005554:	b10a      	cbz	r2, 800555a <_vfiprintf_r+0x86>
 8005556:	2a25      	cmp	r2, #37	; 0x25
 8005558:	d1f9      	bne.n	800554e <_vfiprintf_r+0x7a>
 800555a:	ebba 0b04 	subs.w	fp, sl, r4
 800555e:	d00b      	beq.n	8005578 <_vfiprintf_r+0xa4>
 8005560:	465b      	mov	r3, fp
 8005562:	4622      	mov	r2, r4
 8005564:	4629      	mov	r1, r5
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff ffa1 	bl	80054ae <__sfputs_r>
 800556c:	3001      	adds	r0, #1
 800556e:	f000 80a9 	beq.w	80056c4 <_vfiprintf_r+0x1f0>
 8005572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005574:	445a      	add	r2, fp
 8005576:	9209      	str	r2, [sp, #36]	; 0x24
 8005578:	f89a 3000 	ldrb.w	r3, [sl]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80a1 	beq.w	80056c4 <_vfiprintf_r+0x1f0>
 8005582:	2300      	movs	r3, #0
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800558c:	f10a 0a01 	add.w	sl, sl, #1
 8005590:	9304      	str	r3, [sp, #16]
 8005592:	9307      	str	r3, [sp, #28]
 8005594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005598:	931a      	str	r3, [sp, #104]	; 0x68
 800559a:	4654      	mov	r4, sl
 800559c:	2205      	movs	r2, #5
 800559e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a2:	4854      	ldr	r0, [pc, #336]	; (80056f4 <_vfiprintf_r+0x220>)
 80055a4:	f7fa fe34 	bl	8000210 <memchr>
 80055a8:	9a04      	ldr	r2, [sp, #16]
 80055aa:	b9d8      	cbnz	r0, 80055e4 <_vfiprintf_r+0x110>
 80055ac:	06d1      	lsls	r1, r2, #27
 80055ae:	bf44      	itt	mi
 80055b0:	2320      	movmi	r3, #32
 80055b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b6:	0713      	lsls	r3, r2, #28
 80055b8:	bf44      	itt	mi
 80055ba:	232b      	movmi	r3, #43	; 0x2b
 80055bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055c0:	f89a 3000 	ldrb.w	r3, [sl]
 80055c4:	2b2a      	cmp	r3, #42	; 0x2a
 80055c6:	d015      	beq.n	80055f4 <_vfiprintf_r+0x120>
 80055c8:	9a07      	ldr	r2, [sp, #28]
 80055ca:	4654      	mov	r4, sl
 80055cc:	2000      	movs	r0, #0
 80055ce:	f04f 0c0a 	mov.w	ip, #10
 80055d2:	4621      	mov	r1, r4
 80055d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d8:	3b30      	subs	r3, #48	; 0x30
 80055da:	2b09      	cmp	r3, #9
 80055dc:	d94d      	bls.n	800567a <_vfiprintf_r+0x1a6>
 80055de:	b1b0      	cbz	r0, 800560e <_vfiprintf_r+0x13a>
 80055e0:	9207      	str	r2, [sp, #28]
 80055e2:	e014      	b.n	800560e <_vfiprintf_r+0x13a>
 80055e4:	eba0 0308 	sub.w	r3, r0, r8
 80055e8:	fa09 f303 	lsl.w	r3, r9, r3
 80055ec:	4313      	orrs	r3, r2
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	46a2      	mov	sl, r4
 80055f2:	e7d2      	b.n	800559a <_vfiprintf_r+0xc6>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	1d19      	adds	r1, r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	9103      	str	r1, [sp, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bfbb      	ittet	lt
 8005600:	425b      	neglt	r3, r3
 8005602:	f042 0202 	orrlt.w	r2, r2, #2
 8005606:	9307      	strge	r3, [sp, #28]
 8005608:	9307      	strlt	r3, [sp, #28]
 800560a:	bfb8      	it	lt
 800560c:	9204      	strlt	r2, [sp, #16]
 800560e:	7823      	ldrb	r3, [r4, #0]
 8005610:	2b2e      	cmp	r3, #46	; 0x2e
 8005612:	d10c      	bne.n	800562e <_vfiprintf_r+0x15a>
 8005614:	7863      	ldrb	r3, [r4, #1]
 8005616:	2b2a      	cmp	r3, #42	; 0x2a
 8005618:	d134      	bne.n	8005684 <_vfiprintf_r+0x1b0>
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	9203      	str	r2, [sp, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bfb8      	it	lt
 8005626:	f04f 33ff 	movlt.w	r3, #4294967295
 800562a:	3402      	adds	r4, #2
 800562c:	9305      	str	r3, [sp, #20]
 800562e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005704 <_vfiprintf_r+0x230>
 8005632:	7821      	ldrb	r1, [r4, #0]
 8005634:	2203      	movs	r2, #3
 8005636:	4650      	mov	r0, sl
 8005638:	f7fa fdea 	bl	8000210 <memchr>
 800563c:	b138      	cbz	r0, 800564e <_vfiprintf_r+0x17a>
 800563e:	9b04      	ldr	r3, [sp, #16]
 8005640:	eba0 000a 	sub.w	r0, r0, sl
 8005644:	2240      	movs	r2, #64	; 0x40
 8005646:	4082      	lsls	r2, r0
 8005648:	4313      	orrs	r3, r2
 800564a:	3401      	adds	r4, #1
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005652:	4829      	ldr	r0, [pc, #164]	; (80056f8 <_vfiprintf_r+0x224>)
 8005654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005658:	2206      	movs	r2, #6
 800565a:	f7fa fdd9 	bl	8000210 <memchr>
 800565e:	2800      	cmp	r0, #0
 8005660:	d03f      	beq.n	80056e2 <_vfiprintf_r+0x20e>
 8005662:	4b26      	ldr	r3, [pc, #152]	; (80056fc <_vfiprintf_r+0x228>)
 8005664:	bb1b      	cbnz	r3, 80056ae <_vfiprintf_r+0x1da>
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	3307      	adds	r3, #7
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	3308      	adds	r3, #8
 8005670:	9303      	str	r3, [sp, #12]
 8005672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005674:	443b      	add	r3, r7
 8005676:	9309      	str	r3, [sp, #36]	; 0x24
 8005678:	e768      	b.n	800554c <_vfiprintf_r+0x78>
 800567a:	fb0c 3202 	mla	r2, ip, r2, r3
 800567e:	460c      	mov	r4, r1
 8005680:	2001      	movs	r0, #1
 8005682:	e7a6      	b.n	80055d2 <_vfiprintf_r+0xfe>
 8005684:	2300      	movs	r3, #0
 8005686:	3401      	adds	r4, #1
 8005688:	9305      	str	r3, [sp, #20]
 800568a:	4619      	mov	r1, r3
 800568c:	f04f 0c0a 	mov.w	ip, #10
 8005690:	4620      	mov	r0, r4
 8005692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005696:	3a30      	subs	r2, #48	; 0x30
 8005698:	2a09      	cmp	r2, #9
 800569a:	d903      	bls.n	80056a4 <_vfiprintf_r+0x1d0>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0c6      	beq.n	800562e <_vfiprintf_r+0x15a>
 80056a0:	9105      	str	r1, [sp, #20]
 80056a2:	e7c4      	b.n	800562e <_vfiprintf_r+0x15a>
 80056a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a8:	4604      	mov	r4, r0
 80056aa:	2301      	movs	r3, #1
 80056ac:	e7f0      	b.n	8005690 <_vfiprintf_r+0x1bc>
 80056ae:	ab03      	add	r3, sp, #12
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	462a      	mov	r2, r5
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <_vfiprintf_r+0x22c>)
 80056b6:	a904      	add	r1, sp, #16
 80056b8:	4630      	mov	r0, r6
 80056ba:	f3af 8000 	nop.w
 80056be:	4607      	mov	r7, r0
 80056c0:	1c78      	adds	r0, r7, #1
 80056c2:	d1d6      	bne.n	8005672 <_vfiprintf_r+0x19e>
 80056c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c6:	07d9      	lsls	r1, r3, #31
 80056c8:	d405      	bmi.n	80056d6 <_vfiprintf_r+0x202>
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	059a      	lsls	r2, r3, #22
 80056ce:	d402      	bmi.n	80056d6 <_vfiprintf_r+0x202>
 80056d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d2:	f7ff fe79 	bl	80053c8 <__retarget_lock_release_recursive>
 80056d6:	89ab      	ldrh	r3, [r5, #12]
 80056d8:	065b      	lsls	r3, r3, #25
 80056da:	f53f af1d 	bmi.w	8005518 <_vfiprintf_r+0x44>
 80056de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056e0:	e71c      	b.n	800551c <_vfiprintf_r+0x48>
 80056e2:	ab03      	add	r3, sp, #12
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	462a      	mov	r2, r5
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <_vfiprintf_r+0x22c>)
 80056ea:	a904      	add	r1, sp, #16
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f879 	bl	80057e4 <_printf_i>
 80056f2:	e7e4      	b.n	80056be <_vfiprintf_r+0x1ea>
 80056f4:	08005df4 	.word	0x08005df4
 80056f8:	08005dfe 	.word	0x08005dfe
 80056fc:	00000000 	.word	0x00000000
 8005700:	080054af 	.word	0x080054af
 8005704:	08005dfa 	.word	0x08005dfa

08005708 <_printf_common>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	4616      	mov	r6, r2
 800570e:	4699      	mov	r9, r3
 8005710:	688a      	ldr	r2, [r1, #8]
 8005712:	690b      	ldr	r3, [r1, #16]
 8005714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005718:	4293      	cmp	r3, r2
 800571a:	bfb8      	it	lt
 800571c:	4613      	movlt	r3, r2
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005724:	4607      	mov	r7, r0
 8005726:	460c      	mov	r4, r1
 8005728:	b10a      	cbz	r2, 800572e <_printf_common+0x26>
 800572a:	3301      	adds	r3, #1
 800572c:	6033      	str	r3, [r6, #0]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	0699      	lsls	r1, r3, #26
 8005732:	bf42      	ittt	mi
 8005734:	6833      	ldrmi	r3, [r6, #0]
 8005736:	3302      	addmi	r3, #2
 8005738:	6033      	strmi	r3, [r6, #0]
 800573a:	6825      	ldr	r5, [r4, #0]
 800573c:	f015 0506 	ands.w	r5, r5, #6
 8005740:	d106      	bne.n	8005750 <_printf_common+0x48>
 8005742:	f104 0a19 	add.w	sl, r4, #25
 8005746:	68e3      	ldr	r3, [r4, #12]
 8005748:	6832      	ldr	r2, [r6, #0]
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	42ab      	cmp	r3, r5
 800574e:	dc26      	bgt.n	800579e <_printf_common+0x96>
 8005750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005754:	1e13      	subs	r3, r2, #0
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	bf18      	it	ne
 800575a:	2301      	movne	r3, #1
 800575c:	0692      	lsls	r2, r2, #26
 800575e:	d42b      	bmi.n	80057b8 <_printf_common+0xb0>
 8005760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d01e      	beq.n	80057ac <_printf_common+0xa4>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	f003 0306 	and.w	r3, r3, #6
 8005776:	2b04      	cmp	r3, #4
 8005778:	bf02      	ittt	eq
 800577a:	68e5      	ldreq	r5, [r4, #12]
 800577c:	6833      	ldreq	r3, [r6, #0]
 800577e:	1aed      	subeq	r5, r5, r3
 8005780:	68a3      	ldr	r3, [r4, #8]
 8005782:	bf0c      	ite	eq
 8005784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005788:	2500      	movne	r5, #0
 800578a:	4293      	cmp	r3, r2
 800578c:	bfc4      	itt	gt
 800578e:	1a9b      	subgt	r3, r3, r2
 8005790:	18ed      	addgt	r5, r5, r3
 8005792:	2600      	movs	r6, #0
 8005794:	341a      	adds	r4, #26
 8005796:	42b5      	cmp	r5, r6
 8005798:	d11a      	bne.n	80057d0 <_printf_common+0xc8>
 800579a:	2000      	movs	r0, #0
 800579c:	e008      	b.n	80057b0 <_printf_common+0xa8>
 800579e:	2301      	movs	r3, #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	4649      	mov	r1, r9
 80057a4:	4638      	mov	r0, r7
 80057a6:	47c0      	blx	r8
 80057a8:	3001      	adds	r0, #1
 80057aa:	d103      	bne.n	80057b4 <_printf_common+0xac>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	3501      	adds	r5, #1
 80057b6:	e7c6      	b.n	8005746 <_printf_common+0x3e>
 80057b8:	18e1      	adds	r1, r4, r3
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	2030      	movs	r0, #48	; 0x30
 80057be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057c2:	4422      	add	r2, r4
 80057c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057cc:	3302      	adds	r3, #2
 80057ce:	e7c7      	b.n	8005760 <_printf_common+0x58>
 80057d0:	2301      	movs	r3, #1
 80057d2:	4622      	mov	r2, r4
 80057d4:	4649      	mov	r1, r9
 80057d6:	4638      	mov	r0, r7
 80057d8:	47c0      	blx	r8
 80057da:	3001      	adds	r0, #1
 80057dc:	d0e6      	beq.n	80057ac <_printf_common+0xa4>
 80057de:	3601      	adds	r6, #1
 80057e0:	e7d9      	b.n	8005796 <_printf_common+0x8e>
	...

080057e4 <_printf_i>:
 80057e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	7e0f      	ldrb	r7, [r1, #24]
 80057ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057ec:	2f78      	cmp	r7, #120	; 0x78
 80057ee:	4691      	mov	r9, r2
 80057f0:	4680      	mov	r8, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	469a      	mov	sl, r3
 80057f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057fa:	d807      	bhi.n	800580c <_printf_i+0x28>
 80057fc:	2f62      	cmp	r7, #98	; 0x62
 80057fe:	d80a      	bhi.n	8005816 <_printf_i+0x32>
 8005800:	2f00      	cmp	r7, #0
 8005802:	f000 80d4 	beq.w	80059ae <_printf_i+0x1ca>
 8005806:	2f58      	cmp	r7, #88	; 0x58
 8005808:	f000 80c0 	beq.w	800598c <_printf_i+0x1a8>
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005814:	e03a      	b.n	800588c <_printf_i+0xa8>
 8005816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800581a:	2b15      	cmp	r3, #21
 800581c:	d8f6      	bhi.n	800580c <_printf_i+0x28>
 800581e:	a101      	add	r1, pc, #4	; (adr r1, 8005824 <_printf_i+0x40>)
 8005820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005824:	0800587d 	.word	0x0800587d
 8005828:	08005891 	.word	0x08005891
 800582c:	0800580d 	.word	0x0800580d
 8005830:	0800580d 	.word	0x0800580d
 8005834:	0800580d 	.word	0x0800580d
 8005838:	0800580d 	.word	0x0800580d
 800583c:	08005891 	.word	0x08005891
 8005840:	0800580d 	.word	0x0800580d
 8005844:	0800580d 	.word	0x0800580d
 8005848:	0800580d 	.word	0x0800580d
 800584c:	0800580d 	.word	0x0800580d
 8005850:	08005995 	.word	0x08005995
 8005854:	080058bd 	.word	0x080058bd
 8005858:	0800594f 	.word	0x0800594f
 800585c:	0800580d 	.word	0x0800580d
 8005860:	0800580d 	.word	0x0800580d
 8005864:	080059b7 	.word	0x080059b7
 8005868:	0800580d 	.word	0x0800580d
 800586c:	080058bd 	.word	0x080058bd
 8005870:	0800580d 	.word	0x0800580d
 8005874:	0800580d 	.word	0x0800580d
 8005878:	08005957 	.word	0x08005957
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	602a      	str	r2, [r5, #0]
 8005884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800588c:	2301      	movs	r3, #1
 800588e:	e09f      	b.n	80059d0 <_printf_i+0x1ec>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	682b      	ldr	r3, [r5, #0]
 8005894:	0607      	lsls	r7, r0, #24
 8005896:	f103 0104 	add.w	r1, r3, #4
 800589a:	6029      	str	r1, [r5, #0]
 800589c:	d501      	bpl.n	80058a2 <_printf_i+0xbe>
 800589e:	681e      	ldr	r6, [r3, #0]
 80058a0:	e003      	b.n	80058aa <_printf_i+0xc6>
 80058a2:	0646      	lsls	r6, r0, #25
 80058a4:	d5fb      	bpl.n	800589e <_printf_i+0xba>
 80058a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058aa:	2e00      	cmp	r6, #0
 80058ac:	da03      	bge.n	80058b6 <_printf_i+0xd2>
 80058ae:	232d      	movs	r3, #45	; 0x2d
 80058b0:	4276      	negs	r6, r6
 80058b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b6:	485a      	ldr	r0, [pc, #360]	; (8005a20 <_printf_i+0x23c>)
 80058b8:	230a      	movs	r3, #10
 80058ba:	e012      	b.n	80058e2 <_printf_i+0xfe>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	1d19      	adds	r1, r3, #4
 80058c2:	6029      	str	r1, [r5, #0]
 80058c4:	0605      	lsls	r5, r0, #24
 80058c6:	d501      	bpl.n	80058cc <_printf_i+0xe8>
 80058c8:	681e      	ldr	r6, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <_printf_i+0xee>
 80058cc:	0641      	lsls	r1, r0, #25
 80058ce:	d5fb      	bpl.n	80058c8 <_printf_i+0xe4>
 80058d0:	881e      	ldrh	r6, [r3, #0]
 80058d2:	4853      	ldr	r0, [pc, #332]	; (8005a20 <_printf_i+0x23c>)
 80058d4:	2f6f      	cmp	r7, #111	; 0x6f
 80058d6:	bf0c      	ite	eq
 80058d8:	2308      	moveq	r3, #8
 80058da:	230a      	movne	r3, #10
 80058dc:	2100      	movs	r1, #0
 80058de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058e2:	6865      	ldr	r5, [r4, #4]
 80058e4:	60a5      	str	r5, [r4, #8]
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	bfa2      	ittt	ge
 80058ea:	6821      	ldrge	r1, [r4, #0]
 80058ec:	f021 0104 	bicge.w	r1, r1, #4
 80058f0:	6021      	strge	r1, [r4, #0]
 80058f2:	b90e      	cbnz	r6, 80058f8 <_printf_i+0x114>
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	d04b      	beq.n	8005990 <_printf_i+0x1ac>
 80058f8:	4615      	mov	r5, r2
 80058fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80058fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005902:	5dc7      	ldrb	r7, [r0, r7]
 8005904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005908:	4637      	mov	r7, r6
 800590a:	42bb      	cmp	r3, r7
 800590c:	460e      	mov	r6, r1
 800590e:	d9f4      	bls.n	80058fa <_printf_i+0x116>
 8005910:	2b08      	cmp	r3, #8
 8005912:	d10b      	bne.n	800592c <_printf_i+0x148>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	07de      	lsls	r6, r3, #31
 8005918:	d508      	bpl.n	800592c <_printf_i+0x148>
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	6861      	ldr	r1, [r4, #4]
 800591e:	4299      	cmp	r1, r3
 8005920:	bfde      	ittt	le
 8005922:	2330      	movle	r3, #48	; 0x30
 8005924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800592c:	1b52      	subs	r2, r2, r5
 800592e:	6122      	str	r2, [r4, #16]
 8005930:	f8cd a000 	str.w	sl, [sp]
 8005934:	464b      	mov	r3, r9
 8005936:	aa03      	add	r2, sp, #12
 8005938:	4621      	mov	r1, r4
 800593a:	4640      	mov	r0, r8
 800593c:	f7ff fee4 	bl	8005708 <_printf_common>
 8005940:	3001      	adds	r0, #1
 8005942:	d14a      	bne.n	80059da <_printf_i+0x1f6>
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	b004      	add	sp, #16
 800594a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f043 0320 	orr.w	r3, r3, #32
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	4833      	ldr	r0, [pc, #204]	; (8005a24 <_printf_i+0x240>)
 8005958:	2778      	movs	r7, #120	; 0x78
 800595a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	6829      	ldr	r1, [r5, #0]
 8005962:	061f      	lsls	r7, r3, #24
 8005964:	f851 6b04 	ldr.w	r6, [r1], #4
 8005968:	d402      	bmi.n	8005970 <_printf_i+0x18c>
 800596a:	065f      	lsls	r7, r3, #25
 800596c:	bf48      	it	mi
 800596e:	b2b6      	uxthmi	r6, r6
 8005970:	07df      	lsls	r7, r3, #31
 8005972:	bf48      	it	mi
 8005974:	f043 0320 	orrmi.w	r3, r3, #32
 8005978:	6029      	str	r1, [r5, #0]
 800597a:	bf48      	it	mi
 800597c:	6023      	strmi	r3, [r4, #0]
 800597e:	b91e      	cbnz	r6, 8005988 <_printf_i+0x1a4>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	f023 0320 	bic.w	r3, r3, #32
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	2310      	movs	r3, #16
 800598a:	e7a7      	b.n	80058dc <_printf_i+0xf8>
 800598c:	4824      	ldr	r0, [pc, #144]	; (8005a20 <_printf_i+0x23c>)
 800598e:	e7e4      	b.n	800595a <_printf_i+0x176>
 8005990:	4615      	mov	r5, r2
 8005992:	e7bd      	b.n	8005910 <_printf_i+0x12c>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	6826      	ldr	r6, [r4, #0]
 8005998:	6961      	ldr	r1, [r4, #20]
 800599a:	1d18      	adds	r0, r3, #4
 800599c:	6028      	str	r0, [r5, #0]
 800599e:	0635      	lsls	r5, r6, #24
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0x1c4>
 80059a4:	6019      	str	r1, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0x1ca>
 80059a8:	0670      	lsls	r0, r6, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0x1c0>
 80059ac:	8019      	strh	r1, [r3, #0]
 80059ae:	2300      	movs	r3, #0
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	4615      	mov	r5, r2
 80059b4:	e7bc      	b.n	8005930 <_printf_i+0x14c>
 80059b6:	682b      	ldr	r3, [r5, #0]
 80059b8:	1d1a      	adds	r2, r3, #4
 80059ba:	602a      	str	r2, [r5, #0]
 80059bc:	681d      	ldr	r5, [r3, #0]
 80059be:	6862      	ldr	r2, [r4, #4]
 80059c0:	2100      	movs	r1, #0
 80059c2:	4628      	mov	r0, r5
 80059c4:	f7fa fc24 	bl	8000210 <memchr>
 80059c8:	b108      	cbz	r0, 80059ce <_printf_i+0x1ea>
 80059ca:	1b40      	subs	r0, r0, r5
 80059cc:	6060      	str	r0, [r4, #4]
 80059ce:	6863      	ldr	r3, [r4, #4]
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	2300      	movs	r3, #0
 80059d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d8:	e7aa      	b.n	8005930 <_printf_i+0x14c>
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	462a      	mov	r2, r5
 80059de:	4649      	mov	r1, r9
 80059e0:	4640      	mov	r0, r8
 80059e2:	47d0      	blx	sl
 80059e4:	3001      	adds	r0, #1
 80059e6:	d0ad      	beq.n	8005944 <_printf_i+0x160>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	079b      	lsls	r3, r3, #30
 80059ec:	d413      	bmi.n	8005a16 <_printf_i+0x232>
 80059ee:	68e0      	ldr	r0, [r4, #12]
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	4298      	cmp	r0, r3
 80059f4:	bfb8      	it	lt
 80059f6:	4618      	movlt	r0, r3
 80059f8:	e7a6      	b.n	8005948 <_printf_i+0x164>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4632      	mov	r2, r6
 80059fe:	4649      	mov	r1, r9
 8005a00:	4640      	mov	r0, r8
 8005a02:	47d0      	blx	sl
 8005a04:	3001      	adds	r0, #1
 8005a06:	d09d      	beq.n	8005944 <_printf_i+0x160>
 8005a08:	3501      	adds	r5, #1
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	9903      	ldr	r1, [sp, #12]
 8005a0e:	1a5b      	subs	r3, r3, r1
 8005a10:	42ab      	cmp	r3, r5
 8005a12:	dcf2      	bgt.n	80059fa <_printf_i+0x216>
 8005a14:	e7eb      	b.n	80059ee <_printf_i+0x20a>
 8005a16:	2500      	movs	r5, #0
 8005a18:	f104 0619 	add.w	r6, r4, #25
 8005a1c:	e7f5      	b.n	8005a0a <_printf_i+0x226>
 8005a1e:	bf00      	nop
 8005a20:	08005e05 	.word	0x08005e05
 8005a24:	08005e16 	.word	0x08005e16

08005a28 <__sflush_r>:
 8005a28:	898a      	ldrh	r2, [r1, #12]
 8005a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2e:	4605      	mov	r5, r0
 8005a30:	0710      	lsls	r0, r2, #28
 8005a32:	460c      	mov	r4, r1
 8005a34:	d458      	bmi.n	8005ae8 <__sflush_r+0xc0>
 8005a36:	684b      	ldr	r3, [r1, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	dc05      	bgt.n	8005a48 <__sflush_r+0x20>
 8005a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dc02      	bgt.n	8005a48 <__sflush_r+0x20>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	d0f9      	beq.n	8005a42 <__sflush_r+0x1a>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a54:	682f      	ldr	r7, [r5, #0]
 8005a56:	6a21      	ldr	r1, [r4, #32]
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	d032      	beq.n	8005ac2 <__sflush_r+0x9a>
 8005a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	075a      	lsls	r2, r3, #29
 8005a62:	d505      	bpl.n	8005a70 <__sflush_r+0x48>
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	1ac0      	subs	r0, r0, r3
 8005a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a6a:	b10b      	cbz	r3, 8005a70 <__sflush_r+0x48>
 8005a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a6e:	1ac0      	subs	r0, r0, r3
 8005a70:	2300      	movs	r3, #0
 8005a72:	4602      	mov	r2, r0
 8005a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a76:	6a21      	ldr	r1, [r4, #32]
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b0      	blx	r6
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	d106      	bne.n	8005a90 <__sflush_r+0x68>
 8005a82:	6829      	ldr	r1, [r5, #0]
 8005a84:	291d      	cmp	r1, #29
 8005a86:	d82b      	bhi.n	8005ae0 <__sflush_r+0xb8>
 8005a88:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <__sflush_r+0x108>)
 8005a8a:	410a      	asrs	r2, r1
 8005a8c:	07d6      	lsls	r6, r2, #31
 8005a8e:	d427      	bmi.n	8005ae0 <__sflush_r+0xb8>
 8005a90:	2200      	movs	r2, #0
 8005a92:	6062      	str	r2, [r4, #4]
 8005a94:	04d9      	lsls	r1, r3, #19
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	6022      	str	r2, [r4, #0]
 8005a9a:	d504      	bpl.n	8005aa6 <__sflush_r+0x7e>
 8005a9c:	1c42      	adds	r2, r0, #1
 8005a9e:	d101      	bne.n	8005aa4 <__sflush_r+0x7c>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	b903      	cbnz	r3, 8005aa6 <__sflush_r+0x7e>
 8005aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8005aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aa8:	602f      	str	r7, [r5, #0]
 8005aaa:	2900      	cmp	r1, #0
 8005aac:	d0c9      	beq.n	8005a42 <__sflush_r+0x1a>
 8005aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab2:	4299      	cmp	r1, r3
 8005ab4:	d002      	beq.n	8005abc <__sflush_r+0x94>
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7ff fc96 	bl	80053e8 <_free_r>
 8005abc:	2000      	movs	r0, #0
 8005abe:	6360      	str	r0, [r4, #52]	; 0x34
 8005ac0:	e7c0      	b.n	8005a44 <__sflush_r+0x1c>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b0      	blx	r6
 8005ac8:	1c41      	adds	r1, r0, #1
 8005aca:	d1c8      	bne.n	8005a5e <__sflush_r+0x36>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0c5      	beq.n	8005a5e <__sflush_r+0x36>
 8005ad2:	2b1d      	cmp	r3, #29
 8005ad4:	d001      	beq.n	8005ada <__sflush_r+0xb2>
 8005ad6:	2b16      	cmp	r3, #22
 8005ad8:	d101      	bne.n	8005ade <__sflush_r+0xb6>
 8005ada:	602f      	str	r7, [r5, #0]
 8005adc:	e7b1      	b.n	8005a42 <__sflush_r+0x1a>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	e7ad      	b.n	8005a44 <__sflush_r+0x1c>
 8005ae8:	690f      	ldr	r7, [r1, #16]
 8005aea:	2f00      	cmp	r7, #0
 8005aec:	d0a9      	beq.n	8005a42 <__sflush_r+0x1a>
 8005aee:	0793      	lsls	r3, r2, #30
 8005af0:	680e      	ldr	r6, [r1, #0]
 8005af2:	bf08      	it	eq
 8005af4:	694b      	ldreq	r3, [r1, #20]
 8005af6:	600f      	str	r7, [r1, #0]
 8005af8:	bf18      	it	ne
 8005afa:	2300      	movne	r3, #0
 8005afc:	eba6 0807 	sub.w	r8, r6, r7
 8005b00:	608b      	str	r3, [r1, #8]
 8005b02:	f1b8 0f00 	cmp.w	r8, #0
 8005b06:	dd9c      	ble.n	8005a42 <__sflush_r+0x1a>
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	463a      	mov	r2, r7
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b0      	blx	r6
 8005b14:	2800      	cmp	r0, #0
 8005b16:	dc06      	bgt.n	8005b26 <__sflush_r+0xfe>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	e78e      	b.n	8005a44 <__sflush_r+0x1c>
 8005b26:	4407      	add	r7, r0
 8005b28:	eba8 0800 	sub.w	r8, r8, r0
 8005b2c:	e7e9      	b.n	8005b02 <__sflush_r+0xda>
 8005b2e:	bf00      	nop
 8005b30:	dfbffffe 	.word	0xdfbffffe

08005b34 <_fflush_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	690b      	ldr	r3, [r1, #16]
 8005b38:	4605      	mov	r5, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	b913      	cbnz	r3, 8005b44 <_fflush_r+0x10>
 8005b3e:	2500      	movs	r5, #0
 8005b40:	4628      	mov	r0, r5
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	b118      	cbz	r0, 8005b4e <_fflush_r+0x1a>
 8005b46:	6a03      	ldr	r3, [r0, #32]
 8005b48:	b90b      	cbnz	r3, 8005b4e <_fflush_r+0x1a>
 8005b4a:	f7ff fb27 	bl	800519c <__sinit>
 8005b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f3      	beq.n	8005b3e <_fflush_r+0xa>
 8005b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b58:	07d0      	lsls	r0, r2, #31
 8005b5a:	d404      	bmi.n	8005b66 <_fflush_r+0x32>
 8005b5c:	0599      	lsls	r1, r3, #22
 8005b5e:	d402      	bmi.n	8005b66 <_fflush_r+0x32>
 8005b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b62:	f7ff fc30 	bl	80053c6 <__retarget_lock_acquire_recursive>
 8005b66:	4628      	mov	r0, r5
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7ff ff5d 	bl	8005a28 <__sflush_r>
 8005b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b70:	07da      	lsls	r2, r3, #31
 8005b72:	4605      	mov	r5, r0
 8005b74:	d4e4      	bmi.n	8005b40 <_fflush_r+0xc>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	059b      	lsls	r3, r3, #22
 8005b7a:	d4e1      	bmi.n	8005b40 <_fflush_r+0xc>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f7ff fc23 	bl	80053c8 <__retarget_lock_release_recursive>
 8005b82:	e7dd      	b.n	8005b40 <_fflush_r+0xc>

08005b84 <__swbuf_r>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	460e      	mov	r6, r1
 8005b88:	4614      	mov	r4, r2
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	b118      	cbz	r0, 8005b96 <__swbuf_r+0x12>
 8005b8e:	6a03      	ldr	r3, [r0, #32]
 8005b90:	b90b      	cbnz	r3, 8005b96 <__swbuf_r+0x12>
 8005b92:	f7ff fb03 	bl	800519c <__sinit>
 8005b96:	69a3      	ldr	r3, [r4, #24]
 8005b98:	60a3      	str	r3, [r4, #8]
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	071a      	lsls	r2, r3, #28
 8005b9e:	d525      	bpl.n	8005bec <__swbuf_r+0x68>
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	b31b      	cbz	r3, 8005bec <__swbuf_r+0x68>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	6922      	ldr	r2, [r4, #16]
 8005ba8:	1a98      	subs	r0, r3, r2
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	b2f6      	uxtb	r6, r6
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	4637      	mov	r7, r6
 8005bb2:	dc04      	bgt.n	8005bbe <__swbuf_r+0x3a>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff ffbc 	bl	8005b34 <_fflush_r>
 8005bbc:	b9e0      	cbnz	r0, 8005bf8 <__swbuf_r+0x74>
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	6022      	str	r2, [r4, #0]
 8005bca:	701e      	strb	r6, [r3, #0]
 8005bcc:	6962      	ldr	r2, [r4, #20]
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d004      	beq.n	8005bde <__swbuf_r+0x5a>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d506      	bpl.n	8005be8 <__swbuf_r+0x64>
 8005bda:	2e0a      	cmp	r6, #10
 8005bdc:	d104      	bne.n	8005be8 <__swbuf_r+0x64>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7ff ffa7 	bl	8005b34 <_fflush_r>
 8005be6:	b938      	cbnz	r0, 8005bf8 <__swbuf_r+0x74>
 8005be8:	4638      	mov	r0, r7
 8005bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f806 	bl	8005c00 <__swsetup_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d0d5      	beq.n	8005ba4 <__swbuf_r+0x20>
 8005bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8005bfc:	e7f4      	b.n	8005be8 <__swbuf_r+0x64>
	...

08005c00 <__swsetup_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4b2a      	ldr	r3, [pc, #168]	; (8005cac <__swsetup_r+0xac>)
 8005c04:	4605      	mov	r5, r0
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	460c      	mov	r4, r1
 8005c0a:	b118      	cbz	r0, 8005c14 <__swsetup_r+0x14>
 8005c0c:	6a03      	ldr	r3, [r0, #32]
 8005c0e:	b90b      	cbnz	r3, 8005c14 <__swsetup_r+0x14>
 8005c10:	f7ff fac4 	bl	800519c <__sinit>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c1a:	0718      	lsls	r0, r3, #28
 8005c1c:	d422      	bmi.n	8005c64 <__swsetup_r+0x64>
 8005c1e:	06d9      	lsls	r1, r3, #27
 8005c20:	d407      	bmi.n	8005c32 <__swsetup_r+0x32>
 8005c22:	2309      	movs	r3, #9
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e034      	b.n	8005c9c <__swsetup_r+0x9c>
 8005c32:	0758      	lsls	r0, r3, #29
 8005c34:	d512      	bpl.n	8005c5c <__swsetup_r+0x5c>
 8005c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c38:	b141      	cbz	r1, 8005c4c <__swsetup_r+0x4c>
 8005c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d002      	beq.n	8005c48 <__swsetup_r+0x48>
 8005c42:	4628      	mov	r0, r5
 8005c44:	f7ff fbd0 	bl	80053e8 <_free_r>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	2300      	movs	r3, #0
 8005c56:	6063      	str	r3, [r4, #4]
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f043 0308 	orr.w	r3, r3, #8
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	b94b      	cbnz	r3, 8005c7c <__swsetup_r+0x7c>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c72:	d003      	beq.n	8005c7c <__swsetup_r+0x7c>
 8005c74:	4621      	mov	r1, r4
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 f840 	bl	8005cfc <__smakebuf_r>
 8005c7c:	89a0      	ldrh	r0, [r4, #12]
 8005c7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c82:	f010 0301 	ands.w	r3, r0, #1
 8005c86:	d00a      	beq.n	8005c9e <__swsetup_r+0x9e>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60a3      	str	r3, [r4, #8]
 8005c8c:	6963      	ldr	r3, [r4, #20]
 8005c8e:	425b      	negs	r3, r3
 8005c90:	61a3      	str	r3, [r4, #24]
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	b943      	cbnz	r3, 8005ca8 <__swsetup_r+0xa8>
 8005c96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c9a:	d1c4      	bne.n	8005c26 <__swsetup_r+0x26>
 8005c9c:	bd38      	pop	{r3, r4, r5, pc}
 8005c9e:	0781      	lsls	r1, r0, #30
 8005ca0:	bf58      	it	pl
 8005ca2:	6963      	ldrpl	r3, [r4, #20]
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	e7f4      	b.n	8005c92 <__swsetup_r+0x92>
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7f7      	b.n	8005c9c <__swsetup_r+0x9c>
 8005cac:	20000064 	.word	0x20000064

08005cb0 <__swhatbuf_r>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	b096      	sub	sp, #88	; 0x58
 8005cbc:	4615      	mov	r5, r2
 8005cbe:	461e      	mov	r6, r3
 8005cc0:	da0d      	bge.n	8005cde <__swhatbuf_r+0x2e>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cc8:	f04f 0100 	mov.w	r1, #0
 8005ccc:	bf0c      	ite	eq
 8005cce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005cd2:	2340      	movne	r3, #64	; 0x40
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	6031      	str	r1, [r6, #0]
 8005cd8:	602b      	str	r3, [r5, #0]
 8005cda:	b016      	add	sp, #88	; 0x58
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	466a      	mov	r2, sp
 8005ce0:	f000 f848 	bl	8005d74 <_fstat_r>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	dbec      	blt.n	8005cc2 <__swhatbuf_r+0x12>
 8005ce8:	9901      	ldr	r1, [sp, #4]
 8005cea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005cf2:	4259      	negs	r1, r3
 8005cf4:	4159      	adcs	r1, r3
 8005cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfa:	e7eb      	b.n	8005cd4 <__swhatbuf_r+0x24>

08005cfc <__smakebuf_r>:
 8005cfc:	898b      	ldrh	r3, [r1, #12]
 8005cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d00:	079d      	lsls	r5, r3, #30
 8005d02:	4606      	mov	r6, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	d507      	bpl.n	8005d18 <__smakebuf_r+0x1c>
 8005d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	2301      	movs	r3, #1
 8005d12:	6163      	str	r3, [r4, #20]
 8005d14:	b002      	add	sp, #8
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	ab01      	add	r3, sp, #4
 8005d1a:	466a      	mov	r2, sp
 8005d1c:	f7ff ffc8 	bl	8005cb0 <__swhatbuf_r>
 8005d20:	9900      	ldr	r1, [sp, #0]
 8005d22:	4605      	mov	r5, r0
 8005d24:	4630      	mov	r0, r6
 8005d26:	f7ff f921 	bl	8004f6c <_malloc_r>
 8005d2a:	b948      	cbnz	r0, 8005d40 <__smakebuf_r+0x44>
 8005d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d30:	059a      	lsls	r2, r3, #22
 8005d32:	d4ef      	bmi.n	8005d14 <__smakebuf_r+0x18>
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	f043 0302 	orr.w	r3, r3, #2
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	e7e3      	b.n	8005d08 <__smakebuf_r+0xc>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	6020      	str	r0, [r4, #0]
 8005d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d48:	81a3      	strh	r3, [r4, #12]
 8005d4a:	9b00      	ldr	r3, [sp, #0]
 8005d4c:	6163      	str	r3, [r4, #20]
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	6120      	str	r0, [r4, #16]
 8005d52:	b15b      	cbz	r3, 8005d6c <__smakebuf_r+0x70>
 8005d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 f81d 	bl	8005d98 <_isatty_r>
 8005d5e:	b128      	cbz	r0, 8005d6c <__smakebuf_r+0x70>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f023 0303 	bic.w	r3, r3, #3
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	431d      	orrs	r5, r3
 8005d70:	81a5      	strh	r5, [r4, #12]
 8005d72:	e7cf      	b.n	8005d14 <__smakebuf_r+0x18>

08005d74 <_fstat_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4d07      	ldr	r5, [pc, #28]	; (8005d94 <_fstat_r+0x20>)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	602b      	str	r3, [r5, #0]
 8005d82:	f7fb fe5c 	bl	8001a3e <_fstat>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d102      	bne.n	8005d90 <_fstat_r+0x1c>
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	b103      	cbz	r3, 8005d90 <_fstat_r+0x1c>
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	bf00      	nop
 8005d94:	200003bc 	.word	0x200003bc

08005d98 <_isatty_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	; (8005db4 <_isatty_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb fe5b 	bl	8001a5e <_isatty>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_isatty_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_isatty_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200003bc 	.word	0x200003bc

08005db8 <_init>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_fini>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr
