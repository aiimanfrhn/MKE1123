
Milestone3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e18  08005e18  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e20  08005e20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08005e90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005e90  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d469  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a1  00000000  00000000  0002d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002284d  00000000  00000000  00030ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6f4  00000000  00000000  00053314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd55a  00000000  00000000  00062a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003974  00000000  00000000  0012ff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001338d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005da8 	.word	0x08005da8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005da8 	.word	0x08005da8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__io_putchar>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// printf() function
int __io_putchar(int ch)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, &temp, 1, HAL_MAX_DELAY);
 8000d96:	f107 010f 	add.w	r1, r7, #15
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <__io_putchar+0x28>)
 8000da2:	f003 f8f9 	bl	8003f98 <HAL_UART_Transmit>
  return ch;
 8000da6:	687b      	ldr	r3, [r7, #4]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200000d8 	.word	0x200000d8

08000db4 <max30102_plot>:

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%u,r:%u\n", ir_sample, red_sample);    // Print IR and Red
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <max30102_plot+0x1c>)
 8000dc4:	f004 fa18 	bl	80051f8 <iprintf>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08005dc0 	.word	0x08005dc0

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 fec3 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f857 	bl	8000e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de2:	f000 f945 	bl	8001070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000de6:	f000 f919 	bl	800101c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dea:	f000 f8bf 	bl	8000f6c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dee:	f000 f8eb 	bl	8000fc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initiation
  max30102_init(&max30102, &hi2c1);
 8000df2:	4924      	ldr	r1, [pc, #144]	; (8000e84 <main+0xb0>)
 8000df4:	4824      	ldr	r0, [pc, #144]	; (8000e88 <main+0xb4>)
 8000df6:	f000 f9d0 	bl	800119a <max30102_init>
  max30102_reset(&max30102);
 8000dfa:	4823      	ldr	r0, [pc, #140]	; (8000e88 <main+0xb4>)
 8000dfc:	f000 fa44 	bl	8001288 <max30102_reset>
  max30102_clear_fifo(&max30102);
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <main+0xb4>)
 8000e02:	f000 fbfb 	bl	80015fc <max30102_clear_fifo>
  max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8000e06:	2307      	movs	r3, #7
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <main+0xb4>)
 8000e0e:	f000 fbbb 	bl	8001588 <max30102_set_fifo_config>
  
  // Sensor settings
  max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8000e12:	2101      	movs	r1, #1
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <main+0xb4>)
 8000e16:	f000 fb20 	bl	800145a <max30102_set_led_pulse_width>
  max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	481a      	ldr	r0, [pc, #104]	; (8000e88 <main+0xb4>)
 8000e1e:	f000 fb3f 	bl	80014a0 <max30102_set_adc_resolution>
  max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8000e22:	2104      	movs	r1, #4
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <main+0xb4>)
 8000e26:	f000 faf9 	bl	800141c <max30102_set_sampling_rate>
  max30102_set_led_current_1(&max30102, 6.2);
 8000e2a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000e8c <main+0xb8>
 8000e2e:	4816      	ldr	r0, [pc, #88]	; (8000e88 <main+0xb4>)
 8000e30:	f000 fb5a 	bl	80014e8 <max30102_set_led_current_1>
  max30102_set_led_current_2(&max30102, 6.2);
 8000e34:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000e8c <main+0xb8>
 8000e38:	4813      	ldr	r0, [pc, #76]	; (8000e88 <main+0xb4>)
 8000e3a:	f000 fb7d 	bl	8001538 <max30102_set_led_current_2>

  // Enter SpO2 mode
  max30102_set_mode(&max30102, max30102_spo2);
 8000e3e:	2103      	movs	r1, #3
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <main+0xb4>)
 8000e42:	f000 fac5 	bl	80013d0 <max30102_set_mode>
  max30102_set_a_full(&max30102, 1);
 8000e46:	2101      	movs	r1, #1
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <main+0xb4>)
 8000e4a:	f000 fa2e 	bl	80012aa <max30102_set_a_full>
  
  // Initiate 1 temperature measurement
  max30102_set_die_temp_en(&max30102, 1);
 8000e4e:	2101      	movs	r1, #1
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <main+0xb4>)
 8000e52:	f000 fa6a 	bl	800132a <max30102_set_die_temp_en>
  max30102_set_die_temp_rdy(&max30102, 1);
 8000e56:	2101      	movs	r1, #1
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <main+0xb4>)
 8000e5a:	f000 fa4e 	bl	80012fa <max30102_set_die_temp_rdy>
  
  uint8_t en_reg[2] = {0};
 8000e5e:	2300      	movs	r3, #0
 8000e60:	80bb      	strh	r3, [r7, #4]
  max30102_read(&max30102, 0x00, en_reg, 1);
 8000e62:	1d3a      	adds	r2, r7, #4
 8000e64:	2301      	movs	r3, #1
 8000e66:	2100      	movs	r1, #0
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <main+0xb4>)
 8000e6a:	f000 f9e8 	bl	800123e <max30102_read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (max30102_has_interrupt(&max30102))
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <main+0xb4>)
 8000e70:	f000 fa73 	bl	800135a <max30102_has_interrupt>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f9      	beq.n	8000e6e <main+0x9a>
    {
      max30102_interrupt_handler(&max30102);
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <main+0xb4>)
 8000e7c:	f000 fa7a 	bl	8001374 <max30102_interrupt_handler>
    if (max30102_has_interrupt(&max30102))
 8000e80:	e7f5      	b.n	8000e6e <main+0x9a>
 8000e82:	bf00      	nop
 8000e84:	20000084 	.word	0x20000084
 8000e88:	20000168 	.word	0x20000168
 8000e8c:	40c66666 	.word	0x40c66666

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	; 0x50
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2234      	movs	r2, #52	; 0x34
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f9ff 	bl	80052a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <SystemClock_Config+0xd4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <SystemClock_Config+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <SystemClock_Config+0xd8>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <SystemClock_Config+0xd8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f04:	2310      	movs	r3, #16
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fd4c 	bl	80039bc <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f2a:	f000 f92f 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f9ec 	bl	8003328 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f56:	f000 f919 	bl	800118c <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f72:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <MX_I2C1_Init+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x58>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_I2C1_Init+0x50>)
 8000faa:	f001 f9c3 	bl	8002334 <HAL_I2C_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb4:	f000 f8ea 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000084 	.word	0x20000084
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	000186a0 	.word	0x000186a0

08000fc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART1_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8001000:	f002 ff7a 	bl	8003ef8 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 f8bf 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000d8 	.word	0x200000d8
 8001018:	40011000 	.word	0x40011000

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART2_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001054:	f002 ff50 	bl	8003ef8 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f895 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000120 	.word	0x20000120
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <MX_GPIO_Init+0x10c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a3b      	ldr	r2, [pc, #236]	; (800117c <MX_GPIO_Init+0x10c>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <MX_GPIO_Init+0x10c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <MX_GPIO_Init+0x10c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a34      	ldr	r2, [pc, #208]	; (800117c <MX_GPIO_Init+0x10c>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <MX_GPIO_Init+0x10c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <MX_GPIO_Init+0x10c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <MX_GPIO_Init+0x10c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_GPIO_Init+0x10c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <MX_GPIO_Init+0x10c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <MX_GPIO_Init+0x10c>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_GPIO_Init+0x10c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2120      	movs	r1, #32
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <MX_GPIO_Init+0x110>)
 80010fc:	f001 f8dc 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001106:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	481b      	ldr	r0, [pc, #108]	; (8001184 <MX_GPIO_Init+0x114>)
 8001118:	f000 ff3a 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800111c:	2320      	movs	r3, #32
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4813      	ldr	r0, [pc, #76]	; (8001180 <MX_GPIO_Init+0x110>)
 8001134:	f000 ff2c 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001142:	2301      	movs	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <MX_GPIO_Init+0x118>)
 800114e:	f000 ff1f 	bl	8001f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2006      	movs	r0, #6
 8001158:	f000 fe51 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800115c:	2006      	movs	r0, #6
 800115e:	f000 fe6a 	bl	8001e36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f000 fe49 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116c:	2028      	movs	r0, #40	; 0x28
 800116e:	f000 fe62 	bl	8001e36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020800 	.word	0x40020800
 8001188:	40020400 	.word	0x40020400

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 f871 	bl	80052a2 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3384      	adds	r3, #132	; 0x84
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f86a 	bl	80052a2 <memset>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b088      	sub	sp, #32
 80011da:	af02      	add	r7, sp, #8
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	72fb      	strb	r3, [r7, #11]
 80011e6:	4613      	mov	r3, r2
 80011e8:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80011ea:	893b      	ldrh	r3, [r7, #8]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fe84 	bl	8004efc <malloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	617b      	str	r3, [r7, #20]
    *payload = reg;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	7afa      	ldrb	r2, [r7, #11]
 80011fc:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <max30102_write+0x42>
 8001204:	893b      	ldrh	r3, [r7, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	893a      	ldrh	r2, [r7, #8]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f004 f8d1 	bl	80053ba <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	893b      	ldrh	r3, [r7, #8]
 800121e:	3301      	adds	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001226:	9200      	str	r2, [sp, #0]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	21ae      	movs	r1, #174	; 0xae
 800122c:	f001 f9c6 	bl	80025bc <HAL_I2C_Master_Transmit>
    free(payload);
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f003 fe6b 	bl	8004f0c <free>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b088      	sub	sp, #32
 8001242:	af02      	add	r7, sp, #8
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	461a      	mov	r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	72fb      	strb	r3, [r7, #11]
 800124e:	4613      	mov	r3, r2
 8001250:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	f107 0217 	add.w	r2, r7, #23
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	21ae      	movs	r1, #174	; 0xae
 8001268:	f001 f9a8 	bl	80025bc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	893b      	ldrh	r3, [r7, #8]
 8001272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	21ae      	movs	r1, #174	; 0xae
 800127c:	f001 fa9c 	bl	80027b8 <HAL_I2C_Master_Receive>
}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8001294:	f107 020f 	add.w	r2, r7, #15
 8001298:	2301      	movs	r3, #1
 800129a:	2109      	movs	r1, #9
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff9a 	bl	80011d6 <max30102_write>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80012ba:	f107 020f 	add.w	r2, r7, #15
 80012be:	2301      	movs	r3, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffbb 	bl	800123e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	01db      	lsls	r3, r3, #7
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80012e4:	f107 020f 	add.w	r2, r7, #15
 80012e8:	2301      	movs	r3, #1
 80012ea:	2102      	movs	r1, #2
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff72 	bl	80011d6 <max30102_write>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8001314:	f107 020f 	add.w	r2, r7, #15
 8001318:	2301      	movs	r3, #1
 800131a:	2103      	movs	r1, #3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff5a 	bl	80011d6 <max30102_write>
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8001344:	f107 020f 	add.w	r2, r7, #15
 8001348:	2301      	movs	r3, #1
 800134a:	2121      	movs	r1, #33	; 0x21
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff42 	bl	80011d6 <max30102_write>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 800137c:	2300      	movs	r3, #0
 800137e:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8001380:	f107 020c 	add.w	r2, r7, #12
 8001384:	2302      	movs	r3, #2
 8001386:	2100      	movs	r1, #0
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff58 	bl	800123e <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800138e:	7b3b      	ldrb	r3, [r7, #12]
 8001390:	09db      	lsrs	r3, r3, #7
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f94c 	bl	800163a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 80013a2:	7b7b      	ldrb	r3, [r7, #13]
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 80013b0:	f107 020a 	add.w	r2, r7, #10
 80013b4:	f107 030b 	add.w	r3, r7, #11
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f9a4 	bl	8001708 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80013dc:	f107 020f 	add.w	r2, r7, #15
 80013e0:	2301      	movs	r3, #1
 80013e2:	2109      	movs	r1, #9
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff2a 	bl	800123e <max30102_read>
    config = (config & 0xf8) | mode;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	f023 0307 	bic.w	r3, r3, #7
 80013f2:	b25a      	sxtb	r2, r3
 80013f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001400:	f107 020f 	add.w	r2, r7, #15
 8001404:	2301      	movs	r3, #1
 8001406:	2109      	movs	r1, #9
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fee4 	bl	80011d6 <max30102_write>
    max30102_clear_fifo(obj);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f8f4 	bl	80015fc <max30102_clear_fifo>
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001428:	f107 020f 	add.w	r2, r7, #15
 800142c:	2301      	movs	r3, #1
 800142e:	210a      	movs	r1, #10
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff04 	bl	800123e <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001440:	b2db      	uxtb	r3, r3
 8001442:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001444:	f107 020f 	add.w	r2, r7, #15
 8001448:	2301      	movs	r3, #1
 800144a:	210a      	movs	r1, #10
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fec2 	bl	80011d6 <max30102_write>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001466:	f107 020f 	add.w	r2, r7, #15
 800146a:	2301      	movs	r3, #1
 800146c:	210a      	movs	r1, #10
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fee5 	bl	800123e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800147c:	b25a      	sxtb	r2, r3
 800147e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001482:	4313      	orrs	r3, r2
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800148a:	f107 020f 	add.w	r2, r7, #15
 800148e:	2301      	movs	r3, #1
 8001490:	210a      	movs	r1, #10
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe9f 	bl	80011d6 <max30102_write>
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80014ac:	f107 020f 	add.w	r2, r7, #15
 80014b0:	2301      	movs	r3, #1
 80014b2:	210a      	movs	r1, #10
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fec2 	bl	800123e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	b25a      	sxtb	r2, r3
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80014d2:	f107 020f 	add.w	r2, r7, #15
 80014d6:	2301      	movs	r3, #1
 80014d8:	210a      	movs	r1, #10
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fe7b 	bl	80011d6 <max30102_write>
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f7ff f83f 	bl	8000578 <__aeabi_f2d>
 80014fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001530 <max30102_set_led_current_1+0x48>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f9bc 	bl	800087c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fa9e 	bl	8000a4c <__aeabi_d2uiz>
 8001510:	4603      	mov	r3, r0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8001516:	f107 020f 	add.w	r2, r7, #15
 800151a:	2301      	movs	r3, #1
 800151c:	210c      	movs	r1, #12
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fe59 	bl	80011d6 <max30102_write>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	f3af 8000 	nop.w
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fc99999 	.word	0x3fc99999

08001538 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f7ff f817 	bl	8000578 <__aeabi_f2d>
 800154a:	a30d      	add	r3, pc, #52	; (adr r3, 8001580 <max30102_set_led_current_2+0x48>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f994 	bl	800087c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fa76 	bl	8000a4c <__aeabi_d2uiz>
 8001560:	4603      	mov	r3, r0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8001566:	f107 020f 	add.w	r2, r7, #15
 800156a:	2301      	movs	r3, #1
 800156c:	210d      	movs	r1, #13
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fe31 	bl	80011d6 <max30102_write>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	9999999a 	.word	0x9999999a
 8001584:	3fc99999 	.word	0x3fc99999

08001588 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	70fb      	strb	r3, [r7, #3]
 800159a:	460b      	mov	r3, r1
 800159c:	70bb      	strb	r3, [r7, #2]
 800159e:	4613      	mov	r3, r2
 80015a0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	b25a      	sxtb	r2, r3
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80015b8:	78bb      	ldrb	r3, [r7, #2]
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80015d0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 80015e6:	f107 020f 	add.w	r2, r7, #15
 80015ea:	2301      	movs	r3, #1
 80015ec:	2108      	movs	r1, #8
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fdf1 	bl	80011d6 <max30102_write>
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001608:	f107 020f 	add.w	r2, r7, #15
 800160c:	2303      	movs	r3, #3
 800160e:	2104      	movs	r1, #4
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fde0 	bl	80011d6 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8001616:	f107 020f 	add.w	r2, r7, #15
 800161a:	2303      	movs	r3, #3
 800161c:	2106      	movs	r1, #6
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fdd9 	bl	80011d6 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8001624:	f107 020f 	add.w	r2, r7, #15
 8001628:	2303      	movs	r3, #3
 800162a:	2105      	movs	r1, #5
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fdd2 	bl	80011d6 <max30102_write>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b088      	sub	sp, #32
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	74fb      	strb	r3, [r7, #19]
 8001646:	2300      	movs	r3, #0
 8001648:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800164a:	f107 0213 	add.w	r2, r7, #19
 800164e:	2301      	movs	r3, #1
 8001650:	2104      	movs	r1, #4
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fdf3 	bl	800123e <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8001658:	f107 0212 	add.w	r2, r7, #18
 800165c:	2301      	movs	r3, #1
 800165e:	2106      	movs	r1, #6
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fdec 	bl	800123e <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8001666:	7cfa      	ldrb	r2, [r7, #19]
 8001668:	7cbb      	ldrb	r3, [r7, #18]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8001670:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001674:	2b00      	cmp	r3, #0
 8001676:	dc03      	bgt.n	8001680 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001678:	7ffb      	ldrb	r3, [r7, #31]
 800167a:	3320      	adds	r3, #32
 800167c:	b2db      	uxtb	r3, r3
 800167e:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001680:	2300      	movs	r3, #0
 8001682:	77bb      	strb	r3, [r7, #30]
 8001684:	e035      	b.n	80016f2 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8001686:	f107 020c 	add.w	r2, r7, #12
 800168a:	2306      	movs	r3, #6
 800168c:	2107      	movs	r1, #7
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fdd5 	bl	800123e <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	461a      	mov	r2, r3
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	4313      	orrs	r3, r2
 80016a0:	7bba      	ldrb	r2, [r7, #14]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80016a8:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	461a      	mov	r2, r3
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4313      	orrs	r3, r2
 80016b6:	7c7a      	ldrb	r2, [r7, #17]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80016be:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 80016c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	3320      	adds	r3, #32
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 80016de:	6979      	ldr	r1, [r7, #20]
 80016e0:	69b8      	ldr	r0, [r7, #24]
 80016e2:	f7ff fb67 	bl	8000db4 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 80016e6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	77bb      	strb	r3, [r7, #30]
 80016f2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80016f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dbc3      	blt.n	8001686 <max30102_read_fifo+0x4c>
    }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001714:	2301      	movs	r3, #1
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	211f      	movs	r1, #31
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fd8f 	bl	800123e <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8001720:	2301      	movs	r3, #1
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	2120      	movs	r1, #32
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fd89 	bl	800123e <max30102_read>
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_MspInit+0x4c>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001772:	2007      	movs	r0, #7
 8001774:	f000 fb38 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_I2C_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12c      	bne.n	8001800 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c8:	2312      	movs	r3, #18
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d4:	2304      	movs	r3, #4
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <HAL_I2C_MspInit+0x8c>)
 80017e0:	f000 fbd6 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_I2C_MspInit+0x88>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40005400 	.word	0x40005400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020400 	.word	0x40020400

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_UART_MspInit+0xf8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d135      	bne.n	80018a2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_UART_MspInit+0xfc>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_UART_MspInit+0xfc>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_UART_MspInit+0xfc>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001880:	2307      	movs	r3, #7
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4822      	ldr	r0, [pc, #136]	; (8001914 <HAL_UART_MspInit+0x100>)
 800188c:	f000 fb80 	bl	8001f90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f000 fab2 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800189a:	2025      	movs	r0, #37	; 0x25
 800189c:	f000 facb 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a0:	e030      	b.n	8001904 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_UART_MspInit+0x104>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d12b      	bne.n	8001904 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6313      	str	r3, [r2, #48]	; 0x30
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_UART_MspInit+0xfc>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018e4:	230c      	movs	r3, #12
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f4:	2307      	movs	r3, #7
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_UART_MspInit+0x100>)
 8001900:	f000 fb46 	bl	8001f90 <HAL_GPIO_Init>
}
 8001904:	bf00      	nop
 8001906:	3730      	adds	r7, #48	; 0x30
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40011000 	.word	0x40011000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40004400 	.word	0x40004400

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f94e 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001974:	2001      	movs	r0, #1
 8001976:	f000 fcb9 	bl	80022ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <USART1_IRQHandler+0x10>)
 8001986:	f002 fb93 	bl	80040b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200000d8 	.word	0x200000d8

08001994 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800199c:	f000 fca6 	bl	80022ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00a      	b.n	80019cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b6:	f3af 8000 	nop.w
 80019ba:	4601      	mov	r1, r0
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf0      	blt.n	80019b6 <_read+0x12>
  }

  return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e009      	b.n	8001a04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f9c5 	bl	8000d88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf1      	blt.n	80019f0 <_write+0x12>
  }
  return len;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_close>:

int _close(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_isatty>:

int _isatty(int file)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f003 fc56 	bl	8005360 <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20020000 	.word	0x20020000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	20000270 	.word	0x20000270
 8001ae8:	200003c8 	.word	0x200003c8

08001aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b14:	f7ff ffea 	bl	8001aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	; (8001b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	; (8001b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f003 fc15 	bl	800536c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff f947 	bl	8000dd4 <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b54:	08005e28 	.word	0x08005e28
  ldr r2, =_sbss
 8001b58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b5c:	200003c4 	.word	0x200003c4

08001b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <HAL_Init+0x40>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_Init+0x40>)
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x40>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 f92b 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff fdcc 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f943 	bl	8001e52 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f90b 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000274 	.word	0x20000274

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000274 	.word	0x20000274

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff feda 	bl	8001c30 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d008      	beq.n	8001e9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e052      	b.n	8001f42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0216 	bic.w	r2, r2, #22
 8001eaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <HAL_DMA_Abort+0x62>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0208 	bic.w	r2, r2, #8
 8001eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eec:	e013      	b.n	8001f16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eee:	f7ff fe9f 	bl	8001c30 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d90c      	bls.n	8001f16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2203      	movs	r2, #3
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e015      	b.n	8001f42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e4      	bne.n	8001eee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	223f      	movs	r2, #63	; 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e00c      	b.n	8001f82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e165      	b.n	8002278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8154 	bne.w	8002272 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80ae 	beq.w	8002272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_GPIO_Init+0x300>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a5c      	ldr	r2, [pc, #368]	; (8002290 <HAL_GPIO_Init+0x300>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_GPIO_Init+0x300>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_GPIO_Init+0x304>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4f      	ldr	r2, [pc, #316]	; (8002298 <HAL_GPIO_Init+0x308>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d025      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4e      	ldr	r2, [pc, #312]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4d      	ldr	r2, [pc, #308]	; (80022a0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d019      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4c      	ldr	r2, [pc, #304]	; (80022a4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4b      	ldr	r2, [pc, #300]	; (80022a8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_GPIO_Init+0x20a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <HAL_GPIO_Init+0x206>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_GPIO_Init+0x202>
 800218e:	2306      	movs	r3, #6
 8002190:	e00c      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 8002192:	2307      	movs	r3, #7
 8002194:	e00a      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 8002196:	2305      	movs	r3, #5
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	; (8002294 <HAL_GPIO_Init+0x304>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <HAL_GPIO_Init+0x324>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_GPIO_Init+0x324>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_GPIO_Init+0x324>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_GPIO_Init+0x324>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_GPIO_Init+0x324>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f ae96 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021800 	.word	0x40021800
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f806 	bl	800231c <HAL_GPIO_EXTI_Callback>
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e12b      	b.n	800259e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fa12 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002398:	f001 f8b8 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a81      	ldr	r2, [pc, #516]	; (80025a8 <HAL_I2C_Init+0x274>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d807      	bhi.n	80023b8 <HAL_I2C_Init+0x84>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a80      	ldr	r2, [pc, #512]	; (80025ac <HAL_I2C_Init+0x278>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e006      	b.n	80023c6 <HAL_I2C_Init+0x92>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a7d      	ldr	r2, [pc, #500]	; (80025b0 <HAL_I2C_Init+0x27c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0e7      	b.n	800259e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a78      	ldr	r2, [pc, #480]	; (80025b4 <HAL_I2C_Init+0x280>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9b      	lsrs	r3, r3, #18
 80023d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_I2C_Init+0x274>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d802      	bhi.n	8002408 <HAL_I2C_Init+0xd4>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3301      	adds	r3, #1
 8002406:	e009      	b.n	800241c <HAL_I2C_Init+0xe8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_I2C_Init+0x284>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	3301      	adds	r3, #1
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	495c      	ldr	r1, [pc, #368]	; (80025a8 <HAL_I2C_Init+0x274>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d819      	bhi.n	8002470 <HAL_I2C_Init+0x13c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e59      	subs	r1, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fbb1 f3f3 	udiv	r3, r1, r3
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002450:	400b      	ands	r3, r1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_I2C_Init+0x138>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e59      	subs	r1, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fbb1 f3f3 	udiv	r3, r1, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246a:	e051      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 800246c:	2304      	movs	r3, #4
 800246e:	e04f      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <HAL_I2C_Init+0x168>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e012      	b.n	80024c2 <HAL_I2C_Init+0x18e>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e58      	subs	r0, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	0099      	lsls	r1, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Init+0x196>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e022      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10e      	bne.n	80024f0 <HAL_I2C_Init+0x1bc>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e58      	subs	r0, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	440b      	add	r3, r1
 80024e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	e00f      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	0099      	lsls	r1, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	6809      	ldr	r1, [r1, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800253e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6911      	ldr	r1, [r2, #16]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	000186a0 	.word	0x000186a0
 80025ac:	001e847f 	.word	0x001e847f
 80025b0:	003d08ff 	.word	0x003d08ff
 80025b4:	431bde83 	.word	0x431bde83
 80025b8:	10624dd3 	.word	0x10624dd3

080025bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	461a      	mov	r2, r3
 80025c8:	460b      	mov	r3, r1
 80025ca:	817b      	strh	r3, [r7, #10]
 80025cc:	4613      	mov	r3, r2
 80025ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff fb2e 	bl	8001c30 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	f040 80e0 	bne.w	80027a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2319      	movs	r3, #25
 80025ea:	2201      	movs	r2, #1
 80025ec:	4970      	ldr	r1, [pc, #448]	; (80027b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fc64 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0d3      	b.n	80027a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_I2C_Master_Transmit+0x50>
 8002608:	2302      	movs	r3, #2
 800260a:	e0cc      	b.n	80027a6 <HAL_I2C_Master_Transmit+0x1ea>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d007      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2221      	movs	r2, #33	; 0x21
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2210      	movs	r2, #16
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	893a      	ldrh	r2, [r7, #8]
 8002662:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a50      	ldr	r2, [pc, #320]	; (80027b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 face 	bl	8002c1c <I2C_MasterRequestWrite>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e08d      	b.n	80027a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026a0:	e066      	b.n	8002770 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fd22 	bl	80030f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d11b      	bne.n	8002744 <HAL_I2C_Master_Transmit+0x188>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d017      	beq.n	8002744 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	6a39      	ldr	r1, [r7, #32]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fd19 	bl	8003180 <I2C_WaitOnBTFFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2b04      	cmp	r3, #4
 800275a:	d107      	bne.n	800276c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e01a      	b.n	80027a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d194      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	00100002 	.word	0x00100002
 80027b4:	ffff0000 	.word	0xffff0000

080027b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	461a      	mov	r2, r3
 80027c4:	460b      	mov	r3, r1
 80027c6:	817b      	strh	r3, [r7, #10]
 80027c8:	4613      	mov	r3, r2
 80027ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff fa30 	bl	8001c30 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	f040 8217 	bne.w	8002c0e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2319      	movs	r3, #25
 80027e6:	2201      	movs	r2, #1
 80027e8:	497c      	ldr	r1, [pc, #496]	; (80029dc <HAL_I2C_Master_Receive+0x224>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fb66 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	e20a      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_I2C_Master_Receive+0x50>
 8002804:	2302      	movs	r3, #2
 8002806:	e203      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d007      	beq.n	800282e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2222      	movs	r2, #34	; 0x22
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2210      	movs	r2, #16
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a5c      	ldr	r2, [pc, #368]	; (80029e0 <HAL_I2C_Master_Receive+0x228>)
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa52 	bl	8002d20 <I2C_MasterRequestRead>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c4      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d113      	bne.n	80028b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	623b      	str	r3, [r7, #32]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e198      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d11b      	bne.n	80028f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e178      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d11b      	bne.n	8002936 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	e158      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800295c:	e144      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	2b03      	cmp	r3, #3
 8002964:	f200 80f1 	bhi.w	8002b4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b01      	cmp	r3, #1
 800296e:	d123      	bne.n	80029b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fc4b 	bl	8003210 <I2C_WaitOnRXNEFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e145      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b6:	e117      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d14e      	bne.n	8002a5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	2200      	movs	r2, #0
 80029c8:	4906      	ldr	r1, [pc, #24]	; (80029e4 <HAL_I2C_Master_Receive+0x22c>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fa76 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e11a      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
 80029da:	bf00      	nop
 80029dc:	00100002 	.word	0x00100002
 80029e0:	ffff0000 	.word	0xffff0000
 80029e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a5c:	e0c4      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	2200      	movs	r2, #0
 8002a66:	496c      	ldr	r1, [pc, #432]	; (8002c18 <HAL_I2C_Master_Receive+0x460>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fa27 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0cb      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4955      	ldr	r1, [pc, #340]	; (8002c18 <HAL_I2C_Master_Receive+0x460>)
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f9f9 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e09d      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b48:	e04e      	b.n	8002be8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fb5e 	bl	8003210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e058      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d124      	bne.n	8002be8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f aeb6 	bne.w	800295e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	00010004 	.word	0x00010004

08002c1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d006      	beq.n	8002c46 <I2C_MasterRequestWrite+0x2a>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d003      	beq.n	8002c46 <I2C_MasterRequestWrite+0x2a>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c44:	d108      	bne.n	8002c58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e00b      	b.n	8002c70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	2b12      	cmp	r3, #18
 8002c5e:	d107      	bne.n	8002c70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f91d 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00d      	beq.n	8002ca4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c96:	d103      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e035      	b.n	8002d10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cac:	d108      	bne.n	8002cc0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	e01b      	b.n	8002cf8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cc0:	897b      	ldrh	r3, [r7, #10]
 8002cc2:	11db      	asrs	r3, r3, #7
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f003 0306 	and.w	r3, r3, #6
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f063 030f 	orn	r3, r3, #15
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	490e      	ldr	r1, [pc, #56]	; (8002d18 <I2C_MasterRequestWrite+0xfc>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f966 	bl	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e010      	b.n	8002d10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4907      	ldr	r1, [pc, #28]	; (8002d1c <I2C_MasterRequestWrite+0x100>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f956 	bl	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00010008 	.word	0x00010008
 8002d1c:	00010002 	.word	0x00010002

08002d20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d006      	beq.n	8002d5a <I2C_MasterRequestRead+0x3a>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d003      	beq.n	8002d5a <I2C_MasterRequestRead+0x3a>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00b      	b.n	8002d84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d107      	bne.n	8002d84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f893 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002daa:	d103      	bne.n	8002db4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e079      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc0:	d108      	bne.n	8002dd4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	e05f      	b.n	8002e94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	11db      	asrs	r3, r3, #7
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f063 030f 	orn	r3, r3, #15
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4930      	ldr	r1, [pc, #192]	; (8002eb4 <I2C_MasterRequestRead+0x194>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8dc 	bl	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e054      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e02:	897b      	ldrh	r3, [r7, #10]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4929      	ldr	r1, [pc, #164]	; (8002eb8 <I2C_MasterRequestRead+0x198>)
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f8cc 	bl	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e044      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f831 	bl	8002ebc <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e6e:	d103      	bne.n	8002e78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e017      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	11db      	asrs	r3, r3, #7
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0306 	and.w	r3, r3, #6
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f063 030e 	orn	r3, r3, #14
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4907      	ldr	r1, [pc, #28]	; (8002eb8 <I2C_MasterRequestRead+0x198>)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f888 	bl	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00010008 	.word	0x00010008
 8002eb8:	00010002 	.word	0x00010002

08002ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ecc:	e048      	b.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d044      	beq.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7fe feab 	bl	8001c30 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d139      	bne.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10d      	bne.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	e00c      	b.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d116      	bne.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e023      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10d      	bne.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	e00c      	b.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d093      	beq.n	8002ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	e071      	b.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d123      	bne.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e067      	b.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d041      	beq.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe fe06 	bl	8001c30 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d136      	bne.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4013      	ands	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e00b      	b.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e021      	b.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10c      	bne.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e00b      	b.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f af6d 	bne.w	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fc:	e034      	b.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f8e3 	bl	80032ca <I2C_IsAcknowledgeFailed>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e034      	b.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d028      	beq.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe fd8b 	bl	8001c30 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11d      	bne.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d016      	beq.n	8003168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d1c3      	bne.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800318c:	e034      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f89b 	bl	80032ca <I2C_IsAcknowledgeFailed>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e034      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d028      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe fd43 	bl	8001c30 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11d      	bne.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d016      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d1c3      	bne.n	800318e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321c:	e049      	b.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b10      	cmp	r3, #16
 800322a:	d119      	bne.n	8003260 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0210 	mvn.w	r2, #16
 8003234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e030      	b.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003260:	f7fe fce6 	bl	8001c30 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d11d      	bne.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d016      	beq.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e007      	b.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d1ae      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d11b      	bne.n	800331a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0cc      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d90c      	bls.n	8003364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a58      	ldr	r2, [pc, #352]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d044      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d119      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e06f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e067      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4934      	ldr	r1, [pc, #208]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fe fc0a 	bl	8001c30 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe fc06 	bl	8001c30 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e04f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d20c      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f855 	bl	800355c <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fb6a 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40023c00 	.word	0x40023c00
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08005dcc 	.word	0x08005dcc
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_GetHCLKFreq+0x14>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000000 	.word	0x20000000

0800350c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003510:	f7ff fff0 	bl	80034f4 <HAL_RCC_GetHCLKFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	0a9b      	lsrs	r3, r3, #10
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4903      	ldr	r1, [pc, #12]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40023800 	.word	0x40023800
 8003530:	08005ddc 	.word	0x08005ddc

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003538:	f7ff ffdc 	bl	80034f4 <HAL_RCC_GetHCLKFreq>
 800353c:	4602      	mov	r2, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0b5b      	lsrs	r3, r3, #13
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4903      	ldr	r1, [pc, #12]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354a:	5ccb      	ldrb	r3, [r1, r3]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40023800 	.word	0x40023800
 8003558:	08005ddc 	.word	0x08005ddc

0800355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003560:	b0ae      	sub	sp, #184	; 0xb8
 8003562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003582:	4bcb      	ldr	r3, [pc, #812]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b0c      	cmp	r3, #12
 800358c:	f200 8206 	bhi.w	800399c <HAL_RCC_GetSysClockFreq+0x440>
 8003590:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003596:	bf00      	nop
 8003598:	080035cd 	.word	0x080035cd
 800359c:	0800399d 	.word	0x0800399d
 80035a0:	0800399d 	.word	0x0800399d
 80035a4:	0800399d 	.word	0x0800399d
 80035a8:	080035d5 	.word	0x080035d5
 80035ac:	0800399d 	.word	0x0800399d
 80035b0:	0800399d 	.word	0x0800399d
 80035b4:	0800399d 	.word	0x0800399d
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	0800399d 	.word	0x0800399d
 80035c0:	0800399d 	.word	0x0800399d
 80035c4:	0800399d 	.word	0x0800399d
 80035c8:	080037cd 	.word	0x080037cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4bb9      	ldr	r3, [pc, #740]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80035ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80035d2:	e1e7      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d4:	4bb8      	ldr	r3, [pc, #736]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80035d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035da:	e1e3      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4bb4      	ldr	r3, [pc, #720]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e8:	4bb1      	ldr	r3, [pc, #708]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d071      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f4:	4bae      	ldr	r3, [pc, #696]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003600:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800361a:	4622      	mov	r2, r4
 800361c:	462b      	mov	r3, r5
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	0159      	lsls	r1, r3, #5
 8003628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362c:	0150      	lsls	r0, r2, #5
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4621      	mov	r1, r4
 8003634:	1a51      	subs	r1, r2, r1
 8003636:	6439      	str	r1, [r7, #64]	; 0x40
 8003638:	4629      	mov	r1, r5
 800363a:	eb63 0301 	sbc.w	r3, r3, r1
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800364c:	4649      	mov	r1, r9
 800364e:	018b      	lsls	r3, r1, #6
 8003650:	4641      	mov	r1, r8
 8003652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003656:	4641      	mov	r1, r8
 8003658:	018a      	lsls	r2, r1, #6
 800365a:	4641      	mov	r1, r8
 800365c:	1a51      	subs	r1, r2, r1
 800365e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003660:	4649      	mov	r1, r9
 8003662:	eb63 0301 	sbc.w	r3, r3, r1
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003674:	4649      	mov	r1, r9
 8003676:	00cb      	lsls	r3, r1, #3
 8003678:	4641      	mov	r1, r8
 800367a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367e:	4641      	mov	r1, r8
 8003680:	00ca      	lsls	r2, r1, #3
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	4603      	mov	r3, r0
 8003688:	4622      	mov	r2, r4
 800368a:	189b      	adds	r3, r3, r2
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
 800368e:	462b      	mov	r3, r5
 8003690:	460a      	mov	r2, r1
 8003692:	eb42 0303 	adc.w	r3, r2, r3
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036a4:	4629      	mov	r1, r5
 80036a6:	024b      	lsls	r3, r1, #9
 80036a8:	4621      	mov	r1, r4
 80036aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036ae:	4621      	mov	r1, r4
 80036b0:	024a      	lsls	r2, r1, #9
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80036c8:	f7fd f9e0 	bl	8000a8c <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4613      	mov	r3, r2
 80036d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036d6:	e067      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d8:	4b75      	ldr	r3, [pc, #468]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80036e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f2:	2300      	movs	r3, #0
 80036f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80036fa:	4622      	mov	r2, r4
 80036fc:	462b      	mov	r3, r5
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	0159      	lsls	r1, r3, #5
 8003708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800370c:	0150      	lsls	r0, r2, #5
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4621      	mov	r1, r4
 8003714:	1a51      	subs	r1, r2, r1
 8003716:	62b9      	str	r1, [r7, #40]	; 0x28
 8003718:	4629      	mov	r1, r5
 800371a:	eb63 0301 	sbc.w	r3, r3, r1
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800372c:	4649      	mov	r1, r9
 800372e:	018b      	lsls	r3, r1, #6
 8003730:	4641      	mov	r1, r8
 8003732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003736:	4641      	mov	r1, r8
 8003738:	018a      	lsls	r2, r1, #6
 800373a:	4641      	mov	r1, r8
 800373c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003740:	4649      	mov	r1, r9
 8003742:	eb63 0b01 	sbc.w	fp, r3, r1
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003752:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375a:	4692      	mov	sl, r2
 800375c:	469b      	mov	fp, r3
 800375e:	4623      	mov	r3, r4
 8003760:	eb1a 0303 	adds.w	r3, sl, r3
 8003764:	623b      	str	r3, [r7, #32]
 8003766:	462b      	mov	r3, r5
 8003768:	eb4b 0303 	adc.w	r3, fp, r3
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800377a:	4629      	mov	r1, r5
 800377c:	028b      	lsls	r3, r1, #10
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003784:	4621      	mov	r1, r4
 8003786:	028a      	lsls	r2, r1, #10
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003790:	2200      	movs	r2, #0
 8003792:	673b      	str	r3, [r7, #112]	; 0x70
 8003794:	677a      	str	r2, [r7, #116]	; 0x74
 8003796:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800379a:	f7fd f977 	bl	8000a8c <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4613      	mov	r3, r2
 80037a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	3301      	adds	r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80037ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037ca:	e0eb      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d8:	4b35      	ldr	r3, [pc, #212]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d06b      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e4:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	2200      	movs	r2, #0
 80037ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f6:	663b      	str	r3, [r7, #96]	; 0x60
 80037f8:	2300      	movs	r3, #0
 80037fa:	667b      	str	r3, [r7, #100]	; 0x64
 80037fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003800:	4622      	mov	r2, r4
 8003802:	462b      	mov	r3, r5
 8003804:	f04f 0000 	mov.w	r0, #0
 8003808:	f04f 0100 	mov.w	r1, #0
 800380c:	0159      	lsls	r1, r3, #5
 800380e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003812:	0150      	lsls	r0, r2, #5
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4621      	mov	r1, r4
 800381a:	1a51      	subs	r1, r2, r1
 800381c:	61b9      	str	r1, [r7, #24]
 800381e:	4629      	mov	r1, r5
 8003820:	eb63 0301 	sbc.w	r3, r3, r1
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003832:	4659      	mov	r1, fp
 8003834:	018b      	lsls	r3, r1, #6
 8003836:	4651      	mov	r1, sl
 8003838:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383c:	4651      	mov	r1, sl
 800383e:	018a      	lsls	r2, r1, #6
 8003840:	4651      	mov	r1, sl
 8003842:	ebb2 0801 	subs.w	r8, r2, r1
 8003846:	4659      	mov	r1, fp
 8003848:	eb63 0901 	sbc.w	r9, r3, r1
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003858:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003860:	4690      	mov	r8, r2
 8003862:	4699      	mov	r9, r3
 8003864:	4623      	mov	r3, r4
 8003866:	eb18 0303 	adds.w	r3, r8, r3
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	462b      	mov	r3, r5
 800386e:	eb49 0303 	adc.w	r3, r9, r3
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003880:	4629      	mov	r1, r5
 8003882:	024b      	lsls	r3, r1, #9
 8003884:	4621      	mov	r1, r4
 8003886:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800388a:	4621      	mov	r1, r4
 800388c:	024a      	lsls	r2, r1, #9
 800388e:	4610      	mov	r0, r2
 8003890:	4619      	mov	r1, r3
 8003892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003896:	2200      	movs	r2, #0
 8003898:	65bb      	str	r3, [r7, #88]	; 0x58
 800389a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800389c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038a0:	f7fd f8f4 	bl	8000a8c <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ae:	e065      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x420>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038bc:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	2200      	movs	r2, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	4611      	mov	r1, r2
 80038c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038cc:	653b      	str	r3, [r7, #80]	; 0x50
 80038ce:	2300      	movs	r3, #0
 80038d0:	657b      	str	r3, [r7, #84]	; 0x54
 80038d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80038d6:	4642      	mov	r2, r8
 80038d8:	464b      	mov	r3, r9
 80038da:	f04f 0000 	mov.w	r0, #0
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	0159      	lsls	r1, r3, #5
 80038e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e8:	0150      	lsls	r0, r2, #5
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4641      	mov	r1, r8
 80038f0:	1a51      	subs	r1, r2, r1
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	4649      	mov	r1, r9
 80038f6:	eb63 0301 	sbc.w	r3, r3, r1
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003908:	4659      	mov	r1, fp
 800390a:	018b      	lsls	r3, r1, #6
 800390c:	4651      	mov	r1, sl
 800390e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003912:	4651      	mov	r1, sl
 8003914:	018a      	lsls	r2, r1, #6
 8003916:	4651      	mov	r1, sl
 8003918:	1a54      	subs	r4, r2, r1
 800391a:	4659      	mov	r1, fp
 800391c:	eb63 0501 	sbc.w	r5, r3, r1
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	00eb      	lsls	r3, r5, #3
 800392a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800392e:	00e2      	lsls	r2, r4, #3
 8003930:	4614      	mov	r4, r2
 8003932:	461d      	mov	r5, r3
 8003934:	4643      	mov	r3, r8
 8003936:	18e3      	adds	r3, r4, r3
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	464b      	mov	r3, r9
 800393c:	eb45 0303 	adc.w	r3, r5, r3
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800394e:	4629      	mov	r1, r5
 8003950:	028b      	lsls	r3, r1, #10
 8003952:	4621      	mov	r1, r4
 8003954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003958:	4621      	mov	r1, r4
 800395a:	028a      	lsls	r2, r1, #10
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003964:	2200      	movs	r2, #0
 8003966:	64bb      	str	r3, [r7, #72]	; 0x48
 8003968:	64fa      	str	r2, [r7, #76]	; 0x4c
 800396a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800396e:	f7fd f88d 	bl	8000a8c <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4613      	mov	r3, r2
 8003978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0f1b      	lsrs	r3, r3, #28
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800398a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800398e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800399a:	e003      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800399e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	37b8      	adds	r7, #184	; 0xb8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800
 80039b8:	00f42400 	.word	0x00f42400

080039bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e28d      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8083 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039dc:	4b94      	ldr	r3, [pc, #592]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d019      	beq.n	8003a1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039e8:	4b91      	ldr	r3, [pc, #580]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039f4:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a00:	d00c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b8b      	ldr	r3, [pc, #556]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d112      	bne.n	8003a34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b84      	ldr	r3, [pc, #528]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x124>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d157      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e25a      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x90>
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xcc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xb4>
 8003a56:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xcc>
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6b      	ldr	r2, [pc, #428]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe f8ce 	bl	8001c30 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe f8ca 	bl	8001c30 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e21f      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xdc>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f8ba 	bl	8001c30 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe f8b6 	bl	8001c30 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e20b      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b57      	ldr	r3, [pc, #348]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x104>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d06f      	beq.n	8003bce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aee:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d017      	beq.n	8003b2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003afa:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b06:	4b4a      	ldr	r3, [pc, #296]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d11c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1e:	4b44      	ldr	r3, [pc, #272]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d116      	bne.n	8003b58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x186>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1d3      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4937      	ldr	r1, [pc, #220]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	e03a      	b.n	8003bce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b60:	4b34      	ldr	r3, [pc, #208]	; (8003c34 <HAL_RCC_OscConfig+0x278>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fe f863 	bl	8001c30 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7fe f85f 	bl	8001c30 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e1b4      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4925      	ldr	r1, [pc, #148]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	e015      	b.n	8003bce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_OscConfig+0x278>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f842 	bl	8001c30 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7fe f83e 	bl	8001c30 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e193      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d036      	beq.n	8003c48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d016      	beq.n	8003c10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_RCC_OscConfig+0x27c>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fe f822 	bl	8001c30 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fe f81e 	bl	8001c30 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e173      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <HAL_RCC_OscConfig+0x274>)
 8003c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x234>
 8003c0e:	e01b      	b.n	8003c48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fe f80b 	bl	8001c30 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	e00e      	b.n	8003c3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fe f807 	bl	8001c30 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d907      	bls.n	8003c3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e15c      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
 8003c30:	40023800 	.word	0x40023800
 8003c34:	42470000 	.word	0x42470000
 8003c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	4b8a      	ldr	r3, [pc, #552]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ea      	bne.n	8003c1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8097 	beq.w	8003d84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5a:	4b83      	ldr	r3, [pc, #524]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
 8003c76:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	4b79      	ldr	r3, [pc, #484]	; (8003e6c <HAL_RCC_OscConfig+0x4b0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d118      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c92:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCC_OscConfig+0x4b0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_RCC_OscConfig+0x4b0>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd ffc7 	bl	8001c30 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca6:	f7fd ffc3 	bl	8001c30 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e118      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	4b6c      	ldr	r3, [pc, #432]	; (8003e6c <HAL_RCC_OscConfig+0x4b0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x31e>
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd8:	e01c      	b.n	8003d14 <HAL_RCC_OscConfig+0x358>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x340>
 8003ce2:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a60      	ldr	r2, [pc, #384]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6713      	str	r3, [r2, #112]	; 0x70
 8003cee:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	4a5d      	ldr	r2, [pc, #372]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0x358>
 8003cfc:	4b5a      	ldr	r3, [pc, #360]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a59      	ldr	r2, [pc, #356]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
 8003d08:	4b57      	ldr	r3, [pc, #348]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a56      	ldr	r2, [pc, #344]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d0e:	f023 0304 	bic.w	r3, r3, #4
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fd ff88 	bl	8001c30 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fd ff84 	bl	8001c30 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e0d7      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ee      	beq.n	8003d24 <HAL_RCC_OscConfig+0x368>
 8003d46:	e014      	b.n	8003d72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd ff72 	bl	8001c30 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fd ff6e 	bl	8001c30 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0c1      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1ee      	bne.n	8003d50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	4a3a      	ldr	r2, [pc, #232]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80ad 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d060      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d145      	bne.n	8003e2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_RCC_OscConfig+0x4b4>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd ff42 	bl	8001c30 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fd ff3e 	bl	8001c30 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e093      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	3b01      	subs	r3, #1
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	071b      	lsls	r3, r3, #28
 8003dfa:	491b      	ldr	r1, [pc, #108]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x4b4>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd ff13 	bl	8001c30 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd ff0f 	bl	8001c30 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e064      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCC_OscConfig+0x452>
 8003e2c:	e05c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCC_OscConfig+0x4b4>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd fefc 	bl	8001c30 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3c:	f7fd fef8 	bl	8001c30 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e04d      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_OscConfig+0x4ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x480>
 8003e5a:	e045      	b.n	8003ee8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e040      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e74:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <HAL_RCC_OscConfig+0x538>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d030      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d129      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d122      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d119      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10f      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e042      	b.n	8003f90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd fc78 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fd69 	bl	8004a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d175      	bne.n	80040a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Transmit+0x2c>
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e06e      	b.n	80040a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2221      	movs	r2, #33	; 0x21
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd6:	f7fd fe2b 	bl	8001c30 <HAL_GetTick>
 8003fda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d108      	bne.n	8004004 <HAL_UART_Transmit+0x6c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e003      	b.n	800400c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800400c:	e02e      	b.n	800406c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fb05 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e03a      	b.n	80040a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004044:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3302      	adds	r3, #2
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	e007      	b.n	800405e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1cb      	bne.n	800400e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	2140      	movs	r1, #64	; 0x40
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fad1 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e006      	b.n	80040a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b0ba      	sub	sp, #232	; 0xe8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10f      	bne.n	8004116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_UART_IRQHandler+0x66>
 8004102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fbc2 	bl	8004898 <UART_Receive_IT>
      return;
 8004114:	e25b      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80de 	beq.w	80042dc <HAL_UART_IRQHandler+0x22c>
 8004120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80d1 	beq.w	80042dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_UART_IRQHandler+0xae>
 8004146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f043 0201 	orr.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_UART_IRQHandler+0xd2>
 800416a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f043 0202 	orr.w	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_UART_IRQHandler+0xf6>
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f043 0204 	orr.w	r2, r3, #4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d011      	beq.n	80041d6 <HAL_UART_IRQHandler+0x126>
 80041b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	f043 0208 	orr.w	r2, r3, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 81f2 	beq.w	80045c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_UART_IRQHandler+0x14e>
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fb4d 	bl	8004898 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_UART_IRQHandler+0x17a>
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d04f      	beq.n	80042ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa55 	bl	80046da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d141      	bne.n	80042c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800426e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1d9      	bne.n	800423e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d013      	beq.n	80042ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	4a7e      	ldr	r2, [pc, #504]	; (8004490 <HAL_UART_IRQHandler+0x3e0>)
 8004298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd fe53 	bl	8001f4a <HAL_DMA_Abort_IT>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b4:	4610      	mov	r0, r2
 80042b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b8:	e00e      	b.n	80042d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f99e 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c0:	e00a      	b.n	80042d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f99a 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	e006      	b.n	80042d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f996 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042d6:	e175      	b.n	80045c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	bf00      	nop
    return;
 80042da:	e173      	b.n	80045c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	f040 814f 	bne.w	8004584 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8148 	beq.w	8004584 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8141 	beq.w	8004584 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	f040 80b6 	bne.w	8004494 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8145 	beq.w	80045c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004346:	429a      	cmp	r2, r3
 8004348:	f080 813e 	bcs.w	80045c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435e:	f000 8088 	beq.w	8004472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800437c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800438e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800439a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1d9      	bne.n	8004362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e1      	bne.n	80043ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800440e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800441c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004454:	65ba      	str	r2, [r7, #88]	; 0x58
 8004456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800445a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e3      	bne.n	8004430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd fcfc 	bl	8001e6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	b29b      	uxth	r3, r3
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8c1 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448e:	e09b      	b.n	80045c8 <HAL_UART_IRQHandler+0x518>
 8004490:	080047a1 	.word	0x080047a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800449c:	b29b      	uxth	r3, r3
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 808e 	beq.w	80045cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8089 	beq.w	80045cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044de:	647a      	str	r2, [r7, #68]	; 0x44
 80044e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e3      	bne.n	80044ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3314      	adds	r3, #20
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	623b      	str	r3, [r7, #32]
   return(result);
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004516:	633a      	str	r2, [r7, #48]	; 0x30
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e3      	bne.n	80044f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60fb      	str	r3, [r7, #12]
   return(result);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800455c:	61fa      	str	r2, [r7, #28]
 800455e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	617b      	str	r3, [r7, #20]
   return(result);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e3      	bne.n	8004538 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f847 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004582:	e023      	b.n	80045cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_UART_IRQHandler+0x4f4>
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f913 	bl	80047c8 <UART_Transmit_IT>
    return;
 80045a2:	e014      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <HAL_UART_IRQHandler+0x51e>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f953 	bl	8004868 <UART_EndTransmit_IT>
    return;
 80045c2:	e004      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
    return;
 80045c4:	bf00      	nop
 80045c6:	e002      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
      return;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_UART_IRQHandler+0x51e>
      return;
 80045cc:	bf00      	nop
  }
}
 80045ce:	37e8      	adds	r7, #232	; 0xe8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e03b      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d037      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd faf5 	bl	8001c30 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03a      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d023      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b80      	cmp	r3, #128	; 0x80
 800466e:	d020      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d01d      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d116      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f81d 	bl	80046da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2208      	movs	r2, #8
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b4      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b095      	sub	sp, #84	; 0x54
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004702:	643a      	str	r2, [r7, #64]	; 0x40
 8004704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	61fb      	str	r3, [r7, #28]
   return(result);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d119      	bne.n	8004786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	60bb      	str	r3, [r7, #8]
   return(result);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004772:	61ba      	str	r2, [r7, #24]
 8004774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	613b      	str	r3, [r7, #16]
   return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004794:	bf00      	nop
 8004796:	3754      	adds	r7, #84	; 0x54
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ff1e 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b21      	cmp	r3, #33	; 0x21
 80047da:	d13e      	bne.n	800485a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d114      	bne.n	8004810 <UART_Transmit_IT+0x48>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d110      	bne.n	8004810 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004802:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]
 800480e:	e008      	b.n	8004822 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	1c59      	adds	r1, r3, #1
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6211      	str	r1, [r2, #32]
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29b      	uxth	r3, r3
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4619      	mov	r1, r3
 8004830:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004844:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004854:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e000      	b.n	800485c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fea3 	bl	80045d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	; 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b22      	cmp	r3, #34	; 0x22
 80048aa:	f040 80ae 	bne.w	8004a0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	d117      	bne.n	80048e8 <UART_Receive_IT+0x50>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d113      	bne.n	80048e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	; 0x28
 80048e6:	e026      	b.n	8004936 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	d007      	beq.n	800490c <UART_Receive_IT+0x74>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <UART_Receive_IT+0x82>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	e008      	b.n	800492c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	b2da      	uxtb	r2, r3
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29b      	uxth	r3, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4619      	mov	r1, r3
 8004944:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004946:	2b00      	cmp	r3, #0
 8004948:	d15d      	bne.n	8004a06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0220 	bic.w	r2, r2, #32
 8004958:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	2b01      	cmp	r3, #1
 800498e:	d135      	bne.n	80049fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	613b      	str	r3, [r7, #16]
   return(result);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f023 0310 	bic.w	r3, r3, #16
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	623a      	str	r2, [r7, #32]
 80049b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	69f9      	ldr	r1, [r7, #28]
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e5      	bne.n	8004996 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d10a      	bne.n	80049ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fe0b 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 80049fa:	e002      	b.n	8004a02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff fdf3 	bl	80045e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e002      	b.n	8004a0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3730      	adds	r7, #48	; 0x30
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b0c0      	sub	sp, #256	; 0x100
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	68d9      	ldr	r1, [r3, #12]
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	ea40 0301 	orr.w	r3, r0, r1
 8004a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a6c:	f021 010c 	bic.w	r1, r1, #12
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8e:	6999      	ldr	r1, [r3, #24]
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	ea40 0301 	orr.w	r3, r0, r1
 8004a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b8f      	ldr	r3, [pc, #572]	; (8004ce0 <UART_SetConfig+0x2cc>)
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d005      	beq.n	8004ab4 <UART_SetConfig+0xa0>
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b8d      	ldr	r3, [pc, #564]	; (8004ce4 <UART_SetConfig+0x2d0>)
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d104      	bne.n	8004abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ab4:	f7fe fd3e 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8004ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004abc:	e003      	b.n	8004ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004abe:	f7fe fd25 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 8004ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad0:	f040 810c 	bne.w	8004cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	462b      	mov	r3, r5
 8004aea:	1891      	adds	r1, r2, r2
 8004aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aee:	415b      	adcs	r3, r3
 8004af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004af6:	4621      	mov	r1, r4
 8004af8:	eb12 0801 	adds.w	r8, r2, r1
 8004afc:	4629      	mov	r1, r5
 8004afe:	eb43 0901 	adc.w	r9, r3, r1
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b16:	4690      	mov	r8, r2
 8004b18:	4699      	mov	r9, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	eb18 0303 	adds.w	r3, r8, r3
 8004b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b24:	462b      	mov	r3, r5
 8004b26:	eb49 0303 	adc.w	r3, r9, r3
 8004b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b42:	460b      	mov	r3, r1
 8004b44:	18db      	adds	r3, r3, r3
 8004b46:	653b      	str	r3, [r7, #80]	; 0x50
 8004b48:	4613      	mov	r3, r2
 8004b4a:	eb42 0303 	adc.w	r3, r2, r3
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b58:	f7fb ff98 	bl	8000a8c <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4b61      	ldr	r3, [pc, #388]	; (8004ce8 <UART_SetConfig+0x2d4>)
 8004b62:	fba3 2302 	umull	r2, r3, r3, r2
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	011c      	lsls	r4, r3, #4
 8004b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b84:	415b      	adcs	r3, r3
 8004b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb43 0b01 	adc.w	fp, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bac:	4692      	mov	sl, r2
 8004bae:	469b      	mov	fp, r3
 8004bb0:	4643      	mov	r3, r8
 8004bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8004bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8004bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	18db      	adds	r3, r3, r3
 8004bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bde:	4613      	mov	r3, r2
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	647b      	str	r3, [r7, #68]	; 0x44
 8004be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bee:	f7fb ff4d 	bl	8000a8c <__aeabi_uldivmod>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4b3b      	ldr	r3, [pc, #236]	; (8004ce8 <UART_SetConfig+0x2d4>)
 8004bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	2264      	movs	r2, #100	; 0x64
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	1acb      	subs	r3, r1, r3
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <UART_SetConfig+0x2d4>)
 8004c10:	fba3 2302 	umull	r2, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c1c:	441c      	add	r4, r3
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c40:	4641      	mov	r1, r8
 8004c42:	1851      	adds	r1, r2, r1
 8004c44:	6339      	str	r1, [r7, #48]	; 0x30
 8004c46:	4649      	mov	r1, r9
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c58:	4659      	mov	r1, fp
 8004c5a:	00cb      	lsls	r3, r1, #3
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c62:	4651      	mov	r1, sl
 8004c64:	00ca      	lsls	r2, r1, #3
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c74:	464b      	mov	r3, r9
 8004c76:	460a      	mov	r2, r1
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c94:	460b      	mov	r3, r1
 8004c96:	18db      	adds	r3, r3, r3
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004caa:	f7fb feef 	bl	8000a8c <__aeabi_uldivmod>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <UART_SetConfig+0x2d4>)
 8004cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	2164      	movs	r1, #100	; 0x64
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	3332      	adds	r3, #50	; 0x32
 8004cc6:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <UART_SetConfig+0x2d4>)
 8004cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	f003 0207 	and.w	r2, r3, #7
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4422      	add	r2, r4
 8004cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cdc:	e106      	b.n	8004eec <UART_SetConfig+0x4d8>
 8004cde:	bf00      	nop
 8004ce0:	40011000 	.word	0x40011000
 8004ce4:	40011400 	.word	0x40011400
 8004ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cfe:	4642      	mov	r2, r8
 8004d00:	464b      	mov	r3, r9
 8004d02:	1891      	adds	r1, r2, r2
 8004d04:	6239      	str	r1, [r7, #32]
 8004d06:	415b      	adcs	r3, r3
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d0e:	4641      	mov	r1, r8
 8004d10:	1854      	adds	r4, r2, r1
 8004d12:	4649      	mov	r1, r9
 8004d14:	eb43 0501 	adc.w	r5, r3, r1
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	00eb      	lsls	r3, r5, #3
 8004d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d26:	00e2      	lsls	r2, r4, #3
 8004d28:	4614      	mov	r4, r2
 8004d2a:	461d      	mov	r5, r3
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	18e3      	adds	r3, r4, r3
 8004d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d34:	464b      	mov	r3, r9
 8004d36:	eb45 0303 	adc.w	r3, r5, r3
 8004d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	008b      	lsls	r3, r1, #2
 8004d5e:	4621      	mov	r1, r4
 8004d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d64:	4621      	mov	r1, r4
 8004d66:	008a      	lsls	r2, r1, #2
 8004d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d6c:	f7fb fe8e 	bl	8000a8c <__aeabi_uldivmod>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4b60      	ldr	r3, [pc, #384]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004d76:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	011c      	lsls	r4, r3, #4
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d90:	4642      	mov	r2, r8
 8004d92:	464b      	mov	r3, r9
 8004d94:	1891      	adds	r1, r2, r2
 8004d96:	61b9      	str	r1, [r7, #24]
 8004d98:	415b      	adcs	r3, r3
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da0:	4641      	mov	r1, r8
 8004da2:	1851      	adds	r1, r2, r1
 8004da4:	6139      	str	r1, [r7, #16]
 8004da6:	4649      	mov	r1, r9
 8004da8:	414b      	adcs	r3, r1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db8:	4659      	mov	r1, fp
 8004dba:	00cb      	lsls	r3, r1, #3
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	00ca      	lsls	r2, r1, #3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4642      	mov	r2, r8
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004df8:	4649      	mov	r1, r9
 8004dfa:	008b      	lsls	r3, r1, #2
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e02:	4641      	mov	r1, r8
 8004e04:	008a      	lsls	r2, r1, #2
 8004e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e0a:	f7fb fe3f 	bl	8000a8c <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	4b38      	ldr	r3, [pc, #224]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004e16:	fba3 2301 	umull	r2, r3, r3, r1
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2264      	movs	r2, #100	; 0x64
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	1acb      	subs	r3, r1, r3
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	3332      	adds	r3, #50	; 0x32
 8004e28:	4a33      	ldr	r2, [pc, #204]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e34:	441c      	add	r4, r3
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8004e3e:	677a      	str	r2, [r7, #116]	; 0x74
 8004e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	6039      	str	r1, [r7, #0]
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	607b      	str	r3, [r7, #4]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e86:	464b      	mov	r3, r9
 8004e88:	460a      	mov	r2, r1
 8004e8a:	eb42 0303 	adc.w	r3, r2, r3
 8004e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	663b      	str	r3, [r7, #96]	; 0x60
 8004e9a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	008b      	lsls	r3, r1, #2
 8004eac:	4641      	mov	r1, r8
 8004eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	008a      	lsls	r2, r1, #2
 8004eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004eba:	f7fb fde7 	bl	8000a8c <__aeabi_uldivmod>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	2164      	movs	r1, #100	; 0x64
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	3332      	adds	r3, #50	; 0x32
 8004ed6:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	f003 020f 	and.w	r2, r3, #15
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4422      	add	r2, r4
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef8:	51eb851f 	.word	0x51eb851f

08004efc <malloc>:
 8004efc:	4b02      	ldr	r3, [pc, #8]	; (8004f08 <malloc+0xc>)
 8004efe:	4601      	mov	r1, r0
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f000 b82b 	b.w	8004f5c <_malloc_r>
 8004f06:	bf00      	nop
 8004f08:	20000064 	.word	0x20000064

08004f0c <free>:
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <free+0xc>)
 8004f0e:	4601      	mov	r1, r0
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 ba61 	b.w	80053d8 <_free_r>
 8004f16:	bf00      	nop
 8004f18:	20000064 	.word	0x20000064

08004f1c <sbrk_aligned>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4e0e      	ldr	r6, [pc, #56]	; (8004f58 <sbrk_aligned+0x3c>)
 8004f20:	460c      	mov	r4, r1
 8004f22:	6831      	ldr	r1, [r6, #0]
 8004f24:	4605      	mov	r5, r0
 8004f26:	b911      	cbnz	r1, 8004f2e <sbrk_aligned+0x12>
 8004f28:	f000 f9f8 	bl	800531c <_sbrk_r>
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 f9f3 	bl	800531c <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d00a      	beq.n	8004f50 <sbrk_aligned+0x34>
 8004f3a:	1cc4      	adds	r4, r0, #3
 8004f3c:	f024 0403 	bic.w	r4, r4, #3
 8004f40:	42a0      	cmp	r0, r4
 8004f42:	d007      	beq.n	8004f54 <sbrk_aligned+0x38>
 8004f44:	1a21      	subs	r1, r4, r0
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 f9e8 	bl	800531c <_sbrk_r>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d101      	bne.n	8004f54 <sbrk_aligned+0x38>
 8004f50:	f04f 34ff 	mov.w	r4, #4294967295
 8004f54:	4620      	mov	r0, r4
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	2000027c 	.word	0x2000027c

08004f5c <_malloc_r>:
 8004f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f60:	1ccd      	adds	r5, r1, #3
 8004f62:	f025 0503 	bic.w	r5, r5, #3
 8004f66:	3508      	adds	r5, #8
 8004f68:	2d0c      	cmp	r5, #12
 8004f6a:	bf38      	it	cc
 8004f6c:	250c      	movcc	r5, #12
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	4607      	mov	r7, r0
 8004f72:	db01      	blt.n	8004f78 <_malloc_r+0x1c>
 8004f74:	42a9      	cmp	r1, r5
 8004f76:	d905      	bls.n	8004f84 <_malloc_r+0x28>
 8004f78:	230c      	movs	r3, #12
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	4630      	mov	r0, r6
 8004f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005058 <_malloc_r+0xfc>
 8004f88:	f000 f868 	bl	800505c <__malloc_lock>
 8004f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f90:	461c      	mov	r4, r3
 8004f92:	bb5c      	cbnz	r4, 8004fec <_malloc_r+0x90>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ffc0 	bl	8004f1c <sbrk_aligned>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	d155      	bne.n	800504e <_malloc_r+0xf2>
 8004fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa6:	4626      	mov	r6, r4
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	d145      	bne.n	8005038 <_malloc_r+0xdc>
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d048      	beq.n	8005042 <_malloc_r+0xe6>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	eb04 0903 	add.w	r9, r4, r3
 8004fba:	f000 f9af 	bl	800531c <_sbrk_r>
 8004fbe:	4581      	cmp	r9, r0
 8004fc0:	d13f      	bne.n	8005042 <_malloc_r+0xe6>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1a6d      	subs	r5, r5, r1
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4638      	mov	r0, r7
 8004fca:	f7ff ffa7 	bl	8004f1c <sbrk_aligned>
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d037      	beq.n	8005042 <_malloc_r+0xe6>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	442b      	add	r3, r5
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d038      	beq.n	8005052 <_malloc_r+0xf6>
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	42a2      	cmp	r2, r4
 8004fe4:	d12b      	bne.n	800503e <_malloc_r+0xe2>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e00f      	b.n	800500c <_malloc_r+0xb0>
 8004fec:	6822      	ldr	r2, [r4, #0]
 8004fee:	1b52      	subs	r2, r2, r5
 8004ff0:	d41f      	bmi.n	8005032 <_malloc_r+0xd6>
 8004ff2:	2a0b      	cmp	r2, #11
 8004ff4:	d917      	bls.n	8005026 <_malloc_r+0xca>
 8004ff6:	1961      	adds	r1, r4, r5
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	bf18      	it	ne
 8004ffe:	6059      	strne	r1, [r3, #4]
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	bf08      	it	eq
 8005004:	f8c8 1000 	streq.w	r1, [r8]
 8005008:	5162      	str	r2, [r4, r5]
 800500a:	604b      	str	r3, [r1, #4]
 800500c:	4638      	mov	r0, r7
 800500e:	f104 060b 	add.w	r6, r4, #11
 8005012:	f000 f829 	bl	8005068 <__malloc_unlock>
 8005016:	f026 0607 	bic.w	r6, r6, #7
 800501a:	1d23      	adds	r3, r4, #4
 800501c:	1af2      	subs	r2, r6, r3
 800501e:	d0ae      	beq.n	8004f7e <_malloc_r+0x22>
 8005020:	1b9b      	subs	r3, r3, r6
 8005022:	50a3      	str	r3, [r4, r2]
 8005024:	e7ab      	b.n	8004f7e <_malloc_r+0x22>
 8005026:	42a3      	cmp	r3, r4
 8005028:	6862      	ldr	r2, [r4, #4]
 800502a:	d1dd      	bne.n	8004fe8 <_malloc_r+0x8c>
 800502c:	f8c8 2000 	str.w	r2, [r8]
 8005030:	e7ec      	b.n	800500c <_malloc_r+0xb0>
 8005032:	4623      	mov	r3, r4
 8005034:	6864      	ldr	r4, [r4, #4]
 8005036:	e7ac      	b.n	8004f92 <_malloc_r+0x36>
 8005038:	4634      	mov	r4, r6
 800503a:	6876      	ldr	r6, [r6, #4]
 800503c:	e7b4      	b.n	8004fa8 <_malloc_r+0x4c>
 800503e:	4613      	mov	r3, r2
 8005040:	e7cc      	b.n	8004fdc <_malloc_r+0x80>
 8005042:	230c      	movs	r3, #12
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4638      	mov	r0, r7
 8005048:	f000 f80e 	bl	8005068 <__malloc_unlock>
 800504c:	e797      	b.n	8004f7e <_malloc_r+0x22>
 800504e:	6025      	str	r5, [r4, #0]
 8005050:	e7dc      	b.n	800500c <_malloc_r+0xb0>
 8005052:	605b      	str	r3, [r3, #4]
 8005054:	deff      	udf	#255	; 0xff
 8005056:	bf00      	nop
 8005058:	20000278 	.word	0x20000278

0800505c <__malloc_lock>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__malloc_lock+0x8>)
 800505e:	f000 b9aa 	b.w	80053b6 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	200003c0 	.word	0x200003c0

08005068 <__malloc_unlock>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__malloc_unlock+0x8>)
 800506a:	f000 b9a5 	b.w	80053b8 <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	200003c0 	.word	0x200003c0

08005074 <std>:
 8005074:	2300      	movs	r3, #0
 8005076:	b510      	push	{r4, lr}
 8005078:	4604      	mov	r4, r0
 800507a:	e9c0 3300 	strd	r3, r3, [r0]
 800507e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005082:	6083      	str	r3, [r0, #8]
 8005084:	8181      	strh	r1, [r0, #12]
 8005086:	6643      	str	r3, [r0, #100]	; 0x64
 8005088:	81c2      	strh	r2, [r0, #14]
 800508a:	6183      	str	r3, [r0, #24]
 800508c:	4619      	mov	r1, r3
 800508e:	2208      	movs	r2, #8
 8005090:	305c      	adds	r0, #92	; 0x5c
 8005092:	f000 f906 	bl	80052a2 <memset>
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <std+0x58>)
 8005098:	6263      	str	r3, [r4, #36]	; 0x24
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <std+0x5c>)
 800509c:	62a3      	str	r3, [r4, #40]	; 0x28
 800509e:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <std+0x60>)
 80050a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <std+0x64>)
 80050a4:	6323      	str	r3, [r4, #48]	; 0x30
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <std+0x68>)
 80050a8:	6224      	str	r4, [r4, #32]
 80050aa:	429c      	cmp	r4, r3
 80050ac:	d006      	beq.n	80050bc <std+0x48>
 80050ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050b2:	4294      	cmp	r4, r2
 80050b4:	d002      	beq.n	80050bc <std+0x48>
 80050b6:	33d0      	adds	r3, #208	; 0xd0
 80050b8:	429c      	cmp	r4, r3
 80050ba:	d105      	bne.n	80050c8 <std+0x54>
 80050bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c4:	f000 b976 	b.w	80053b4 <__retarget_lock_init_recursive>
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	bf00      	nop
 80050cc:	0800521d 	.word	0x0800521d
 80050d0:	0800523f 	.word	0x0800523f
 80050d4:	08005277 	.word	0x08005277
 80050d8:	0800529b 	.word	0x0800529b
 80050dc:	20000280 	.word	0x20000280

080050e0 <stdio_exit_handler>:
 80050e0:	4a02      	ldr	r2, [pc, #8]	; (80050ec <stdio_exit_handler+0xc>)
 80050e2:	4903      	ldr	r1, [pc, #12]	; (80050f0 <stdio_exit_handler+0x10>)
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <stdio_exit_handler+0x14>)
 80050e6:	f000 b869 	b.w	80051bc <_fwalk_sglue>
 80050ea:	bf00      	nop
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	08005b25 	.word	0x08005b25
 80050f4:	20000018 	.word	0x20000018

080050f8 <cleanup_stdio>:
 80050f8:	6841      	ldr	r1, [r0, #4]
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <cleanup_stdio+0x34>)
 80050fc:	4299      	cmp	r1, r3
 80050fe:	b510      	push	{r4, lr}
 8005100:	4604      	mov	r4, r0
 8005102:	d001      	beq.n	8005108 <cleanup_stdio+0x10>
 8005104:	f000 fd0e 	bl	8005b24 <_fflush_r>
 8005108:	68a1      	ldr	r1, [r4, #8]
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <cleanup_stdio+0x38>)
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <cleanup_stdio+0x1e>
 8005110:	4620      	mov	r0, r4
 8005112:	f000 fd07 	bl	8005b24 <_fflush_r>
 8005116:	68e1      	ldr	r1, [r4, #12]
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <cleanup_stdio+0x3c>)
 800511a:	4299      	cmp	r1, r3
 800511c:	d004      	beq.n	8005128 <cleanup_stdio+0x30>
 800511e:	4620      	mov	r0, r4
 8005120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005124:	f000 bcfe 	b.w	8005b24 <_fflush_r>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	bf00      	nop
 800512c:	20000280 	.word	0x20000280
 8005130:	200002e8 	.word	0x200002e8
 8005134:	20000350 	.word	0x20000350

08005138 <global_stdio_init.part.0>:
 8005138:	b510      	push	{r4, lr}
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <global_stdio_init.part.0+0x30>)
 800513c:	4c0b      	ldr	r4, [pc, #44]	; (800516c <global_stdio_init.part.0+0x34>)
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <global_stdio_init.part.0+0x38>)
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	4620      	mov	r0, r4
 8005144:	2200      	movs	r2, #0
 8005146:	2104      	movs	r1, #4
 8005148:	f7ff ff94 	bl	8005074 <std>
 800514c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005150:	2201      	movs	r2, #1
 8005152:	2109      	movs	r1, #9
 8005154:	f7ff ff8e 	bl	8005074 <std>
 8005158:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800515c:	2202      	movs	r2, #2
 800515e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005162:	2112      	movs	r1, #18
 8005164:	f7ff bf86 	b.w	8005074 <std>
 8005168:	200003b8 	.word	0x200003b8
 800516c:	20000280 	.word	0x20000280
 8005170:	080050e1 	.word	0x080050e1

08005174 <__sfp_lock_acquire>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__sfp_lock_acquire+0x8>)
 8005176:	f000 b91e 	b.w	80053b6 <__retarget_lock_acquire_recursive>
 800517a:	bf00      	nop
 800517c:	200003c1 	.word	0x200003c1

08005180 <__sfp_lock_release>:
 8005180:	4801      	ldr	r0, [pc, #4]	; (8005188 <__sfp_lock_release+0x8>)
 8005182:	f000 b919 	b.w	80053b8 <__retarget_lock_release_recursive>
 8005186:	bf00      	nop
 8005188:	200003c1 	.word	0x200003c1

0800518c <__sinit>:
 800518c:	b510      	push	{r4, lr}
 800518e:	4604      	mov	r4, r0
 8005190:	f7ff fff0 	bl	8005174 <__sfp_lock_acquire>
 8005194:	6a23      	ldr	r3, [r4, #32]
 8005196:	b11b      	cbz	r3, 80051a0 <__sinit+0x14>
 8005198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800519c:	f7ff bff0 	b.w	8005180 <__sfp_lock_release>
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <__sinit+0x28>)
 80051a2:	6223      	str	r3, [r4, #32]
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <__sinit+0x2c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f5      	bne.n	8005198 <__sinit+0xc>
 80051ac:	f7ff ffc4 	bl	8005138 <global_stdio_init.part.0>
 80051b0:	e7f2      	b.n	8005198 <__sinit+0xc>
 80051b2:	bf00      	nop
 80051b4:	080050f9 	.word	0x080050f9
 80051b8:	200003b8 	.word	0x200003b8

080051bc <_fwalk_sglue>:
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	4607      	mov	r7, r0
 80051c2:	4688      	mov	r8, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	2600      	movs	r6, #0
 80051c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051cc:	f1b9 0901 	subs.w	r9, r9, #1
 80051d0:	d505      	bpl.n	80051de <_fwalk_sglue+0x22>
 80051d2:	6824      	ldr	r4, [r4, #0]
 80051d4:	2c00      	cmp	r4, #0
 80051d6:	d1f7      	bne.n	80051c8 <_fwalk_sglue+0xc>
 80051d8:	4630      	mov	r0, r6
 80051da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d907      	bls.n	80051f4 <_fwalk_sglue+0x38>
 80051e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051e8:	3301      	adds	r3, #1
 80051ea:	d003      	beq.n	80051f4 <_fwalk_sglue+0x38>
 80051ec:	4629      	mov	r1, r5
 80051ee:	4638      	mov	r0, r7
 80051f0:	47c0      	blx	r8
 80051f2:	4306      	orrs	r6, r0
 80051f4:	3568      	adds	r5, #104	; 0x68
 80051f6:	e7e9      	b.n	80051cc <_fwalk_sglue+0x10>

080051f8 <iprintf>:
 80051f8:	b40f      	push	{r0, r1, r2, r3}
 80051fa:	b507      	push	{r0, r1, r2, lr}
 80051fc:	4906      	ldr	r1, [pc, #24]	; (8005218 <iprintf+0x20>)
 80051fe:	ab04      	add	r3, sp, #16
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	f853 2b04 	ldr.w	r2, [r3], #4
 8005206:	6881      	ldr	r1, [r0, #8]
 8005208:	9301      	str	r3, [sp, #4]
 800520a:	f000 f95b 	bl	80054c4 <_vfiprintf_r>
 800520e:	b003      	add	sp, #12
 8005210:	f85d eb04 	ldr.w	lr, [sp], #4
 8005214:	b004      	add	sp, #16
 8005216:	4770      	bx	lr
 8005218:	20000064 	.word	0x20000064

0800521c <__sread>:
 800521c:	b510      	push	{r4, lr}
 800521e:	460c      	mov	r4, r1
 8005220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005224:	f000 f868 	bl	80052f8 <_read_r>
 8005228:	2800      	cmp	r0, #0
 800522a:	bfab      	itete	ge
 800522c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800522e:	89a3      	ldrhlt	r3, [r4, #12]
 8005230:	181b      	addge	r3, r3, r0
 8005232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005236:	bfac      	ite	ge
 8005238:	6563      	strge	r3, [r4, #84]	; 0x54
 800523a:	81a3      	strhlt	r3, [r4, #12]
 800523c:	bd10      	pop	{r4, pc}

0800523e <__swrite>:
 800523e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005242:	461f      	mov	r7, r3
 8005244:	898b      	ldrh	r3, [r1, #12]
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	4605      	mov	r5, r0
 800524a:	460c      	mov	r4, r1
 800524c:	4616      	mov	r6, r2
 800524e:	d505      	bpl.n	800525c <__swrite+0x1e>
 8005250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005254:	2302      	movs	r3, #2
 8005256:	2200      	movs	r2, #0
 8005258:	f000 f83c 	bl	80052d4 <_lseek_r>
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	4628      	mov	r0, r5
 800526e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005272:	f000 b863 	b.w	800533c <_write_r>

08005276 <__sseek>:
 8005276:	b510      	push	{r4, lr}
 8005278:	460c      	mov	r4, r1
 800527a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527e:	f000 f829 	bl	80052d4 <_lseek_r>
 8005282:	1c43      	adds	r3, r0, #1
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	bf15      	itete	ne
 8005288:	6560      	strne	r0, [r4, #84]	; 0x54
 800528a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800528e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005292:	81a3      	strheq	r3, [r4, #12]
 8005294:	bf18      	it	ne
 8005296:	81a3      	strhne	r3, [r4, #12]
 8005298:	bd10      	pop	{r4, pc}

0800529a <__sclose>:
 800529a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529e:	f000 b809 	b.w	80052b4 <_close_r>

080052a2 <memset>:
 80052a2:	4402      	add	r2, r0
 80052a4:	4603      	mov	r3, r0
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d100      	bne.n	80052ac <memset+0xa>
 80052aa:	4770      	bx	lr
 80052ac:	f803 1b01 	strb.w	r1, [r3], #1
 80052b0:	e7f9      	b.n	80052a6 <memset+0x4>
	...

080052b4 <_close_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d06      	ldr	r5, [pc, #24]	; (80052d0 <_close_r+0x1c>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fc fba9 	bl	8001a16 <_close>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_close_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_close_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	200003bc 	.word	0x200003bc

080052d4 <_lseek_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_lseek_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fc fbbe 	bl	8001a64 <_lseek>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_lseek_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_lseek_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200003bc 	.word	0x200003bc

080052f8 <_read_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d07      	ldr	r5, [pc, #28]	; (8005318 <_read_r+0x20>)
 80052fc:	4604      	mov	r4, r0
 80052fe:	4608      	mov	r0, r1
 8005300:	4611      	mov	r1, r2
 8005302:	2200      	movs	r2, #0
 8005304:	602a      	str	r2, [r5, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f7fc fb4c 	bl	80019a4 <_read>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_read_r+0x1e>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_read_r+0x1e>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	200003bc 	.word	0x200003bc

0800531c <_sbrk_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d06      	ldr	r5, [pc, #24]	; (8005338 <_sbrk_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fc fbaa 	bl	8001a80 <_sbrk>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_sbrk_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_sbrk_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200003bc 	.word	0x200003bc

0800533c <_write_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	; (800535c <_write_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fc fb47 	bl	80019de <_write>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_write_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_write_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200003bc 	.word	0x200003bc

08005360 <__errno>:
 8005360:	4b01      	ldr	r3, [pc, #4]	; (8005368 <__errno+0x8>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000064 	.word	0x20000064

0800536c <__libc_init_array>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4d0d      	ldr	r5, [pc, #52]	; (80053a4 <__libc_init_array+0x38>)
 8005370:	4c0d      	ldr	r4, [pc, #52]	; (80053a8 <__libc_init_array+0x3c>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	2600      	movs	r6, #0
 8005378:	42a6      	cmp	r6, r4
 800537a:	d109      	bne.n	8005390 <__libc_init_array+0x24>
 800537c:	4d0b      	ldr	r5, [pc, #44]	; (80053ac <__libc_init_array+0x40>)
 800537e:	4c0c      	ldr	r4, [pc, #48]	; (80053b0 <__libc_init_array+0x44>)
 8005380:	f000 fd12 	bl	8005da8 <_init>
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	2600      	movs	r6, #0
 800538a:	42a6      	cmp	r6, r4
 800538c:	d105      	bne.n	800539a <__libc_init_array+0x2e>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	f855 3b04 	ldr.w	r3, [r5], #4
 8005394:	4798      	blx	r3
 8005396:	3601      	adds	r6, #1
 8005398:	e7ee      	b.n	8005378 <__libc_init_array+0xc>
 800539a:	f855 3b04 	ldr.w	r3, [r5], #4
 800539e:	4798      	blx	r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7f2      	b.n	800538a <__libc_init_array+0x1e>
 80053a4:	08005e20 	.word	0x08005e20
 80053a8:	08005e20 	.word	0x08005e20
 80053ac:	08005e20 	.word	0x08005e20
 80053b0:	08005e24 	.word	0x08005e24

080053b4 <__retarget_lock_init_recursive>:
 80053b4:	4770      	bx	lr

080053b6 <__retarget_lock_acquire_recursive>:
 80053b6:	4770      	bx	lr

080053b8 <__retarget_lock_release_recursive>:
 80053b8:	4770      	bx	lr

080053ba <memcpy>:
 80053ba:	440a      	add	r2, r1
 80053bc:	4291      	cmp	r1, r2
 80053be:	f100 33ff 	add.w	r3, r0, #4294967295
 80053c2:	d100      	bne.n	80053c6 <memcpy+0xc>
 80053c4:	4770      	bx	lr
 80053c6:	b510      	push	{r4, lr}
 80053c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053d0:	4291      	cmp	r1, r2
 80053d2:	d1f9      	bne.n	80053c8 <memcpy+0xe>
 80053d4:	bd10      	pop	{r4, pc}
	...

080053d8 <_free_r>:
 80053d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053da:	2900      	cmp	r1, #0
 80053dc:	d044      	beq.n	8005468 <_free_r+0x90>
 80053de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e2:	9001      	str	r0, [sp, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f1a1 0404 	sub.w	r4, r1, #4
 80053ea:	bfb8      	it	lt
 80053ec:	18e4      	addlt	r4, r4, r3
 80053ee:	f7ff fe35 	bl	800505c <__malloc_lock>
 80053f2:	4a1e      	ldr	r2, [pc, #120]	; (800546c <_free_r+0x94>)
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	b933      	cbnz	r3, 8005408 <_free_r+0x30>
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	6014      	str	r4, [r2, #0]
 80053fe:	b003      	add	sp, #12
 8005400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005404:	f7ff be30 	b.w	8005068 <__malloc_unlock>
 8005408:	42a3      	cmp	r3, r4
 800540a:	d908      	bls.n	800541e <_free_r+0x46>
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	1961      	adds	r1, r4, r5
 8005410:	428b      	cmp	r3, r1
 8005412:	bf01      	itttt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	1949      	addeq	r1, r1, r5
 800541a:	6021      	streq	r1, [r4, #0]
 800541c:	e7ed      	b.n	80053fa <_free_r+0x22>
 800541e:	461a      	mov	r2, r3
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	b10b      	cbz	r3, 8005428 <_free_r+0x50>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d9fa      	bls.n	800541e <_free_r+0x46>
 8005428:	6811      	ldr	r1, [r2, #0]
 800542a:	1855      	adds	r5, r2, r1
 800542c:	42a5      	cmp	r5, r4
 800542e:	d10b      	bne.n	8005448 <_free_r+0x70>
 8005430:	6824      	ldr	r4, [r4, #0]
 8005432:	4421      	add	r1, r4
 8005434:	1854      	adds	r4, r2, r1
 8005436:	42a3      	cmp	r3, r4
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	d1e0      	bne.n	80053fe <_free_r+0x26>
 800543c:	681c      	ldr	r4, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	6053      	str	r3, [r2, #4]
 8005442:	440c      	add	r4, r1
 8005444:	6014      	str	r4, [r2, #0]
 8005446:	e7da      	b.n	80053fe <_free_r+0x26>
 8005448:	d902      	bls.n	8005450 <_free_r+0x78>
 800544a:	230c      	movs	r3, #12
 800544c:	6003      	str	r3, [r0, #0]
 800544e:	e7d6      	b.n	80053fe <_free_r+0x26>
 8005450:	6825      	ldr	r5, [r4, #0]
 8005452:	1961      	adds	r1, r4, r5
 8005454:	428b      	cmp	r3, r1
 8005456:	bf04      	itt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	6063      	str	r3, [r4, #4]
 800545e:	bf04      	itt	eq
 8005460:	1949      	addeq	r1, r1, r5
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	6054      	str	r4, [r2, #4]
 8005466:	e7ca      	b.n	80053fe <_free_r+0x26>
 8005468:	b003      	add	sp, #12
 800546a:	bd30      	pop	{r4, r5, pc}
 800546c:	20000278 	.word	0x20000278

08005470 <__sfputc_r>:
 8005470:	6893      	ldr	r3, [r2, #8]
 8005472:	3b01      	subs	r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	b410      	push	{r4}
 8005478:	6093      	str	r3, [r2, #8]
 800547a:	da08      	bge.n	800548e <__sfputc_r+0x1e>
 800547c:	6994      	ldr	r4, [r2, #24]
 800547e:	42a3      	cmp	r3, r4
 8005480:	db01      	blt.n	8005486 <__sfputc_r+0x16>
 8005482:	290a      	cmp	r1, #10
 8005484:	d103      	bne.n	800548e <__sfputc_r+0x1e>
 8005486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800548a:	f000 bb73 	b.w	8005b74 <__swbuf_r>
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	1c58      	adds	r0, r3, #1
 8005492:	6010      	str	r0, [r2, #0]
 8005494:	7019      	strb	r1, [r3, #0]
 8005496:	4608      	mov	r0, r1
 8005498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800549c:	4770      	bx	lr

0800549e <__sfputs_r>:
 800549e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a0:	4606      	mov	r6, r0
 80054a2:	460f      	mov	r7, r1
 80054a4:	4614      	mov	r4, r2
 80054a6:	18d5      	adds	r5, r2, r3
 80054a8:	42ac      	cmp	r4, r5
 80054aa:	d101      	bne.n	80054b0 <__sfputs_r+0x12>
 80054ac:	2000      	movs	r0, #0
 80054ae:	e007      	b.n	80054c0 <__sfputs_r+0x22>
 80054b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054b4:	463a      	mov	r2, r7
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7ff ffda 	bl	8005470 <__sfputc_r>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d1f3      	bne.n	80054a8 <__sfputs_r+0xa>
 80054c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054c4 <_vfiprintf_r>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	460d      	mov	r5, r1
 80054ca:	b09d      	sub	sp, #116	; 0x74
 80054cc:	4614      	mov	r4, r2
 80054ce:	4698      	mov	r8, r3
 80054d0:	4606      	mov	r6, r0
 80054d2:	b118      	cbz	r0, 80054dc <_vfiprintf_r+0x18>
 80054d4:	6a03      	ldr	r3, [r0, #32]
 80054d6:	b90b      	cbnz	r3, 80054dc <_vfiprintf_r+0x18>
 80054d8:	f7ff fe58 	bl	800518c <__sinit>
 80054dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054de:	07d9      	lsls	r1, r3, #31
 80054e0:	d405      	bmi.n	80054ee <_vfiprintf_r+0x2a>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	059a      	lsls	r2, r3, #22
 80054e6:	d402      	bmi.n	80054ee <_vfiprintf_r+0x2a>
 80054e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ea:	f7ff ff64 	bl	80053b6 <__retarget_lock_acquire_recursive>
 80054ee:	89ab      	ldrh	r3, [r5, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	d501      	bpl.n	80054f8 <_vfiprintf_r+0x34>
 80054f4:	692b      	ldr	r3, [r5, #16]
 80054f6:	b99b      	cbnz	r3, 8005520 <_vfiprintf_r+0x5c>
 80054f8:	4629      	mov	r1, r5
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 fb78 	bl	8005bf0 <__swsetup_r>
 8005500:	b170      	cbz	r0, 8005520 <_vfiprintf_r+0x5c>
 8005502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005504:	07dc      	lsls	r4, r3, #31
 8005506:	d504      	bpl.n	8005512 <_vfiprintf_r+0x4e>
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	b01d      	add	sp, #116	; 0x74
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	0598      	lsls	r0, r3, #22
 8005516:	d4f7      	bmi.n	8005508 <_vfiprintf_r+0x44>
 8005518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551a:	f7ff ff4d 	bl	80053b8 <__retarget_lock_release_recursive>
 800551e:	e7f3      	b.n	8005508 <_vfiprintf_r+0x44>
 8005520:	2300      	movs	r3, #0
 8005522:	9309      	str	r3, [sp, #36]	; 0x24
 8005524:	2320      	movs	r3, #32
 8005526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800552a:	f8cd 800c 	str.w	r8, [sp, #12]
 800552e:	2330      	movs	r3, #48	; 0x30
 8005530:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80056e4 <_vfiprintf_r+0x220>
 8005534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005538:	f04f 0901 	mov.w	r9, #1
 800553c:	4623      	mov	r3, r4
 800553e:	469a      	mov	sl, r3
 8005540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005544:	b10a      	cbz	r2, 800554a <_vfiprintf_r+0x86>
 8005546:	2a25      	cmp	r2, #37	; 0x25
 8005548:	d1f9      	bne.n	800553e <_vfiprintf_r+0x7a>
 800554a:	ebba 0b04 	subs.w	fp, sl, r4
 800554e:	d00b      	beq.n	8005568 <_vfiprintf_r+0xa4>
 8005550:	465b      	mov	r3, fp
 8005552:	4622      	mov	r2, r4
 8005554:	4629      	mov	r1, r5
 8005556:	4630      	mov	r0, r6
 8005558:	f7ff ffa1 	bl	800549e <__sfputs_r>
 800555c:	3001      	adds	r0, #1
 800555e:	f000 80a9 	beq.w	80056b4 <_vfiprintf_r+0x1f0>
 8005562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005564:	445a      	add	r2, fp
 8005566:	9209      	str	r2, [sp, #36]	; 0x24
 8005568:	f89a 3000 	ldrb.w	r3, [sl]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80a1 	beq.w	80056b4 <_vfiprintf_r+0x1f0>
 8005572:	2300      	movs	r3, #0
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800557c:	f10a 0a01 	add.w	sl, sl, #1
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005588:	931a      	str	r3, [sp, #104]	; 0x68
 800558a:	4654      	mov	r4, sl
 800558c:	2205      	movs	r2, #5
 800558e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005592:	4854      	ldr	r0, [pc, #336]	; (80056e4 <_vfiprintf_r+0x220>)
 8005594:	f7fa fe3c 	bl	8000210 <memchr>
 8005598:	9a04      	ldr	r2, [sp, #16]
 800559a:	b9d8      	cbnz	r0, 80055d4 <_vfiprintf_r+0x110>
 800559c:	06d1      	lsls	r1, r2, #27
 800559e:	bf44      	itt	mi
 80055a0:	2320      	movmi	r3, #32
 80055a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a6:	0713      	lsls	r3, r2, #28
 80055a8:	bf44      	itt	mi
 80055aa:	232b      	movmi	r3, #43	; 0x2b
 80055ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b0:	f89a 3000 	ldrb.w	r3, [sl]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d015      	beq.n	80055e4 <_vfiprintf_r+0x120>
 80055b8:	9a07      	ldr	r2, [sp, #28]
 80055ba:	4654      	mov	r4, sl
 80055bc:	2000      	movs	r0, #0
 80055be:	f04f 0c0a 	mov.w	ip, #10
 80055c2:	4621      	mov	r1, r4
 80055c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055c8:	3b30      	subs	r3, #48	; 0x30
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d94d      	bls.n	800566a <_vfiprintf_r+0x1a6>
 80055ce:	b1b0      	cbz	r0, 80055fe <_vfiprintf_r+0x13a>
 80055d0:	9207      	str	r2, [sp, #28]
 80055d2:	e014      	b.n	80055fe <_vfiprintf_r+0x13a>
 80055d4:	eba0 0308 	sub.w	r3, r0, r8
 80055d8:	fa09 f303 	lsl.w	r3, r9, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	46a2      	mov	sl, r4
 80055e2:	e7d2      	b.n	800558a <_vfiprintf_r+0xc6>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	1d19      	adds	r1, r3, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	9103      	str	r1, [sp, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bfbb      	ittet	lt
 80055f0:	425b      	neglt	r3, r3
 80055f2:	f042 0202 	orrlt.w	r2, r2, #2
 80055f6:	9307      	strge	r3, [sp, #28]
 80055f8:	9307      	strlt	r3, [sp, #28]
 80055fa:	bfb8      	it	lt
 80055fc:	9204      	strlt	r2, [sp, #16]
 80055fe:	7823      	ldrb	r3, [r4, #0]
 8005600:	2b2e      	cmp	r3, #46	; 0x2e
 8005602:	d10c      	bne.n	800561e <_vfiprintf_r+0x15a>
 8005604:	7863      	ldrb	r3, [r4, #1]
 8005606:	2b2a      	cmp	r3, #42	; 0x2a
 8005608:	d134      	bne.n	8005674 <_vfiprintf_r+0x1b0>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	1d1a      	adds	r2, r3, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	9203      	str	r2, [sp, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	bfb8      	it	lt
 8005616:	f04f 33ff 	movlt.w	r3, #4294967295
 800561a:	3402      	adds	r4, #2
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80056f4 <_vfiprintf_r+0x230>
 8005622:	7821      	ldrb	r1, [r4, #0]
 8005624:	2203      	movs	r2, #3
 8005626:	4650      	mov	r0, sl
 8005628:	f7fa fdf2 	bl	8000210 <memchr>
 800562c:	b138      	cbz	r0, 800563e <_vfiprintf_r+0x17a>
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	eba0 000a 	sub.w	r0, r0, sl
 8005634:	2240      	movs	r2, #64	; 0x40
 8005636:	4082      	lsls	r2, r0
 8005638:	4313      	orrs	r3, r2
 800563a:	3401      	adds	r4, #1
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005642:	4829      	ldr	r0, [pc, #164]	; (80056e8 <_vfiprintf_r+0x224>)
 8005644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005648:	2206      	movs	r2, #6
 800564a:	f7fa fde1 	bl	8000210 <memchr>
 800564e:	2800      	cmp	r0, #0
 8005650:	d03f      	beq.n	80056d2 <_vfiprintf_r+0x20e>
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <_vfiprintf_r+0x228>)
 8005654:	bb1b      	cbnz	r3, 800569e <_vfiprintf_r+0x1da>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	3307      	adds	r3, #7
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	3308      	adds	r3, #8
 8005660:	9303      	str	r3, [sp, #12]
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	443b      	add	r3, r7
 8005666:	9309      	str	r3, [sp, #36]	; 0x24
 8005668:	e768      	b.n	800553c <_vfiprintf_r+0x78>
 800566a:	fb0c 3202 	mla	r2, ip, r2, r3
 800566e:	460c      	mov	r4, r1
 8005670:	2001      	movs	r0, #1
 8005672:	e7a6      	b.n	80055c2 <_vfiprintf_r+0xfe>
 8005674:	2300      	movs	r3, #0
 8005676:	3401      	adds	r4, #1
 8005678:	9305      	str	r3, [sp, #20]
 800567a:	4619      	mov	r1, r3
 800567c:	f04f 0c0a 	mov.w	ip, #10
 8005680:	4620      	mov	r0, r4
 8005682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005686:	3a30      	subs	r2, #48	; 0x30
 8005688:	2a09      	cmp	r2, #9
 800568a:	d903      	bls.n	8005694 <_vfiprintf_r+0x1d0>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0c6      	beq.n	800561e <_vfiprintf_r+0x15a>
 8005690:	9105      	str	r1, [sp, #20]
 8005692:	e7c4      	b.n	800561e <_vfiprintf_r+0x15a>
 8005694:	fb0c 2101 	mla	r1, ip, r1, r2
 8005698:	4604      	mov	r4, r0
 800569a:	2301      	movs	r3, #1
 800569c:	e7f0      	b.n	8005680 <_vfiprintf_r+0x1bc>
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	462a      	mov	r2, r5
 80056a4:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <_vfiprintf_r+0x22c>)
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	4630      	mov	r0, r6
 80056aa:	f3af 8000 	nop.w
 80056ae:	4607      	mov	r7, r0
 80056b0:	1c78      	adds	r0, r7, #1
 80056b2:	d1d6      	bne.n	8005662 <_vfiprintf_r+0x19e>
 80056b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b6:	07d9      	lsls	r1, r3, #31
 80056b8:	d405      	bmi.n	80056c6 <_vfiprintf_r+0x202>
 80056ba:	89ab      	ldrh	r3, [r5, #12]
 80056bc:	059a      	lsls	r2, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_vfiprintf_r+0x202>
 80056c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c2:	f7ff fe79 	bl	80053b8 <__retarget_lock_release_recursive>
 80056c6:	89ab      	ldrh	r3, [r5, #12]
 80056c8:	065b      	lsls	r3, r3, #25
 80056ca:	f53f af1d 	bmi.w	8005508 <_vfiprintf_r+0x44>
 80056ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056d0:	e71c      	b.n	800550c <_vfiprintf_r+0x48>
 80056d2:	ab03      	add	r3, sp, #12
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	462a      	mov	r2, r5
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <_vfiprintf_r+0x22c>)
 80056da:	a904      	add	r1, sp, #16
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 f879 	bl	80057d4 <_printf_i>
 80056e2:	e7e4      	b.n	80056ae <_vfiprintf_r+0x1ea>
 80056e4:	08005de4 	.word	0x08005de4
 80056e8:	08005dee 	.word	0x08005dee
 80056ec:	00000000 	.word	0x00000000
 80056f0:	0800549f 	.word	0x0800549f
 80056f4:	08005dea 	.word	0x08005dea

080056f8 <_printf_common>:
 80056f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	4616      	mov	r6, r2
 80056fe:	4699      	mov	r9, r3
 8005700:	688a      	ldr	r2, [r1, #8]
 8005702:	690b      	ldr	r3, [r1, #16]
 8005704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005708:	4293      	cmp	r3, r2
 800570a:	bfb8      	it	lt
 800570c:	4613      	movlt	r3, r2
 800570e:	6033      	str	r3, [r6, #0]
 8005710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005714:	4607      	mov	r7, r0
 8005716:	460c      	mov	r4, r1
 8005718:	b10a      	cbz	r2, 800571e <_printf_common+0x26>
 800571a:	3301      	adds	r3, #1
 800571c:	6033      	str	r3, [r6, #0]
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	0699      	lsls	r1, r3, #26
 8005722:	bf42      	ittt	mi
 8005724:	6833      	ldrmi	r3, [r6, #0]
 8005726:	3302      	addmi	r3, #2
 8005728:	6033      	strmi	r3, [r6, #0]
 800572a:	6825      	ldr	r5, [r4, #0]
 800572c:	f015 0506 	ands.w	r5, r5, #6
 8005730:	d106      	bne.n	8005740 <_printf_common+0x48>
 8005732:	f104 0a19 	add.w	sl, r4, #25
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	6832      	ldr	r2, [r6, #0]
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	42ab      	cmp	r3, r5
 800573e:	dc26      	bgt.n	800578e <_printf_common+0x96>
 8005740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005744:	1e13      	subs	r3, r2, #0
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	bf18      	it	ne
 800574a:	2301      	movne	r3, #1
 800574c:	0692      	lsls	r2, r2, #26
 800574e:	d42b      	bmi.n	80057a8 <_printf_common+0xb0>
 8005750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005754:	4649      	mov	r1, r9
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d01e      	beq.n	800579c <_printf_common+0xa4>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	6922      	ldr	r2, [r4, #16]
 8005762:	f003 0306 	and.w	r3, r3, #6
 8005766:	2b04      	cmp	r3, #4
 8005768:	bf02      	ittt	eq
 800576a:	68e5      	ldreq	r5, [r4, #12]
 800576c:	6833      	ldreq	r3, [r6, #0]
 800576e:	1aed      	subeq	r5, r5, r3
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	bf0c      	ite	eq
 8005774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005778:	2500      	movne	r5, #0
 800577a:	4293      	cmp	r3, r2
 800577c:	bfc4      	itt	gt
 800577e:	1a9b      	subgt	r3, r3, r2
 8005780:	18ed      	addgt	r5, r5, r3
 8005782:	2600      	movs	r6, #0
 8005784:	341a      	adds	r4, #26
 8005786:	42b5      	cmp	r5, r6
 8005788:	d11a      	bne.n	80057c0 <_printf_common+0xc8>
 800578a:	2000      	movs	r0, #0
 800578c:	e008      	b.n	80057a0 <_printf_common+0xa8>
 800578e:	2301      	movs	r3, #1
 8005790:	4652      	mov	r2, sl
 8005792:	4649      	mov	r1, r9
 8005794:	4638      	mov	r0, r7
 8005796:	47c0      	blx	r8
 8005798:	3001      	adds	r0, #1
 800579a:	d103      	bne.n	80057a4 <_printf_common+0xac>
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a4:	3501      	adds	r5, #1
 80057a6:	e7c6      	b.n	8005736 <_printf_common+0x3e>
 80057a8:	18e1      	adds	r1, r4, r3
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	2030      	movs	r0, #48	; 0x30
 80057ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b2:	4422      	add	r2, r4
 80057b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057bc:	3302      	adds	r3, #2
 80057be:	e7c7      	b.n	8005750 <_printf_common+0x58>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4622      	mov	r2, r4
 80057c4:	4649      	mov	r1, r9
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d0e6      	beq.n	800579c <_printf_common+0xa4>
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7d9      	b.n	8005786 <_printf_common+0x8e>
	...

080057d4 <_printf_i>:
 80057d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	7e0f      	ldrb	r7, [r1, #24]
 80057da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057dc:	2f78      	cmp	r7, #120	; 0x78
 80057de:	4691      	mov	r9, r2
 80057e0:	4680      	mov	r8, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	469a      	mov	sl, r3
 80057e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ea:	d807      	bhi.n	80057fc <_printf_i+0x28>
 80057ec:	2f62      	cmp	r7, #98	; 0x62
 80057ee:	d80a      	bhi.n	8005806 <_printf_i+0x32>
 80057f0:	2f00      	cmp	r7, #0
 80057f2:	f000 80d4 	beq.w	800599e <_printf_i+0x1ca>
 80057f6:	2f58      	cmp	r7, #88	; 0x58
 80057f8:	f000 80c0 	beq.w	800597c <_printf_i+0x1a8>
 80057fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005804:	e03a      	b.n	800587c <_printf_i+0xa8>
 8005806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580a:	2b15      	cmp	r3, #21
 800580c:	d8f6      	bhi.n	80057fc <_printf_i+0x28>
 800580e:	a101      	add	r1, pc, #4	; (adr r1, 8005814 <_printf_i+0x40>)
 8005810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005814:	0800586d 	.word	0x0800586d
 8005818:	08005881 	.word	0x08005881
 800581c:	080057fd 	.word	0x080057fd
 8005820:	080057fd 	.word	0x080057fd
 8005824:	080057fd 	.word	0x080057fd
 8005828:	080057fd 	.word	0x080057fd
 800582c:	08005881 	.word	0x08005881
 8005830:	080057fd 	.word	0x080057fd
 8005834:	080057fd 	.word	0x080057fd
 8005838:	080057fd 	.word	0x080057fd
 800583c:	080057fd 	.word	0x080057fd
 8005840:	08005985 	.word	0x08005985
 8005844:	080058ad 	.word	0x080058ad
 8005848:	0800593f 	.word	0x0800593f
 800584c:	080057fd 	.word	0x080057fd
 8005850:	080057fd 	.word	0x080057fd
 8005854:	080059a7 	.word	0x080059a7
 8005858:	080057fd 	.word	0x080057fd
 800585c:	080058ad 	.word	0x080058ad
 8005860:	080057fd 	.word	0x080057fd
 8005864:	080057fd 	.word	0x080057fd
 8005868:	08005947 	.word	0x08005947
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	602a      	str	r2, [r5, #0]
 8005874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800587c:	2301      	movs	r3, #1
 800587e:	e09f      	b.n	80059c0 <_printf_i+0x1ec>
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	0607      	lsls	r7, r0, #24
 8005886:	f103 0104 	add.w	r1, r3, #4
 800588a:	6029      	str	r1, [r5, #0]
 800588c:	d501      	bpl.n	8005892 <_printf_i+0xbe>
 800588e:	681e      	ldr	r6, [r3, #0]
 8005890:	e003      	b.n	800589a <_printf_i+0xc6>
 8005892:	0646      	lsls	r6, r0, #25
 8005894:	d5fb      	bpl.n	800588e <_printf_i+0xba>
 8005896:	f9b3 6000 	ldrsh.w	r6, [r3]
 800589a:	2e00      	cmp	r6, #0
 800589c:	da03      	bge.n	80058a6 <_printf_i+0xd2>
 800589e:	232d      	movs	r3, #45	; 0x2d
 80058a0:	4276      	negs	r6, r6
 80058a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a6:	485a      	ldr	r0, [pc, #360]	; (8005a10 <_printf_i+0x23c>)
 80058a8:	230a      	movs	r3, #10
 80058aa:	e012      	b.n	80058d2 <_printf_i+0xfe>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	6820      	ldr	r0, [r4, #0]
 80058b0:	1d19      	adds	r1, r3, #4
 80058b2:	6029      	str	r1, [r5, #0]
 80058b4:	0605      	lsls	r5, r0, #24
 80058b6:	d501      	bpl.n	80058bc <_printf_i+0xe8>
 80058b8:	681e      	ldr	r6, [r3, #0]
 80058ba:	e002      	b.n	80058c2 <_printf_i+0xee>
 80058bc:	0641      	lsls	r1, r0, #25
 80058be:	d5fb      	bpl.n	80058b8 <_printf_i+0xe4>
 80058c0:	881e      	ldrh	r6, [r3, #0]
 80058c2:	4853      	ldr	r0, [pc, #332]	; (8005a10 <_printf_i+0x23c>)
 80058c4:	2f6f      	cmp	r7, #111	; 0x6f
 80058c6:	bf0c      	ite	eq
 80058c8:	2308      	moveq	r3, #8
 80058ca:	230a      	movne	r3, #10
 80058cc:	2100      	movs	r1, #0
 80058ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058d2:	6865      	ldr	r5, [r4, #4]
 80058d4:	60a5      	str	r5, [r4, #8]
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	bfa2      	ittt	ge
 80058da:	6821      	ldrge	r1, [r4, #0]
 80058dc:	f021 0104 	bicge.w	r1, r1, #4
 80058e0:	6021      	strge	r1, [r4, #0]
 80058e2:	b90e      	cbnz	r6, 80058e8 <_printf_i+0x114>
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	d04b      	beq.n	8005980 <_printf_i+0x1ac>
 80058e8:	4615      	mov	r5, r2
 80058ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80058ee:	fb03 6711 	mls	r7, r3, r1, r6
 80058f2:	5dc7      	ldrb	r7, [r0, r7]
 80058f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058f8:	4637      	mov	r7, r6
 80058fa:	42bb      	cmp	r3, r7
 80058fc:	460e      	mov	r6, r1
 80058fe:	d9f4      	bls.n	80058ea <_printf_i+0x116>
 8005900:	2b08      	cmp	r3, #8
 8005902:	d10b      	bne.n	800591c <_printf_i+0x148>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	07de      	lsls	r6, r3, #31
 8005908:	d508      	bpl.n	800591c <_printf_i+0x148>
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	6861      	ldr	r1, [r4, #4]
 800590e:	4299      	cmp	r1, r3
 8005910:	bfde      	ittt	le
 8005912:	2330      	movle	r3, #48	; 0x30
 8005914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800591c:	1b52      	subs	r2, r2, r5
 800591e:	6122      	str	r2, [r4, #16]
 8005920:	f8cd a000 	str.w	sl, [sp]
 8005924:	464b      	mov	r3, r9
 8005926:	aa03      	add	r2, sp, #12
 8005928:	4621      	mov	r1, r4
 800592a:	4640      	mov	r0, r8
 800592c:	f7ff fee4 	bl	80056f8 <_printf_common>
 8005930:	3001      	adds	r0, #1
 8005932:	d14a      	bne.n	80059ca <_printf_i+0x1f6>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	b004      	add	sp, #16
 800593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f043 0320 	orr.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	4833      	ldr	r0, [pc, #204]	; (8005a14 <_printf_i+0x240>)
 8005948:	2778      	movs	r7, #120	; 0x78
 800594a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	6829      	ldr	r1, [r5, #0]
 8005952:	061f      	lsls	r7, r3, #24
 8005954:	f851 6b04 	ldr.w	r6, [r1], #4
 8005958:	d402      	bmi.n	8005960 <_printf_i+0x18c>
 800595a:	065f      	lsls	r7, r3, #25
 800595c:	bf48      	it	mi
 800595e:	b2b6      	uxthmi	r6, r6
 8005960:	07df      	lsls	r7, r3, #31
 8005962:	bf48      	it	mi
 8005964:	f043 0320 	orrmi.w	r3, r3, #32
 8005968:	6029      	str	r1, [r5, #0]
 800596a:	bf48      	it	mi
 800596c:	6023      	strmi	r3, [r4, #0]
 800596e:	b91e      	cbnz	r6, 8005978 <_printf_i+0x1a4>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	f023 0320 	bic.w	r3, r3, #32
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	2310      	movs	r3, #16
 800597a:	e7a7      	b.n	80058cc <_printf_i+0xf8>
 800597c:	4824      	ldr	r0, [pc, #144]	; (8005a10 <_printf_i+0x23c>)
 800597e:	e7e4      	b.n	800594a <_printf_i+0x176>
 8005980:	4615      	mov	r5, r2
 8005982:	e7bd      	b.n	8005900 <_printf_i+0x12c>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	6826      	ldr	r6, [r4, #0]
 8005988:	6961      	ldr	r1, [r4, #20]
 800598a:	1d18      	adds	r0, r3, #4
 800598c:	6028      	str	r0, [r5, #0]
 800598e:	0635      	lsls	r5, r6, #24
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	d501      	bpl.n	8005998 <_printf_i+0x1c4>
 8005994:	6019      	str	r1, [r3, #0]
 8005996:	e002      	b.n	800599e <_printf_i+0x1ca>
 8005998:	0670      	lsls	r0, r6, #25
 800599a:	d5fb      	bpl.n	8005994 <_printf_i+0x1c0>
 800599c:	8019      	strh	r1, [r3, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	4615      	mov	r5, r2
 80059a4:	e7bc      	b.n	8005920 <_printf_i+0x14c>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	602a      	str	r2, [r5, #0]
 80059ac:	681d      	ldr	r5, [r3, #0]
 80059ae:	6862      	ldr	r2, [r4, #4]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4628      	mov	r0, r5
 80059b4:	f7fa fc2c 	bl	8000210 <memchr>
 80059b8:	b108      	cbz	r0, 80059be <_printf_i+0x1ea>
 80059ba:	1b40      	subs	r0, r0, r5
 80059bc:	6060      	str	r0, [r4, #4]
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	6123      	str	r3, [r4, #16]
 80059c2:	2300      	movs	r3, #0
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c8:	e7aa      	b.n	8005920 <_printf_i+0x14c>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	462a      	mov	r2, r5
 80059ce:	4649      	mov	r1, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	47d0      	blx	sl
 80059d4:	3001      	adds	r0, #1
 80059d6:	d0ad      	beq.n	8005934 <_printf_i+0x160>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	079b      	lsls	r3, r3, #30
 80059dc:	d413      	bmi.n	8005a06 <_printf_i+0x232>
 80059de:	68e0      	ldr	r0, [r4, #12]
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	4298      	cmp	r0, r3
 80059e4:	bfb8      	it	lt
 80059e6:	4618      	movlt	r0, r3
 80059e8:	e7a6      	b.n	8005938 <_printf_i+0x164>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4632      	mov	r2, r6
 80059ee:	4649      	mov	r1, r9
 80059f0:	4640      	mov	r0, r8
 80059f2:	47d0      	blx	sl
 80059f4:	3001      	adds	r0, #1
 80059f6:	d09d      	beq.n	8005934 <_printf_i+0x160>
 80059f8:	3501      	adds	r5, #1
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	9903      	ldr	r1, [sp, #12]
 80059fe:	1a5b      	subs	r3, r3, r1
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dcf2      	bgt.n	80059ea <_printf_i+0x216>
 8005a04:	e7eb      	b.n	80059de <_printf_i+0x20a>
 8005a06:	2500      	movs	r5, #0
 8005a08:	f104 0619 	add.w	r6, r4, #25
 8005a0c:	e7f5      	b.n	80059fa <_printf_i+0x226>
 8005a0e:	bf00      	nop
 8005a10:	08005df5 	.word	0x08005df5
 8005a14:	08005e06 	.word	0x08005e06

08005a18 <__sflush_r>:
 8005a18:	898a      	ldrh	r2, [r1, #12]
 8005a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	0710      	lsls	r0, r2, #28
 8005a22:	460c      	mov	r4, r1
 8005a24:	d458      	bmi.n	8005ad8 <__sflush_r+0xc0>
 8005a26:	684b      	ldr	r3, [r1, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dc05      	bgt.n	8005a38 <__sflush_r+0x20>
 8005a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	dc02      	bgt.n	8005a38 <__sflush_r+0x20>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	d0f9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a44:	682f      	ldr	r7, [r5, #0]
 8005a46:	6a21      	ldr	r1, [r4, #32]
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	d032      	beq.n	8005ab2 <__sflush_r+0x9a>
 8005a4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	075a      	lsls	r2, r3, #29
 8005a52:	d505      	bpl.n	8005a60 <__sflush_r+0x48>
 8005a54:	6863      	ldr	r3, [r4, #4]
 8005a56:	1ac0      	subs	r0, r0, r3
 8005a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a5a:	b10b      	cbz	r3, 8005a60 <__sflush_r+0x48>
 8005a5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a5e:	1ac0      	subs	r0, r0, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	4602      	mov	r2, r0
 8005a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a66:	6a21      	ldr	r1, [r4, #32]
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b0      	blx	r6
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	d106      	bne.n	8005a80 <__sflush_r+0x68>
 8005a72:	6829      	ldr	r1, [r5, #0]
 8005a74:	291d      	cmp	r1, #29
 8005a76:	d82b      	bhi.n	8005ad0 <__sflush_r+0xb8>
 8005a78:	4a29      	ldr	r2, [pc, #164]	; (8005b20 <__sflush_r+0x108>)
 8005a7a:	410a      	asrs	r2, r1
 8005a7c:	07d6      	lsls	r6, r2, #31
 8005a7e:	d427      	bmi.n	8005ad0 <__sflush_r+0xb8>
 8005a80:	2200      	movs	r2, #0
 8005a82:	6062      	str	r2, [r4, #4]
 8005a84:	04d9      	lsls	r1, r3, #19
 8005a86:	6922      	ldr	r2, [r4, #16]
 8005a88:	6022      	str	r2, [r4, #0]
 8005a8a:	d504      	bpl.n	8005a96 <__sflush_r+0x7e>
 8005a8c:	1c42      	adds	r2, r0, #1
 8005a8e:	d101      	bne.n	8005a94 <__sflush_r+0x7c>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b903      	cbnz	r3, 8005a96 <__sflush_r+0x7e>
 8005a94:	6560      	str	r0, [r4, #84]	; 0x54
 8005a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a98:	602f      	str	r7, [r5, #0]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d0c9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005a9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	d002      	beq.n	8005aac <__sflush_r+0x94>
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7ff fc96 	bl	80053d8 <_free_r>
 8005aac:	2000      	movs	r0, #0
 8005aae:	6360      	str	r0, [r4, #52]	; 0x34
 8005ab0:	e7c0      	b.n	8005a34 <__sflush_r+0x1c>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	47b0      	blx	r6
 8005ab8:	1c41      	adds	r1, r0, #1
 8005aba:	d1c8      	bne.n	8005a4e <__sflush_r+0x36>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0c5      	beq.n	8005a4e <__sflush_r+0x36>
 8005ac2:	2b1d      	cmp	r3, #29
 8005ac4:	d001      	beq.n	8005aca <__sflush_r+0xb2>
 8005ac6:	2b16      	cmp	r3, #22
 8005ac8:	d101      	bne.n	8005ace <__sflush_r+0xb6>
 8005aca:	602f      	str	r7, [r5, #0]
 8005acc:	e7b1      	b.n	8005a32 <__sflush_r+0x1a>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	e7ad      	b.n	8005a34 <__sflush_r+0x1c>
 8005ad8:	690f      	ldr	r7, [r1, #16]
 8005ada:	2f00      	cmp	r7, #0
 8005adc:	d0a9      	beq.n	8005a32 <__sflush_r+0x1a>
 8005ade:	0793      	lsls	r3, r2, #30
 8005ae0:	680e      	ldr	r6, [r1, #0]
 8005ae2:	bf08      	it	eq
 8005ae4:	694b      	ldreq	r3, [r1, #20]
 8005ae6:	600f      	str	r7, [r1, #0]
 8005ae8:	bf18      	it	ne
 8005aea:	2300      	movne	r3, #0
 8005aec:	eba6 0807 	sub.w	r8, r6, r7
 8005af0:	608b      	str	r3, [r1, #8]
 8005af2:	f1b8 0f00 	cmp.w	r8, #0
 8005af6:	dd9c      	ble.n	8005a32 <__sflush_r+0x1a>
 8005af8:	6a21      	ldr	r1, [r4, #32]
 8005afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005afc:	4643      	mov	r3, r8
 8005afe:	463a      	mov	r2, r7
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b0      	blx	r6
 8005b04:	2800      	cmp	r0, #0
 8005b06:	dc06      	bgt.n	8005b16 <__sflush_r+0xfe>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	e78e      	b.n	8005a34 <__sflush_r+0x1c>
 8005b16:	4407      	add	r7, r0
 8005b18:	eba8 0800 	sub.w	r8, r8, r0
 8005b1c:	e7e9      	b.n	8005af2 <__sflush_r+0xda>
 8005b1e:	bf00      	nop
 8005b20:	dfbffffe 	.word	0xdfbffffe

08005b24 <_fflush_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	690b      	ldr	r3, [r1, #16]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	b913      	cbnz	r3, 8005b34 <_fflush_r+0x10>
 8005b2e:	2500      	movs	r5, #0
 8005b30:	4628      	mov	r0, r5
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	b118      	cbz	r0, 8005b3e <_fflush_r+0x1a>
 8005b36:	6a03      	ldr	r3, [r0, #32]
 8005b38:	b90b      	cbnz	r3, 8005b3e <_fflush_r+0x1a>
 8005b3a:	f7ff fb27 	bl	800518c <__sinit>
 8005b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f3      	beq.n	8005b2e <_fflush_r+0xa>
 8005b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b48:	07d0      	lsls	r0, r2, #31
 8005b4a:	d404      	bmi.n	8005b56 <_fflush_r+0x32>
 8005b4c:	0599      	lsls	r1, r3, #22
 8005b4e:	d402      	bmi.n	8005b56 <_fflush_r+0x32>
 8005b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b52:	f7ff fc30 	bl	80053b6 <__retarget_lock_acquire_recursive>
 8005b56:	4628      	mov	r0, r5
 8005b58:	4621      	mov	r1, r4
 8005b5a:	f7ff ff5d 	bl	8005a18 <__sflush_r>
 8005b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b60:	07da      	lsls	r2, r3, #31
 8005b62:	4605      	mov	r5, r0
 8005b64:	d4e4      	bmi.n	8005b30 <_fflush_r+0xc>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	059b      	lsls	r3, r3, #22
 8005b6a:	d4e1      	bmi.n	8005b30 <_fflush_r+0xc>
 8005b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b6e:	f7ff fc23 	bl	80053b8 <__retarget_lock_release_recursive>
 8005b72:	e7dd      	b.n	8005b30 <_fflush_r+0xc>

08005b74 <__swbuf_r>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	460e      	mov	r6, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	b118      	cbz	r0, 8005b86 <__swbuf_r+0x12>
 8005b7e:	6a03      	ldr	r3, [r0, #32]
 8005b80:	b90b      	cbnz	r3, 8005b86 <__swbuf_r+0x12>
 8005b82:	f7ff fb03 	bl	800518c <__sinit>
 8005b86:	69a3      	ldr	r3, [r4, #24]
 8005b88:	60a3      	str	r3, [r4, #8]
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	071a      	lsls	r2, r3, #28
 8005b8e:	d525      	bpl.n	8005bdc <__swbuf_r+0x68>
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	b31b      	cbz	r3, 8005bdc <__swbuf_r+0x68>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	6922      	ldr	r2, [r4, #16]
 8005b98:	1a98      	subs	r0, r3, r2
 8005b9a:	6963      	ldr	r3, [r4, #20]
 8005b9c:	b2f6      	uxtb	r6, r6
 8005b9e:	4283      	cmp	r3, r0
 8005ba0:	4637      	mov	r7, r6
 8005ba2:	dc04      	bgt.n	8005bae <__swbuf_r+0x3a>
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff ffbc 	bl	8005b24 <_fflush_r>
 8005bac:	b9e0      	cbnz	r0, 8005be8 <__swbuf_r+0x74>
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	60a3      	str	r3, [r4, #8]
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	6022      	str	r2, [r4, #0]
 8005bba:	701e      	strb	r6, [r3, #0]
 8005bbc:	6962      	ldr	r2, [r4, #20]
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d004      	beq.n	8005bce <__swbuf_r+0x5a>
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	07db      	lsls	r3, r3, #31
 8005bc8:	d506      	bpl.n	8005bd8 <__swbuf_r+0x64>
 8005bca:	2e0a      	cmp	r6, #10
 8005bcc:	d104      	bne.n	8005bd8 <__swbuf_r+0x64>
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f7ff ffa7 	bl	8005b24 <_fflush_r>
 8005bd6:	b938      	cbnz	r0, 8005be8 <__swbuf_r+0x74>
 8005bd8:	4638      	mov	r0, r7
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 f806 	bl	8005bf0 <__swsetup_r>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0d5      	beq.n	8005b94 <__swbuf_r+0x20>
 8005be8:	f04f 37ff 	mov.w	r7, #4294967295
 8005bec:	e7f4      	b.n	8005bd8 <__swbuf_r+0x64>
	...

08005bf0 <__swsetup_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <__swsetup_r+0xac>)
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	460c      	mov	r4, r1
 8005bfa:	b118      	cbz	r0, 8005c04 <__swsetup_r+0x14>
 8005bfc:	6a03      	ldr	r3, [r0, #32]
 8005bfe:	b90b      	cbnz	r3, 8005c04 <__swsetup_r+0x14>
 8005c00:	f7ff fac4 	bl	800518c <__sinit>
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c0a:	0718      	lsls	r0, r3, #28
 8005c0c:	d422      	bmi.n	8005c54 <__swsetup_r+0x64>
 8005c0e:	06d9      	lsls	r1, r3, #27
 8005c10:	d407      	bmi.n	8005c22 <__swsetup_r+0x32>
 8005c12:	2309      	movs	r3, #9
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	e034      	b.n	8005c8c <__swsetup_r+0x9c>
 8005c22:	0758      	lsls	r0, r3, #29
 8005c24:	d512      	bpl.n	8005c4c <__swsetup_r+0x5c>
 8005c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c28:	b141      	cbz	r1, 8005c3c <__swsetup_r+0x4c>
 8005c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c2e:	4299      	cmp	r1, r3
 8005c30:	d002      	beq.n	8005c38 <__swsetup_r+0x48>
 8005c32:	4628      	mov	r0, r5
 8005c34:	f7ff fbd0 	bl	80053d8 <_free_r>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	2300      	movs	r3, #0
 8005c46:	6063      	str	r3, [r4, #4]
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f043 0308 	orr.w	r3, r3, #8
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	b94b      	cbnz	r3, 8005c6c <__swsetup_r+0x7c>
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c62:	d003      	beq.n	8005c6c <__swsetup_r+0x7c>
 8005c64:	4621      	mov	r1, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 f840 	bl	8005cec <__smakebuf_r>
 8005c6c:	89a0      	ldrh	r0, [r4, #12]
 8005c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c72:	f010 0301 	ands.w	r3, r0, #1
 8005c76:	d00a      	beq.n	8005c8e <__swsetup_r+0x9e>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60a3      	str	r3, [r4, #8]
 8005c7c:	6963      	ldr	r3, [r4, #20]
 8005c7e:	425b      	negs	r3, r3
 8005c80:	61a3      	str	r3, [r4, #24]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	b943      	cbnz	r3, 8005c98 <__swsetup_r+0xa8>
 8005c86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c8a:	d1c4      	bne.n	8005c16 <__swsetup_r+0x26>
 8005c8c:	bd38      	pop	{r3, r4, r5, pc}
 8005c8e:	0781      	lsls	r1, r0, #30
 8005c90:	bf58      	it	pl
 8005c92:	6963      	ldrpl	r3, [r4, #20]
 8005c94:	60a3      	str	r3, [r4, #8]
 8005c96:	e7f4      	b.n	8005c82 <__swsetup_r+0x92>
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e7f7      	b.n	8005c8c <__swsetup_r+0x9c>
 8005c9c:	20000064 	.word	0x20000064

08005ca0 <__swhatbuf_r>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	b096      	sub	sp, #88	; 0x58
 8005cac:	4615      	mov	r5, r2
 8005cae:	461e      	mov	r6, r3
 8005cb0:	da0d      	bge.n	8005cce <__swhatbuf_r+0x2e>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cb8:	f04f 0100 	mov.w	r1, #0
 8005cbc:	bf0c      	ite	eq
 8005cbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005cc2:	2340      	movne	r3, #64	; 0x40
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	6031      	str	r1, [r6, #0]
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	b016      	add	sp, #88	; 0x58
 8005ccc:	bd70      	pop	{r4, r5, r6, pc}
 8005cce:	466a      	mov	r2, sp
 8005cd0:	f000 f848 	bl	8005d64 <_fstat_r>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	dbec      	blt.n	8005cb2 <__swhatbuf_r+0x12>
 8005cd8:	9901      	ldr	r1, [sp, #4]
 8005cda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005cde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005ce2:	4259      	negs	r1, r3
 8005ce4:	4159      	adcs	r1, r3
 8005ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cea:	e7eb      	b.n	8005cc4 <__swhatbuf_r+0x24>

08005cec <__smakebuf_r>:
 8005cec:	898b      	ldrh	r3, [r1, #12]
 8005cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cf0:	079d      	lsls	r5, r3, #30
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	d507      	bpl.n	8005d08 <__smakebuf_r+0x1c>
 8005cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2301      	movs	r3, #1
 8005d02:	6163      	str	r3, [r4, #20]
 8005d04:	b002      	add	sp, #8
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	ab01      	add	r3, sp, #4
 8005d0a:	466a      	mov	r2, sp
 8005d0c:	f7ff ffc8 	bl	8005ca0 <__swhatbuf_r>
 8005d10:	9900      	ldr	r1, [sp, #0]
 8005d12:	4605      	mov	r5, r0
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff f921 	bl	8004f5c <_malloc_r>
 8005d1a:	b948      	cbnz	r0, 8005d30 <__smakebuf_r+0x44>
 8005d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d20:	059a      	lsls	r2, r3, #22
 8005d22:	d4ef      	bmi.n	8005d04 <__smakebuf_r+0x18>
 8005d24:	f023 0303 	bic.w	r3, r3, #3
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	e7e3      	b.n	8005cf8 <__smakebuf_r+0xc>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	6020      	str	r0, [r4, #0]
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	6163      	str	r3, [r4, #20]
 8005d3e:	9b01      	ldr	r3, [sp, #4]
 8005d40:	6120      	str	r0, [r4, #16]
 8005d42:	b15b      	cbz	r3, 8005d5c <__smakebuf_r+0x70>
 8005d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 f81d 	bl	8005d88 <_isatty_r>
 8005d4e:	b128      	cbz	r0, 8005d5c <__smakebuf_r+0x70>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	431d      	orrs	r5, r3
 8005d60:	81a5      	strh	r5, [r4, #12]
 8005d62:	e7cf      	b.n	8005d04 <__smakebuf_r+0x18>

08005d64 <_fstat_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d07      	ldr	r5, [pc, #28]	; (8005d84 <_fstat_r+0x20>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	f7fb fe5c 	bl	8001a2e <_fstat>
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	d102      	bne.n	8005d80 <_fstat_r+0x1c>
 8005d7a:	682b      	ldr	r3, [r5, #0]
 8005d7c:	b103      	cbz	r3, 8005d80 <_fstat_r+0x1c>
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	bd38      	pop	{r3, r4, r5, pc}
 8005d82:	bf00      	nop
 8005d84:	200003bc 	.word	0x200003bc

08005d88 <_isatty_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d06      	ldr	r5, [pc, #24]	; (8005da4 <_isatty_r+0x1c>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	f7fb fe5b 	bl	8001a4e <_isatty>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_isatty_r+0x1a>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_isatty_r+0x1a>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	200003bc 	.word	0x200003bc

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
